<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Monica Dinculescu</title>
 <link href="https://meowni.ca/atom.xml" rel="self"/>
 <link href="https://meowni.ca/"/>
 <updated>2024-09-27T03:48:40+00:00</updated>
 <id>https://meowni.ca</id>
 <author>
   <name>Monica Dinculescu</name>
 </author>

 
 
 
 <entry>
   <title>A swim with a chat bot</title>
   <link href="https://meowni.ca/posts/chatty-mcchatface/"/>
   <updated>2024-09-29T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/chatty-mcchatface</id>
   <content type="html">&lt;p&gt;I have 4 (rounded up) beefs with language-y AI bots that have resulted in me sort of avoiding them altogether:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;They have the personality of a middle manager who writes Google Docs all day that nobody wants to read&lt;/li&gt;
  &lt;li&gt;They’re reallllly good at guessing but not actually that smart, which leads to very convincing lies (see: the “how many Rs in strawberry?” saga). If I had the inclination to double check all the bot’s work, I would’ve just done it myself&lt;/li&gt;
  &lt;li&gt;Absolutely no thank you to the scam that is “prompt engineering”. I’m not wasting 17 demon invocations to convince Chat GPT to do a thing. That’s not the future I was promised.&lt;/li&gt;
  &lt;li&gt;(not their fault) I have unresolved trauma about generated code from the Microsoft FrontPage era&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;testing-the-waters&quot;&gt;Testing the waters&lt;/h2&gt;
&lt;p&gt;Unrelated to bots, I’ve been recently faffing about on a Swift app, with exactly zero prior knowledge of Swift. I basically have to Google everything (what’s up with the mad &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ForEach&lt;/code&gt; syntax????) to get to a Stack Overflow page that isn’t the one I actually need because search results have gotten sloppy, and it takes a minute. None of the things I’m copy pasting are “hard”; they’re tedious code I can write in other languages but not in &lt;em&gt;this&lt;/em&gt; one. And not to be a jerk, but 1-1 code translation isn’t what I want to spend my spare time on.&lt;/p&gt;

&lt;p&gt;A friend told me to try &lt;a href=&quot;https://claude.ai/&quot;&gt;Claude.ai&lt;/a&gt;, and it worked reasonably well for what I asked of it, which was mostly syntax (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;how do I add internal padding to a TextField?&lt;/code&gt;). I tried it for some harder questions with mixed results: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;how do I make links inside a WebView not open a native app?&lt;/code&gt; was a mess, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;why do you think a page of just inputs is really slow&lt;/code&gt; gave me the right idea for where to start spelunking.&lt;/p&gt;

&lt;p&gt;The problem with trying it on a language I’m not an expert in goes back to Beef #2 above – I can’t spot the very convincing lies as easily, and then I spend extra time trying to figure out if I copied it wrong or the answer is wrong (which is what happened with the WebView question), and it takes longer than if I went the tried-and-true slower Stack Overflow way.&lt;/p&gt;

&lt;h2 id=&quot;going-for-a-swim&quot;&gt;Going for a swim&lt;/h2&gt;
&lt;p&gt;Here we go, 1700 words in and we’re finally getting to the punchline! Eventually we all become the middle managers we hate, eh? I finally had the opportunity to try Claude on JavaScript, and it went really well. Like, shockingly well.&lt;/p&gt;

&lt;p&gt;Context: I was working on &lt;a href=&quot;https://music-morsels.glitch.me/what/next.html&quot;&gt;this little website&lt;/a&gt; and I could absolutely not be bothered to do any polar coordinate math. I thought this would be a perfect opportunity to see if there’s a future in this banana stand.&lt;/p&gt;

&lt;h4 id=&quot;in-html-and-css-and-javascript-i-want-to-position-the-letters-a-b-c-d-e-f-and-g-in-a-circlular-sic-wheel&quot;&gt;“In html and css and javascript, i want to position the letters A, B, C, D, E, F and G in a circlular [sic] wheel”&lt;/h4&gt;

&lt;p&gt;&lt;img alt=&quot;i ask the question to the bot, it responds with a page of text i will not be reading, but also with an image of grey bubbles on the circumference of a circle of about 120px, each bubble containing one of the letters i asked for&quot; src=&quot;/images/2024-09-29/1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You assume correctly that I did not read any of that explanation because I’m a baddie and reading is for chumps, but looking at it now, it’s spot on for the code it produced. The code, by the way, was good. One container &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;div&lt;/code&gt; (blisfully avoided Beef #4, check check), 2 CSS selectors (for the container and inner bubbles), and this bit of completely decent JavaScript.
&lt;img alt=&quot;a JS script tag that basically creates a div for each of the letters and absolutely positions it based on  &quot; src=&quot;/images/2024-09-29/3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I could’ve stopped here, but mad with this newly acquired power, and lazy beyond my years, I continued.&lt;/p&gt;
&lt;h4 id=&quot;that-was-almost-perfect-but-can-you-make-sure-that-the-f-is-horizontally-centered-at-the-top&quot;&gt;“That was almost perfect, but can you make sure that the F is horizontally centered at the top?”&lt;/h4&gt;
&lt;p&gt;&lt;img alt=&quot;the same grey bubbles as before but now slightly rotated, so that the F is directly at the top&quot; src=&quot;/images/2024-09-29/2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That resulted in the exact code I copy pasted to my website, along with another 1179 word (no joke) essay about the ONE line of code it changed that I left unread.&lt;/p&gt;

&lt;h2 id=&quot;towelling-off&quot;&gt;Towelling off&lt;/h2&gt;
&lt;p&gt;I know this blog post has the vibe of an excessively proud mother whose dog just did its first  poo away from the expensive rug, and tbh it isn’t far from that. The bar was very low. I expected this to be a shit show, and it wasn’t, and I got so excited about this fairly basic task a very large (and probably expensively trained) model completed. I’m not &lt;em&gt;really&lt;/em&gt; worried it’s showing signs to replace me, but I &lt;em&gt;am&lt;/em&gt; hoping it can help with some of the tedium programming requires.&lt;/p&gt;

&lt;p&gt;Can’t wait to return to reality and regret this blog post in 2 months when the rest of the AI bots overthrow the US election and continue teaching the children to put Elmer’s glue on pizza.&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Hallucinating with art models</title>
   <link href="https://meowni.ca/posts/hallucinations/"/>
   <updated>2022-09-01T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/hallucinations</id>
   <content type="html">&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;/css/floatie-bits.css&quot; /&gt;

&lt;style&gt;
.floatie-bit img {
  object-fit:cover;
  transition: transform 0.3s ease-in-out;
  cursor: zoom-in}
.floatie-bit img:hover{
  transform: scale(1.5);
  z-index: 1000;
}
@media (max-width: 700px) {
.floatie-bit &gt; img {
    margin-top: 0;
    margin-bottom: 24px;
    width: 100%;
}  
}
&lt;/style&gt;

&lt;p&gt;Wow, long time, no posts! Anyway, about them text-to-art generative models going about, eh? Surprising nobody: I am extremely into them. I’ve been using &lt;a href=&quot;https://openai.com/dall-e-2/&quot;&gt;DALL-E&lt;/a&gt; and &lt;a href=&quot;https://www.midjourney.com/home/&quot;&gt;MidJourney&lt;/a&gt; since they came out, and even though tons has been written about them, I wanted to give a slightly different overview: the perspective of someone who isn’t interested that much in their realism skills.&lt;/p&gt;

&lt;p&gt;I think that the most compelling place for ML models in an artist’s life is as a tool that specifically &lt;strong&gt;enables&lt;/strong&gt;, and doesn’t &lt;strong&gt;replace&lt;/strong&gt;, creativity. Machine Learning is amazing at doing something very specific, lots of times, really fast. It’s great at telling me if an image is a cat or a dog. It’s also great at generating one hundred half-dog-half-cats, in different positions, so that I can bypass the dozens of hours I would spend sketching out half-dog-half-cats for a painting that’s &lt;em&gt;actually&lt;/em&gt; about the nuclear apocalypse.&lt;/p&gt;

&lt;p&gt;I’ve seen a lot of examples of which model is best at painting “The otter with the pearl earring”, but I haven’t seen a lot of comparisons of these models in terms of their potential for creativity– likely because “creativity” is not really quantifiable. I wanted to do this for myself, if anything so that I can figure out how to use my money and credits better, but thought that I might as well put it out there in case anyone else was curious.&lt;/p&gt;

&lt;p&gt;This post ended up being looooong, so here’s a Table of Contents:&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#boring-uses-of-interesting-models&quot; id=&quot;markdown-toc-boring-uses-of-interesting-models&quot;&gt;Boring uses of interesting models&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-barely-scientific-method&quot; id=&quot;markdown-toc-the-barely-scientific-method&quot;&gt;The (barely scientific) method&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#models&quot; id=&quot;markdown-toc-models&quot;&gt;Models&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cherry-picking-outputs&quot; id=&quot;markdown-toc-cherry-picking-outputs&quot;&gt;Cherry-picking outputs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-i-look-for&quot; id=&quot;markdown-toc-what-i-look-for&quot;&gt;What I look for&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#results&quot; id=&quot;markdown-toc-results&quot;&gt;Results&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-linocut-print-of-a-girl-bundled-up-in-bed-with-a-stack-of-books-and-a-cat&quot; id=&quot;markdown-toc-1-linocut-print-of-a-girl-bundled-up-in-bed-with-a-stack-of-books-and-a-cat&quot;&gt;1. “Linocut print of a girl bundled up in bed with a stack of books and a cat”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-lithograph-of-an-orchid-where-each-flower-has-a-small-skull-inside&quot; id=&quot;markdown-toc-2-lithograph-of-an-orchid-where-each-flower-has-a-small-skull-inside&quot;&gt;2. “Lithograph of an orchid where each flower has a small skull inside”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-erik-johansson-photograph-of-a-womansic-hair-that-is-a-literal-bee-hive&quot; id=&quot;markdown-toc-3-erik-johansson-photograph-of-a-womansic-hair-that-is-a-literal-bee-hive&quot;&gt;3. “Erik Johansson photograph of a woman[sic] hair that is a literal bee hive”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-a-toucan-wearing-a-60s-apron-sitting-on-a-mid-century-modern-armchair-talking-on-a-rotary-phone-retrofuturism&quot; id=&quot;markdown-toc-4-a-toucan-wearing-a-60s-apron-sitting-on-a-mid-century-modern-armchair-talking-on-a-rotary-phone-retrofuturism&quot;&gt;4. “A toucan wearing a 60s apron, sitting on a mid century modern armchair, talking on a rotary phone, retrofuturism”&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-have-i-learned&quot; id=&quot;markdown-toc-what-have-i-learned&quot;&gt;What have I learned?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;boring-uses-of-interesting-models&quot;&gt;Boring uses of interesting models&lt;/h2&gt;
&lt;p&gt;I use these new models for a very specific thing, and that is as a brainstorming partner/collaborator. This shouldn’t surprise you: I’ve been going off on using ML for co-creation since the days of working on &lt;a href=&quot;https://magenta.tensorflow.org/&quot;&gt;Magenta&lt;/a&gt;, which was the project that forged my views on the topic (shoutout to the smarter-than-me people on the team that let me absorb their well articulated opinions).&lt;/p&gt;

&lt;p&gt;I tend to find DALL-E generations like “dogs playing poker” or “Donald Trump but as a cheeseburger” impressive, but kind of boring: yes, the output is funny, but no, I don’t fall asleep thinking about the deep meaning of an orange cheeseburger with a balding head and very small hands. As an artist who is trying to carve a place for myself in the art world (and for these models in my art), I want them to be my co-creators, my partners in crime, but not take over and compromise my style. I want us to brainstorm together, come up with ideas, and then (in most cases), mold this draft into something that I can look at and say “yeah, that looks like something I made”.&lt;/p&gt;

&lt;p&gt;This is consistent with how I look at the use of music models like the &lt;a href=&quot;https://magenta.github.io/listen-to-transformer/#a1_50693.mid&quot;&gt;Music Transformer&lt;/a&gt;: absolutely impressive compositions, best suited for an elevator. This isn’t the fault of the model, nor its users, and I am truly not shitting on these outputs (unless they’re for NFTs; always here to shit on NFTs 🙃): I think both background music and memes have a value in society, as do procedural TV shows (they’re filming new Criminal Minds!!!), computer generated or not. But personally, as an artist, I feel fairly emotionally detached from them, as I’m pretty sure their authors do.&lt;/p&gt;

&lt;p&gt;The exact same models, when used in a thoughtful and creative way lead to absolutely brilliant things; the ones that make you say “fuck, I wish &lt;strong&gt;I&lt;/strong&gt; had thought of that”. Yacht’s &lt;a href=&quot;https://www.wired.com/story/how-yacht-used-machine-learning-to-create-their-new-album/?bxid=5cec28c424c17c4c6463a7e9&quot;&gt;album&lt;/a&gt; made with hard creative rules and machine learning is a wonderful example, as is Karen X. Cheng’s use of DALL-E to imagine the scene &lt;a href=&quot;https://twitter.com/karenxcheng/status/1552720889489154048?s=20&amp;amp;t=62SQKCGZANvOlSjOjYMTig&quot;&gt;beyond Girl with a Pearl Earring&lt;/a&gt;. This is the bit that I care about.&lt;/p&gt;

&lt;p&gt;I’ve been trying to post updates about how I personally use these models on my &lt;a href=&quot;https://www.instagram.com/meownica.studio/&quot;&gt;artstagram&lt;/a&gt; (often with a commentary about the process), but as a recent craft fair that just rejected me had to say: I’m quite shit at the socials. Have this blog post instead?&lt;/p&gt;

&lt;h2 id=&quot;the-barely-scientific-method&quot;&gt;The (barely scientific) method&lt;/h2&gt;

&lt;h3 id=&quot;models&quot;&gt;Models&lt;/h3&gt;
&lt;p&gt;I used the 4 models I have access to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://openai.com/dall-e-2/&quot;&gt;DALL-E&lt;/a&gt;, via the OpenAI website&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/stable_diffusion.ipynb&quot;&gt;Stable Diffusion&lt;/a&gt;, via the collab&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.midjourney.com/home/&quot;&gt;MidJourney&lt;/a&gt;, via their Discord bot&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://huggingface.co/spaces/dalle-mini/dalle-mini&quot;&gt;DALL-E mini&lt;/a&gt;, via the HuggingFace interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I tried to get a Googler to help me run the prompts on &lt;a href=&quot;https://imagen.research.google/&quot;&gt;Imagen&lt;/a&gt;, but I got no bites, so I have no idea how it fits into this story.&lt;/p&gt;

&lt;h3 id=&quot;cherry-picking-outputs&quot;&gt;Cherry-picking outputs&lt;/h3&gt;
&lt;p&gt;I cherry-picked 4 images for each model as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;DALL-E: Because using it costs real moneydollars these days, I decided to backfit this experiment to  prompts I’ve already saved several images for (crucially: this means that I thought the prompt gave interesting enough results for me to care; this is 100% not true of every prompt I try). I also ran each prompt one more time to generate 4 more outputs, and then picked the best 3 out of those. The top left result is always the one I liked the most.&lt;/li&gt;
  &lt;li&gt;Stable Diffusion: cherry picked 4 results out of about 9.&lt;/li&gt;
  &lt;li&gt;MidJourney: I ran each prompt twice (getting 8 outputs in total), and then I picked the best 4. I didn’t try any parameters or tricks other than just using the prompt itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I tried to be as honest as possible with the results I’m showing, because I don’t have a dog in this race. I just want something useful &lt;em&gt;for me&lt;/em&gt;, wherever it comes from. You can zoom over the results to see them slightly bigger.&lt;/p&gt;

&lt;h3 id=&quot;what-i-look-for&quot;&gt;What I look for&lt;/h3&gt;
&lt;p&gt;The prompts I used are for stuff I am actively working on, so they’re a bit weird, slightly personal, and in some cases, oddly disturbing. Please don’t steal the prompts or the outputs from me; I can’t stop you (such is life on the internet), but it will break my heart.&lt;/p&gt;

&lt;p&gt;I’ll have some more details for each prompt, and how I picked “the most interesting to me”, but the two big rubrics I looked for were:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Did this model interpret the prompt?&lt;/li&gt;
  &lt;li&gt;Would I use one of the model’s generations “in an art” (this is very wishy-washy and not scientific; trust me, I get that)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Keep in mind that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I understand that in some cases if I spent more time working on the prompt, I might get better results. The way I work is that I don’t try to force things into existing – if they don’t work out, I shelve them for a better time.&lt;/li&gt;
  &lt;li&gt;Some results are really weird and unsettling, and they’ve made me dislike my prompt. This isn’t the models’ faults, or their authors, nor do I have “bad feels” towards the models; it just means I’ve
accidentally created an uncanny valley and I need to back away from it until I have a better idea of what I actually want from a model. Or maybe not use bees ever again.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;
&lt;p&gt;I picked 4 prompts, each of which covering a different area I am interested in:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;An easy to imagine concept that exists in real life (can it execute?)&lt;/li&gt;
  &lt;li&gt;An easy to imagine concept that &lt;strong&gt;doesn’t&lt;/strong&gt; exist in real life (can it imagine?)&lt;/li&gt;
  &lt;li&gt;A hard to imagine concept that &lt;strong&gt;doesn’t&lt;/strong&gt; exist in real life but makes sense linguistically (can it hallucinate a surrealism?)&lt;/li&gt;
  &lt;li&gt;Multiple concepts that exist in real life, glued together in a way that doesn’t make sense linguistically nor does it exist it real life (can it be weird?)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I apologize in advance for #3 – it’s a bad place – and for the alt text on these images. Summarizing robot art is harder than I thought.&lt;/p&gt;

&lt;h3 id=&quot;1-linocut-print-of-a-girl-bundled-up-in-bed-with-a-stack-of-books-and-a-cat&quot;&gt;1. “Linocut print of a girl bundled up in bed with a stack of books and a cat”&lt;/h3&gt;
&lt;p&gt;What I am looking for: Something that I can actually carve into linoleum and make prints out of, so sharp lines that I don’t have to spend too much time cleaning up is ideal. The suprise winner in this category was Stable Diffusion who despite not interpreting the prompt correctly, came up with the most interesting results (in my opinion, etc)&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of 2x2 images each showing a black and white drawing of a woman in bed with a cat and a stack of books. each image is slightly different but the idea is the same&quot; src=&quot;/images/gen-models/1_dalle.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;DALL-E&lt;/b&gt;. Composition is great (100% gets the prompt), but completely misses the mark on &quot;linocut&quot;. I tried to work this into a useable drawing to carve, but because it uses fairly sketchy lines and fills, it ended up being way more work than I wanted.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of 2x2 images showing sharp and crisp lines of, in order: a woman with a scarf in a library, reading a stack of books. a angry looking cat surrounded by books. a yellow cat on a pink background, wrapped around a stack of books. a cat wearing a scarf next to a smaller cat on top of a stack of books. &quot; src=&quot;/images/gen-models/1_sd.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;Stable diffusion&lt;/b&gt;. Composition is pretty good but doesn&apos;t actually interpret the prompt well. The &quot;linocut&quot; part is really well done -- I find it amazing that the top left image actually has a signature and a title outside of the print! Despite not getting the point, the top right result is my dream come true and what I&apos;ll end up using.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of 2x2 images of simpler lines, in order: a woman with a blanket that looks a bit like a cat, with a background of books. an abstract looking cat head on top of a stack of books. sharp lines of a simplified cat head on top of a stack of books. a very abstract shape that is maybe a bed, in front of a background of books that are just white rectangles with thick outlines&quot; src=&quot;/images/gen-models/1_mj.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;MidJourney&lt;/b&gt;. Also kind of misses the prompt, and doesn&apos;t have as many details as the Stable Diffusion results. I really like the bottom left the most, but I don&apos;t think it screams &quot;cat with books&quot; enough for me to use.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of 2x2 images where if you try really really hard it maybe looks like a woman in bed, next to stacks of books&quot; src=&quot;/images/gen-models/1_mini.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;DALL-E mini&lt;/b&gt;. The results are kind of okay if you squint really hard, but not at all what I&apos;m looking for. I just got laser eyes; I&apos;m not about to go back to squinting.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;2-lithograph-of-an-orchid-where-each-flower-has-a-small-skull-inside&quot;&gt;2. “Lithograph of an orchid where each flower has a small skull inside”&lt;/h3&gt;
&lt;p&gt;What I am looking for: any semblance of an orchid not looking like an orchid. The “lithograph” part was a very loose requirement – I just wanted it to feel “pencilly” without looking like a child drew it, which is what DALL-E often does for “pencil drawing”. I spent a &lt;em&gt;lot&lt;/em&gt; of time on this prompt with DALL-E (including looking up the technical biology terms for “the bit inside an orchid flower”), and I never got anything at all correct. It wasn’t until this blog post when I went to other models that I regained hope! MidJourney, man!&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;4 images, where each image is a drawing of a skull in black pencil, with an orchid coming either out of an eye socket, or wrapped around the skull&quot; src=&quot;/images/gen-models/2_dalle.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;DALL-E&lt;/b&gt;. I remember I tried many combinations of writing &quot;a skull inside each flower&quot;, and
  all I could ever get out of DALL-E was an orchid next to, or coming out of, a skull. I get bored after about half an hour of failing at a prompt; I&apos;m sure there is a way to write this to get what I&apos;m looking for, but I didn&apos;t figure it out, and I lost interest.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;2 images of pink orchids on a different coloured background. an image of an illustration style of a skull with an orchid coming out of the middle of the skull. a vertically wrapped skull in front of the leaves of an orchid&quot; src=&quot;/images/gen-models/2_sd.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;Stable diffusion&lt;/b&gt;. This one struggled with the prompt too. The bottom two results are really
  pretty, and in particular prettier than the equivalent (and misunderstood) DALL-E results, but still not even in the ballpark of what I was looking for&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;oof, this is a hard one. 3 of the images looks like the outline or general shape of an orchid, but in the middle some of the details resemble a skull. the fourth is a skull, but instead of the eye sockets and mouth, the shapes look like the petals of an orchid&quot; src=&quot;/images/gen-models/2_mj.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;MidJourney&lt;/b&gt;. I mean, 10/10. These are the spooky orchid boys of my dreams! This prompt came up because I went to an orchid exhibition, and I thought so many of the little flowers looked like skulls or aliens. This was &lt;b&gt;exactly&lt;/b&gt; what I had in mind. &lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;4 fairly noisy aimages of an orchid next to a skull. the orchids all have leaves as well.&quot; src=&quot;/images/gen-models/2_mini.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;DALL-E mini&lt;/b&gt;. Suffers from the same prompt problems as the other models, which makes me think
  that whatever special tweaks MidJourney does to get &quot;creativity&quot; out of a prompt are absolutely
  working.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;3-erik-johansson-photograph-of-a-womansic-hair-that-is-a-literal-bee-hive&quot;&gt;3. “Erik Johansson photograph of a woman[sic] hair that is a literal bee hive”&lt;/h3&gt;
&lt;p&gt;I love surrealism. I was watching this 60s movie where a bunch of women had beehive hairdos, and this is how my brain operates: “wouldn’t it be interesting if”? I don’t know what I was expecting to get, but it wasn’t any of this (though as someone who understands how these models work, in retrospect I understand &lt;strong&gt;exactly&lt;/strong&gt; how we got here). I chose &lt;a href=&quot;https://www.erikjo.com/work&quot;&gt;Erik Johansson&lt;/a&gt; because surreal photography is his jam, and it helped stir DALL-E towards more of the right vibes at the time. Unfortunately, I got &lt;strong&gt;really&lt;/strong&gt; creeped out by most of the results (from all models tbh), and it’s really soured up this prompt for me.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;4 images of women&apos;s heads with either bees coming out of the hair, or the hair literally made out of bee cocoons. it&apos;s really unsettling&quot; src=&quot;/images/gen-models/3_dalle.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;DALL-E&lt;/b&gt;. The uncanny valley of literal bee hives turns out to be deep. The top left image one is the nicest, possibly because a) it doesn&apos;t have a face and b) it only has casual bees. It is maybe the closest to what I wanted (out of all the outputs), but it doesn&apos;t make me feel great looking at it. &lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;2 images of a very realistic woman, with a honeycomb or bee cocoons instead of hair. 1 image of a drawing of a woman with a body of honeycomb, next to a really big bee. one image of a closeup of a very realistic woman face that is staring aggresively, with just bees around it&quot; src=&quot;/images/gen-models/3_sd.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;Stable diffusion&lt;/b&gt;. The people. They look like people. I don&apos;t like it. I think the top right one is the least disturbing?&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;very illustrative, non realistic styles of a pretty woman&apos;s face, either wearing a scarf, or whose hair transitions gently into a small honeycomb&quot; src=&quot;/images/gen-models/3_mj.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;MidJourney&lt;/b&gt;. I find it incredibly fascinating that out of 8 images, they all have the same very specific style. Erik Johannson rarely uses people in his photography -- why is this very specific
  woman coming up? Also, I think the cutesy, not really photographic style really helps these outputs, tbh. &lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;4 very unsettling images, that are fairly blurry. you can see the vague shape of a woman&apos;s head (sometimes including her torso), and the hair warps into a really horrible and realistic honeycomb. it truly looks creepy&quot; src=&quot;/images/gen-models/3_mini.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;DALL-E mini&lt;/b&gt;. Poor model, this is the worst of the bunch, and I expected it. DALL-E mini
  isn&apos;t very good at realism; it gives very noisy people, or faces, and then shoves them through a potato. That, combined with (my bad) sheer
  creepiness of the prompt leads to a literal nightmare.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;I cannot apologize enough to these models for making them go through this. You at least could’ve scrolled past this section; they, the poor darlings, couldn’t.&lt;/p&gt;

&lt;h3 id=&quot;4-a-toucan-wearing-a-60s-apron-sitting-on-a-mid-century-modern-armchair-talking-on-a-rotary-phone-retrofuturism&quot;&gt;4. “A toucan wearing a 60s apron, sitting on a mid century modern armchair, talking on a rotary phone, retrofuturism”&lt;/h3&gt;
&lt;p&gt;And now, a palette cleanser. I had been doing some reading and learnt that DALL-E really likes commas and stacking up contexts, so that’s why this prompt is so detailed.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;4 images of a very realistic and colourful toucan, sitting on a variety of chairs, using a rotary phone. the images look like 3d sort of artwork&quot; src=&quot;/images/gen-models/4_dalle.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;DALL-E&lt;/b&gt;. I expected DALL-E to do well, and it did. The toucan on the phone is there, the 60s vibe is there, the apron is dubiously missing but we&apos;ll give it a pass. It&apos;s got the fuzziness of old,
  spacey, retrofuturism posters (though the prompt has absolutely no actual futurism in it)&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;4 flat illustration style images, of a toucan on a chair. on one there&apos;s a phone. on another the toucan is sitting in front of a typewriter. on another the toucan is sideways, drinking a glass of whiskey&quot; src=&quot;/images/gen-models/4_sd.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;Stable diffusion&lt;/b&gt;. This isn&apos;t bad either. The art style is a little flatter (what is retrofuturism even?), but it&apos;s toucans doing their thing, some better than others.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;4 very blobby illustrations of a toucan&apos;s head. the illustrations are rich in colour, with gradients, but the toucans themselves are very abstract looking, and don&apos;t have anything other than an equally abstract looking arm chair&quot; src=&quot;/images/gen-models/4_mj.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;MidJourney&lt;/b&gt;. If you&apos;ve ever played with MidJourney, this will strike you as having &quot;very MidJourney vibes&quot;. This grainy, round style I see often, and I quite like. However, while it captures the style really nicely, the prompt is sort of a wash past the toucan.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;two of the images have a toucan bird, sitting on very recognizabley 60s armchairs. the other two images have a human body with a toucan head; the body is wearing a colourful apron and is sitting in front of some 60s furniture. these last 2 images have more of a photograph or collage feel than of a drawing.&quot; src=&quot;/images/gen-models/4_mini.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;DALL-E mini&lt;/b&gt;. This is the first time I a) love this model the most and b) wish that it produced higher resolution images. Look at the aprons! Look at the furniture! In terms of concept, it&apos;s absolute perfection. In terms of execution, an absolute potato.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;what-have-i-learned&quot;&gt;What have I learned?&lt;/h2&gt;
&lt;p&gt;I think the most important thing I’ve learnt from this experiment is that in terms of what I’m looking for (interesting hallucinations and not realism), DALL-E isn’t the end-all, be-all of models, and nor is MidJourney. The two freely available models are quite alright in some cases, especially if you’re looking for fast and free brainstorming. I think the workflow that I will try out next is to workshop the prompt using StableDiffusion/DALL-E mini, and then take that to the big boi DALL-E herself, and see what I can go from there.&lt;/p&gt;

&lt;p&gt;In terms of model-specific lessons (knowing that it’s based on my weird experience with them, they’re not scientific and not necessarily applicable to what &lt;strong&gt;you&lt;/strong&gt; are working on, etc. Don’t come for me, basically):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MidJourney can be super creative, but can also fall into stylistic pits (see: the bees, the toucan)&lt;/li&gt;
  &lt;li&gt;It’s hard to get DALL-E out of a realism pit without a ton of effort (see: the skull orchids)&lt;/li&gt;
  &lt;li&gt;Stable Diffusion works surprisingly well for something I can run off a collab&lt;/li&gt;
  &lt;li&gt;I don’t have a gut feeling as to why, but pretty much everyone except for Stable Diffusion is confused by what a linocut is (this is only interesting to me, someone who works on linocuts)&lt;/li&gt;
  &lt;li&gt;DALL-E mini really understands what toucans want (JK)&lt;/li&gt;
  &lt;li&gt;I should maybe steer clear of bees.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/mrmrs_&quot;&gt;Adam&lt;/a&gt; for helping me rework the intro, and giving me a subtitle; I can’t believe I missed a Strangelove opp.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Doing the work</title>
   <link href="https://meowni.ca/posts/doing-the-work/"/>
   <updated>2021-11-18T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/doing-the-work</id>
   <content type="html">&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;/css/floatie-bits.css&quot; /&gt;

&lt;p&gt;(This is a post mostly about art but I swear there’s a moral in here for all you tech readers, or at least
a discounted therapy lesson.)&lt;/p&gt;

&lt;p&gt;As you may have noticed from these latest posts, at the beginning of this year I decided to “do more art”. This went really well for a couple of months: I was making new shit; I was pumped; I felt competent. Around September I stopped feeling competent and got hit with a smol existential crisis which, in retrospect, I’ve seen a million times in my engineering career. I was looking at all the artists I follow and respect and where they were in their art career and I freaked out because I was &lt;em&gt;nowhere&lt;/em&gt; near their level. They all seemed to have an art voice and a big following and know exactly the kind of art they wanted to do. I 100% did, and still do not. So naturally what I took from this was that I sucked and I should just quit making art.&lt;/p&gt;

&lt;p&gt;The problem with this kind of crisis is that it’s very much a “can’t see the forest from the trees” situation. The obvious response from someone on the outside would have been “Monica, stop. You’ve been literally doing this for 6 months and these people have been doing it for years. If you want to get to their level you have to just keep doing the work they did for all that time and you too will get there”. And thankfully, that’s &lt;strong&gt;exactly&lt;/strong&gt; what my friend &lt;a href=&quot;https://twitter.com/mrmrs_&quot;&gt;Adam&lt;/a&gt; said when I asked him to hold my feelings over zoom wine.&lt;/p&gt;

&lt;h2 id=&quot;productivity-is-a-fake-idea&quot;&gt;Productivity is a fake idea&lt;/h2&gt;
&lt;p&gt;Hilariously, this is also the advice I always give to the junior developers I’ve mentored in the past, but didn’t think of giving to myself. When you start in your career, or even when you start on a new team, you need to adjust your expectations of what being “productive” or “good” means, or else you’re going to have an emotionally bad time. Your team lead that has been working on that team for 3+ years will obviously know more about it than you. Your friend who’s been writing JavaScript for 10 years will most likely write JavaScript faster than you, if you’re new to it. Someone who runs marathons will run longer without dying than me, a person who runs out of breath going up a hill.&lt;/p&gt;

&lt;p&gt;These are only value judgements if they meet your priorities and expectations. Not being able to run a marathon does not make me a lesser artist (but it does make a lesser athlete, a metric I am blessedly not interested in pursuing). Not being able to write JavaScript makes me a worse engineer only if my expectation is to be a senior JavaScript engineer, but not if my expectation is to be a junior SQL engineer. This is why “being junior” isn’t a value judgement – you can be a fantastic and overachieving junior engineer, but still a junior because you’ve been only doing it for 3 weeks.&lt;/p&gt;

&lt;p&gt;So what I was feeling wasn’t actually “I am shit and I should quit this” but “for my current priorities, I feel like a lesser artist because my expectations are much higher than my current technical abilities”.&lt;/p&gt;

&lt;p&gt;The way you get out of this rut is either by adjusting your expectations (“I don’t want to be a good at SQL so it’s fine I only know how to do a select *”, a thing I have said out loud before), or adjusting your experience (“in order to be a better runner I should start small with a couch to 5k program, and stick to it to get used to it”, a thing I have absolutely never said but immensely respect anyone who has).&lt;/p&gt;

&lt;h2 id=&quot;quality-vs-quantity&quot;&gt;Quality vs. quantity&lt;/h2&gt;
&lt;p&gt;Adam also told me &lt;a href=&quot;https://austinkleon.com/2020/12/10/quantity-leads-to-quality-the-origin-of-a-parable/&quot;&gt;an anecdote&lt;/a&gt; about a ceramics professor who told half of their class they’d be graded on the amount of work they produced, and the other half that they’d be graded on one thing they picked as “the best thing” they’ve made. Spoilers: at the end of the year, the people who were graded on quantity also produced ceramics that were of higher quality than the other group’s. Churning out work leads you to learn from mistakes, get better at things mechanically, so that you can focus more on the rest of the bits. Once you have the basic JavaScript syntax down and you don’t panic at writing a for-loop, you’re more confident that you are a programmer. Feels obvious right?&lt;/p&gt;

&lt;p&gt;Amazingly, it didn’t feel obvious to me last month, even though in 2018 I went through a &lt;strong&gt;very&lt;/strong&gt; similar existential crisis and “solved” it by churning out &lt;a href=&quot;/posts/inktober/&quot;&gt;a whole inktober project&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;now-do-the-work&quot;&gt;Now do the work&lt;/h2&gt;
&lt;p&gt;This is your sign that if you’re feeling equally down about a skill you expect, or want, to be better at, you should probably sit down and make a plan about how to level up. For me, it looked like this:&lt;/p&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of 3 columns, 4 rows, where each cell is shaded with something like vertical lines, a cross hatch, dots, squiggly lines, etc.&quot; src=&quot;/images/2021-11/plotter.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;Step 1&lt;/b&gt;. Improve the basics: get better at writing JavaScript that I can then use when I do make art; have a better set of basic utilities and examples. Look at all the ways I can now fill boxes, when before I could only fill them with solid colours or gradients!&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of 8x8 cells where each cell is filled with a random number of squiggly lines&quot; src=&quot;/images/2021-11/1.webp&quot; /&gt;
  &lt;p&gt;&lt;b&gt;Step 2&lt;/b&gt;. Keep churning things. I started with a fixed grid, and filled every cell with every new shading style I wrote, to see which look cool together.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a recursively subdivided grid, where each cell is filled with many parallel straight lines at 45 degrees&quot; src=&quot;/images/2021-11/2.webp&quot; /&gt;
  &lt;p&gt;What if the grid isn&apos;t even? Shout out to the grid og, Mondrian.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of 8x8 cells, where each cell is a quarter of a circle, in any of the 4 orientations, filled with a grid of dots&quot; src=&quot;/images/2021-11/3.webp&quot; /&gt;
  &lt;p&gt;What if the grid isn&apos;t of squares?&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a recursively subdivided grid where each cell is filled with a set of two or three either horizontal or vertical rectangles with squiggly outlines. this alt is very bad and i am sorry.&quot; src=&quot;/images/2021-11/4.webp&quot; /&gt;
  &lt;p&gt;What if each cell is a grid?&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;None of these are amazing, and I wouldn’t call any of them “art”, but it does mean that with minimal effort I went from this generative landscape on the left that I wasn’t particularly inspired by, to this one on the right that is looking like it might go somewhere. More on these landscapes when I finish &lt;strong&gt;step 3&lt;/strong&gt;: stick with a project until it is done, not until you get bored of it (because doing the work is never as exciting as starting something new).&lt;/p&gt;
&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a very abstract looking landscape of 5 overlapping mountain ranges and a big sky. they&apos;re all filled in solid colours.&quot; src=&quot;/images/2021-11/land1.webp&quot; /&gt;
  &lt;img alt=&quot;a similar landscape but each mountain range is filled by a grid of black dots of different densities.&quot; src=&quot;/images/2021-11/land2.webp&quot; /&gt;
&lt;/div&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>A HashiConf art collab</title>
   <link href="https://meowni.ca/posts/hashicollab/"/>
   <updated>2021-10-15T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/hashicollab</id>
   <content type="html">&lt;style&gt;
.floatie-bit {
  display: flex;
  flex-direction: row;
}
.floatie-bit &gt; p { margin: auto; padding-left: 24px;}
.floatie-bit &gt; img {
  width: 35%;
  flex-shrink: 0;
  vertical-align: middle;
  border-radius: 10px;
}
.floatie-bit &gt; .img-column {
  width: 30%;
  flex-shrink: 0;
  display: flex;
  flex-direction: column;
  margin-right: var(--spacing-s);
} 
.img-column img {
  width: 90%;
  vertical-align: middle;
  border-radius: 10px;
}

@media (max-width: 700px) {
  .floatie-bit {
    flex-direction: column-reverse;
  }
  .floatie-bit &gt; img {
    margin-top: 24px;
    width: 80%;
  }
  .floatie-bit &gt; p {
    padding-left: 0;
  }
  .floatie-bit &gt; .img-column {
    flex-direction: column;
    width: 100%;
    margin-top: var(--spacing-s);
    align-items: center;
  }
  .floatie-bit &gt; .img-column &gt; img {
    width: 80%;
    padding-top: var(--spacing-s);
  }
}
&lt;/style&gt;

&lt;p&gt;A couple of months ago my friend &lt;a href=&quot;https://twitter.com/janaboruta&quot;&gt;Jana&lt;/a&gt; helped organize &lt;a href=&quot;https://hashiconf.com/europe/&quot;&gt;HashiConf Europe&lt;/a&gt;, and asked me to work on generating custom artwork for each of their speakers. This was my first experience with creating art for someone else, and especially art that had to match someone else’s artistic guidelines. I’ve said this before, but I live and nap by the idea that rules (and editing) are at the core of the artistic process and not having to do that myself was &lt;span class=&quot;hilite&quot;&gt;brilliant&lt;/span&gt;. I wanted to write a bit about it because a) I did a bunch of work that I’m really proud of and I never got to talk about it and b) I am vain and I want to talk about it.&lt;/p&gt;

&lt;p&gt;This was the final poster:&lt;/p&gt;

&lt;div class=&quot;blockquote&quot;&gt;
&lt;img alt=&quot;a poster for a person named minnie mouse that consists of a grid of triangles and letters in the name, and then in the bottom part of the poster, the name minnie mouse in a big font, with a hashiconf europe footer&quot; src=&quot;/images/hashicollab/final_poster.webp&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;And this is what we wrote about it on the card that accompanied it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Enclosed you will find an art print made for you by generative artist and engineer Monica Dinculescu. &lt;br /&gt;&lt;br /&gt;
This individual print is unique to you and you alone, as Monica has incorporated your name, the title of your talk, and the color of the HashiCorp product that you are talking about at this year’s conference.&lt;br /&gt;&lt;br /&gt;
Each cell in the grid has been randomly generated to contain either a letter from your name, or a pattern in the product color. &lt;br /&gt;&lt;br /&gt;
Cells located towards the middle of the grid are more likely to contain a letter rather than a pattern, and this likelihood decreases in the cells towards the edges. &lt;br /&gt;&lt;br /&gt;
This print is the only iteration of its kind. Were it to be generated again, it would look slightly different each time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
I print everything in my &lt;a href=&quot;https://www.meownica.studio/&quot;&gt;art store&lt;/a&gt; myself, because I sell very limited editions and third-party printing companies only make sense financially when you’re printing in the several dozen. This does mean that sometimes I’ll fight with my printer thinking that its colour profile is whack, only to discover that it was Doing Just Fine™️ and my MacBook oversaturates things like it’s an Instagram filter in 2011. Every day is a school day.&lt;/p&gt;

&lt;p&gt;Here are all the prints drying on their totes profesh drying rack that is definitely not just a string I hung around in my office.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;a photo of a bunch of posters drying, each poster hanging off a string with a paper clip&quot; src=&quot;/images/hashicollab/drying.webp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, how did we get here?&lt;/p&gt;

&lt;h2 id=&quot;v1-i-have-no-idea-what-you-want&quot;&gt;v1: I have no idea what you want&lt;/h2&gt;
&lt;p&gt;The design team’s requirements were clear and wonderful:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;follow the conference guidelines: there is a set of product colours that can be used in very specific ways (either as a solid colour, a gradient, a grid of dots, hashed lines, and nothing else) and should be used to have a geometric grid feeling.&lt;/li&gt;
  &lt;li&gt;the art should be unique and somewhat meaningful to the speaker. Like, random shapes might look beautiful, but they have no immediate connection to the speaker or what they were talking about, and needing to explain it too hard takes away from the magic of someone making you your very own art.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
When I think of geometric posters, I (and everyone who’s ever looked at a design book) think of &lt;a href=&quot;https://mymodernmet.com/what-is-bauhaus-art-movement/&quot;&gt;Bauhaus&lt;/a&gt;, and that’s exactly where I started. Here’s some iterations from this round:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of randomly rotated quarter circles&quot; src=&quot;/images/hashicollab/v1_1.webp&quot; /&gt;
  &lt;p&gt;Too Partridge-Family: I started with a basic Bauhausy sort of grid, but we felt that it looked too much like a grid of birds. Not all was lost, though; you can see this in a different style on the home page now!
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of squares, some of which are subdivided recursively up to a depth of 3&quot; src=&quot;/images/hashicollab/v1_2.webp&quot; /&gt;
  &lt;p&gt;Extremely Mondrian-y, divided grid of squares. Really boring.
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of randomly rotated quarter circle arcs&quot; src=&quot;/images/hashicollab/v1_3.webp&quot; /&gt;
  &lt;p&gt;Random paths on a grid. These are called &lt;a href=&quot;https://en.wikipedia.org/wiki/Truchet_tiles&quot;&gt;Truchet tiles&lt;/a&gt;, and they&apos;re a pretty classic generative art approach. I thought this looked really cool by itself, but it didn’t have a ton of connection with the speaker so we scraped them early on.
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of random shapes (rectangles, squares, circles, lines) randomly positioned&quot; src=&quot;/images/hashicollab/v1_4.webp&quot; /&gt;
  &lt;p&gt;Random shapes in random places. Too generic, kinda boring.
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of mostly rectangles, a couple of lines and a triangle that are mostly positioned towards the top right corner&quot; src=&quot;/images/hashicollab/v1_5.webp&quot; /&gt;
  &lt;p&gt;Random shapes in random places but channeling &lt;a href=&quot;https://en.wikipedia.org/wiki/Suprematism&quot;&gt;Suprematism&lt;/a&gt;. I LOVE this style and I would LOVE to use it again, and I very well might.
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of squares and some letters positioned randomly, sometimes overlapped by one of the squares. nothing is readable.&quot; src=&quot;/images/hashicollab/v1_6.webp&quot; /&gt;
  &lt;p&gt;Grid of squares with some overlapped letters. This was one we liked because it had both a grid and the speaker&apos;s name, but it felt a bit too chaotic in this iteration. It honestly looks to me like I sneazed a bunch of letters on a grid.
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;At this point I also considered some data-based art, but I didn’t have enough interesting data that I could aggregate based on a name and an abstract alone. Anyway, did you notice how a lot of the iterations in this bunch are fairly standard generative-art approaches? Like, nothing here was novel, and I intended it that way: I wanted to figure out what the team had in mind, and the only way I knew how to do that was to use some common language we all knew, which is “things we’ve seen before”.&lt;/p&gt;

&lt;h2 id=&quot;v2-grids-of-letters&quot;&gt;v2: Grids of letters&lt;/h2&gt;
&lt;p&gt;What came out from the previous explorations was that they liked the letter grid the most, but not as it was. At this point I also learnt that a specific colour (like, blue) is associated with a particular product (in blue’s case that product is &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;) that a speaker is giving a talk about. Each of these products have a primary and a slightly lighter secondary colour, which is why below you’ll see I stopped mixing different product colours together.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of hatched squares or circles, some of which are subdivided recursively up to a depth of 3.sometimes there&apos;s a hatched circle that overlaps a subdivided cell&quot; src=&quot;/images/hashicollab/v2_6.webp&quot; /&gt;
  &lt;p&gt;Can we do something with that Mondrian-y grid, but make it less boring with textures? Answer: yes but not in a good way.
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a name in the center of the image overlapping randomly positioned rectangles and squares, which are hatched&quot; src=&quot;/images/hashicollab/v2_5.webp&quot; /&gt;
  &lt;p&gt;Can we do something with those random shapes in random places, but by also remembering the user has a name? Answer: no and let&apos;s never mention this horror again.
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of connected blobs, with some of the cells also containing a letter in the name&quot; src=&quot;/images/hashicollab/v2_3.webp&quot; /&gt;
  &lt;p&gt;Enough of that; let&apos;s go back to our friend, the grid. Truchet tile blobs with letters. I vetoed this before even sending it over because it was serving very solid 70s lava lamp vibes. At this point I also went a bit mad looking at just Jana&apos;s name, so I branched out to another team member.
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of squaares, with some of the cells being a letter in the name&quot; src=&quot;/images/hashicollab/v2_1.webp&quot; /&gt;
  &lt;p&gt;Grids of squares with letters. A bit boring, a bit &quot;not a fan of cutting off letters on principle&quot;. This image is really good at showing the letter distribution algorithm that all the grids are using: it&apos;s mostly centered around the center horizontal line, and then spreads out randomly outwards and downwards from there.
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of randomly rotated half circles, with some of the cells being a letter in the name&quot; src=&quot;/images/hashicollab/v2_2.webp&quot; /&gt;
  &lt;p&gt;Grids of Bauhaus-style quarter circles or letters. I kind of like this, but overall it still felt a bit too basic and too “classic Bauhaus”.
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a grid of triangles, with some of the cells being a letter in the name&quot; src=&quot;/images/hashicollab/v2_4.webp&quot; /&gt;
  &lt;p&gt;Grids of triangles or letters. This one looks kind of nice, doesn&apos;t it? We thought so too.
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;You’ll notice that all of these images are very similar looking. This was an extremely good sign for me because I knew we were on the right track, and in the cleaning up stage.&lt;/p&gt;

&lt;h2 id=&quot;v3-bring-it-home&quot;&gt;v3: Bring it home&lt;/h2&gt;
&lt;p&gt;We all loved the triangles the most, and in order to make them a bit 🌶 spicy, I decided to vary the texture of the triangle. Remember, I was allowed dots and hatches too! So in the final version, each triangle can be one of the 2 colours belonging to the product, either hashed or filled. Bish, bash, bosh.&lt;/p&gt;

&lt;p&gt;From here it was just a matter of designing the poster layout around it, and making sure I had a plan for when my random number pixel math wasn’t quuuuuuuite good enough. Thankfully, &lt;a href=&quot;https://github.com/dataarts/dat.gui&quot;&gt;dat.gui&lt;/a&gt; exists, and this is what I looked at while generating 50-ish posters:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;an image of a browser showing one of the randomly generated outputs (the one used in the final poster). to the right there is a control panel containing options such as font size, text offset, box offset, spread, draw text box, etc. the names don&apos;t make a ton of sense&quot; src=&quot;/images/hashicollab/browser.webp&quot; style=&quot;border: 2px solid #F6AFA7; padding: 0;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;would-i-do-this-again&quot;&gt;Would I do this again?&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;hilite&quot;&gt;Absolutely&lt;/span&gt;. I honestly loved every step of this. I worked with 3 amazing women from start to finish that had good instincts and were kind and supportive af. I got to think outside of a box I wouldn’t have normally found myself in. I tend to obsessively listen to a new album for 100 hours and I exclusively listened to Jessie Ware for this project (and then, ironically, never again).&lt;/p&gt;

&lt;p&gt;Most importantly, I made something that is in 46 humans’ hands. I hope they liked it!!!&lt;/p&gt;

&lt;p&gt;I would love to do this again, so if you’re a conference or a company that thinks this was a 
cool idea and want to do this for &lt;i&gt;your&lt;/i&gt; speakers or employees, &lt;a href=&quot;mailto:mdinculescu@gmail.com&quot;&gt;send me an email&lt;/a&gt; ! I’ve got way more ideas where this came from and nothing to do with them.&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Week 32: putting these on pause</title>
   <link href="https://meowni.ca/posts/week-32"/>
   <updated>2021-08-16T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-32</id>
   <content type="html">&lt;p&gt;It’s been  &lt;del&gt;one week since you looked at me&lt;/del&gt; 8 months since I’ve been writing these weekly notes, and
I think I’m going to take a small break from it. It’s been a good experiment, but I’ve been getting sloppy with remembering they’re due, and it’s starting to feel a bit self-indulgent. Because I don’t actually advertise that they exist, I don’t think anyone reads them, so I’m not entirely sure why I’m writing them if nobody on either side of the fence is particularly amused by the experience. I do have a blog post in the barrel which is a rare and momentuous occasion y’all can look forward to.&lt;/p&gt;

&lt;p&gt;xoxo,
monica&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Week 30: this little drummer girl</title>
   <link href="https://meowni.ca/posts/week-30"/>
   <updated>2021-07-26T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-30</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;On Monday Frances took me to the teamLab exhibition at the Asian Art museum. It was really wonderful! I hadn’t seen the one in Japan so I was new to it, but the interactive art nerd in me was all over the concept and trying to figure out what was static and what was interactive, and where the sensors were. Tons of fun!&lt;/li&gt;
  &lt;li&gt;On the weekend we went to the Gold Cup ⚽️ final in Vegas. This is important only because: the powers that be let me bring my own drum and I &lt;a href=&quot;https://twitter.com/AmericanOutlaws/status/1422234579436457986?s=20&quot;&gt;drummed for the whole 120 minutes&lt;/a&gt;. As I might have mentioned this has been a dream of mine, and I’m 100% that dream-believe-achieve bitch. I still need to improve a lot, and bless Ryan (who played the big boi drum next to me) who had to put up with me coming in sliiiightly too early a lot. Only up from here!&lt;/li&gt;
  &lt;li&gt;Looking at my calendar, a lot of my funemployment is spent levelling up. This will not shock anyone but: I kind of loved school. My first 2 years in uni I audited like 2 or 3 extra classes a semester, because I’d get all the bits I loved (going to class, learning things, taking notes), and none of the existential dread and panic attacks of being evaluated. So now that I’m an adult who gets to control how I learn things, I’m all over it. Here’s what’s currently on the docket:&lt;/li&gt;
  &lt;li&gt;Practicing drum rudiments on my snare drum. I should probably find a human to pay to help me with this, since I’m figuring it all out from YouTube and tbh, I have some questions.&lt;/li&gt;
  &lt;li&gt;Singing classes. I really enjoy singing in the car but I a) don’t like the sound of my voice and b) don’t actually like to produce loud sounds that draw attention to me, both of which make me not
want to sing along in front of people. A lot of singing is relearning how to breathe, and that is Extremely Weird.&lt;/li&gt;
  &lt;li&gt;Spanish on Duolingo. I used to speak it as a kid (I used to watch a lot of telenovelas, and I’m a bit of a language sponge), but I lost it since I never actually used it. I want to be able to speak to my friend’s Colombian family when we go to their wedding, so here I am.&lt;/li&gt;
  &lt;li&gt;Conversational French hangouts on italki. French and I have a super uncomfortable relationship where after 11 years in Montreal I understand and can read most of it, but I’m unable to speak it. It’s not that I don’t know what to say, it’s that I literally panic and refuse to say the words. I’ve had a lot of kind of traumatic experiences with a bunch of french (and quebecois) native speakers who were really hostile to people who speak French poorly, and it left me a bit terrified of even trying. I figured the best I can do to work on it is pay a complete stranger to talk to me – even if they think I’m shit, I won’t ever see them in person. I will be able to sleep at night just fine.&lt;/li&gt;
  &lt;li&gt;Books: I am struggling with Homegoing by Yaa Gyasi, because it’s a devastating book. It’s well written and I desperately want to finish, but I find myself dreading reading it; all the stories are about horrible things that people did to slaves and my heart just breaks on every page.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 29: I do some actual work for a change</title>
   <link href="https://meowni.ca/posts/week-29"/>
   <updated>2021-07-19T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-29</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;First off: I think I’ve done a bad numbering in some of these recent weeks, because I wanted to write about what I actually did on July 13/14, but apparently I’ve already counted that week? Counting, man, a hell of a thing.&lt;/li&gt;
  &lt;li&gt;My good friend &lt;a href=&quot;https://www.maeghansmulders.com/&quot;&gt;Maeghan&lt;/a&gt; who aside from being a top drawer human being and tswift fan is an amazing professional contact (and I don’t deserve her one bit), connected me
with the European Innovation Academy (&lt;a href=&quot;https://www.inacademy.eu/&quot;&gt;EIA&lt;/a&gt;) to do some technical mentoring for them. They run a pretty neat incubator-like program, where they teach university students how to get from startup idea to feature work, to sort-of implementing and finally pitching to VCs&lt;/li&gt;
  &lt;li&gt;I was a bit terrified of doing this because I think of myself as having no startup experience, but it turns out a lot of the things I learnt running small projects inside of Google really apply and I was kind of really good at it? I know, self confidence, who saw this coming.&lt;/li&gt;
  &lt;li&gt;Related: I’m trying to be a little less self-deprecating professionally. I deal with social anxiety by telling jokes and being wildly self-deprecating, but I’ve noticed when people just meet me and don’t know me at all, they don’t know I’m joking and I come off like an incompetent weirdo. This is a big change for me because I hate confrontation and being assertive, but I need people to know I am actually a badass. C’est la vie.&lt;/li&gt;
  &lt;li&gt;Observed anecdote: the teams that were predominantly women were on top of their shit and kicked ass. The teams that were predominantly men, OR had a very loud and uninformed men in charge were super behind and not doing super well. This makes sense because we know women are particularly good at organization and doing homework, but tragic because we also don’t have a ton of women leading startups.&lt;/li&gt;
  &lt;li&gt;We were in Tahoe for the week and my local friend Jessica somehow tricked me to go to 3 (THREE) days of yoga classes. Two of them were hot and disgusting, and one of them was aerial! What’s even more disgusting than the amount of sweating that I did is that I enjoyed them? Who am i.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 28: I did a vacation</title>
   <link href="https://meowni.ca/posts/week-28"/>
   <updated>2021-07-12T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-28</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;So here’s what happened: I went on vacation and because I’m leaning so hard into this funemployment life I didn’t open my laptop once.&lt;/li&gt;
  &lt;li&gt;Every year Zach and I go to his parents’ (now my in-laws! hah!) lake in Minnesota for the 4th of July. Normally we fly there, but last year we drove (because of the panderoni) and this year we also drove because you can’t fly with a big dog anymore. It’s kind of a bummer, and I hope airlines revisit this decision and find a middle ground that works both for the rest of the plane and people with nice but big dogs that don’t fit under seats (like …buying your dog their own seat. I’d be fine with that).&lt;/li&gt;
  &lt;li&gt;Anyway, this all to say: we drove for 3 days again from SF to Minnesota (and then 3 days back). This year was a bit easier because I (finally) got my US driver’s license so Zach didn’t have to drive 9 hour days by himself. Also we didn’t camp or stop for sightseeing because we’ve exhausted everything of note in the middle of America.&lt;/li&gt;
  &lt;li&gt;Related: Montana is enormous. I feel we drove an entire day through Montana and there was still some Montana left.&lt;/li&gt;
  &lt;li&gt;Having now driven SEVERAL hours on the highway: truck drivers are wild. Some started signalling and pulling in my passing lane as I was trying to pass &lt;em&gt;them&lt;/em&gt;; some do dick moves like drive parallel with another truck so nobody can pass them; almost none of them respect the 55 speed limit in construction zones. Rules? Who is she.&lt;/li&gt;
  &lt;li&gt;Something I should’ve predicted is that I emotionally implode with anxiety while driving thinking that the people behind me are judging me. Do they think I’m weak because I’m only driving the posted limit in this construction zone? Don’t they know fines double?? Should I be speeding? I know I’m driving a Tesla but I’m an old woman at heart who would love it if we could all just follow the rules, ok?&lt;/li&gt;
  &lt;li&gt;Both the dog and I had a great time at the lake. She spent all day in the lake swimming and playing with my 5 year old nephew; she also tried to play with the A, 3 year old, but their motor skills didn’t match well. A would try to throw a buoy for her, but she couldn’t throw it well, so Hopper thought this was actually an invitation to play tug and would accidentally hip check A, who would then trip, drop the buoy, get excited, pick up the buoy again and repeat this until bored. Hopper was exhausted every night and slept like a rock. I also slept like a rock because kids babysat my dog and unlike previous years I had zero work stress on my soul.&lt;/li&gt;
  &lt;li&gt;I read nonstop while sat in the sun with industrial amounts of sun screen on. I did my yearly penance of watching nightly baseball because it was on, saw the Habs make it and then lose the Stanley cup (it’s fine, I’m not heartbroken), watched (on purpose) the Euros and Wimbledon, ate a lot of cheese curds.&lt;/li&gt;
  &lt;li&gt;Books: Parable of the Sower (loved it, strangely apropos for 2020s fire and drought California), The invisible life of Addie Larue (TikTok made me read it, great beach read), Klara and the Sun (allegedly a sci-fi but not in like a Dune or aliens kind of way), Little Weirds (did not finish it; didn’t enjoy the writing style AND my book was badly bound making it a frustrating discovery). I’m now reading Homegoing which is shaping up to be great.&lt;/li&gt;
  &lt;li&gt;A weird thing that happened on the drive back is that I had a medium-bad allergy to (I think) peanut butter. I broke out in hives and now I need to either get that shit checked out or do another test at home with an epi-pen nearby because in general only bad things follow hives. Ugh.&lt;/li&gt;
  &lt;li&gt;Did y’all have a summer break? Was it good? Maybe tell me about it on Twitter?&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>I redesigned my site</title>
   <link href="https://meowni.ca/posts/redesign/"/>
   <updated>2021-06-24T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/redesign</id>
   <content type="html">&lt;p&gt;The last time I changed something big on my site was 3+ years ago. I was really into gradient rainbow text and IBM Plex Mono. It was a mild increment over whatever I had before, which was just a cleaned up and colourful version of &lt;a href=&quot;https://zachholman.com/left/&quot;&gt;Left&lt;/a&gt; from like 6 years prior. Anyway, what I’m saying is: this website had hella split ends. Here’s the before and after:&lt;/p&gt;

&lt;style&gt;
  .arrow {
    font-size: 40px;
    text-align: center;
    font-weight: bold;
  }
&lt;/style&gt;

&lt;div&gt;
  &lt;img alt=&quot;my old website. a column of text, with a navbar at the top, and rainbow h1 headers&quot; src=&quot;/images/redesign/before.jpg&quot; /&gt;
  &lt;div class=&quot;arrow&quot;&gt;↓&lt;/div&gt;
  &lt;img alt=&quot;my new website. the structure of the site is the same, but below the nav bar there are
  now 2 columns: the left one has a small blurb about me, the right one has a grid of colourful cells.&quot; src=&quot;/images/redesign/after.jpg&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;but-also-why&quot;&gt;But also, why?&lt;/h1&gt;
&lt;p&gt;I used to write a lot of blog posts, so my website was very blog focused. Originally the home page was just a listing of posts with some copy sprinkled in. As the pandemic hit, I started writing fewer and fewer posts, so having the one post of 2020 show up as a listing was ridiculous.&lt;/p&gt;

&lt;p&gt;On top of that, this year I started focusing a lot more on making generative art and I thought it was sad I wasn’t showing that anywhere on the site! The beauty of generative art is that you can just keep generating it over and over again, and my site was a long white column of text. No more!&lt;/p&gt;

&lt;h1 id=&quot;git-diff&quot;&gt;git diff&lt;/h1&gt;
&lt;p&gt;&lt;img alt=&quot;+1580 lines -23906 lines&quot; src=&quot;/images/redesign/diff.png&quot; /&gt;
Ok so hear me out, this looks bad and that’s because: it is bad. One cute thing my old site had was a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;emoji-rain&amp;gt;&lt;/code&gt; custom element. You pressed it and got a rain of emoji. Brilliant. The problem is that
I wrote that in like 2017, and used the well deceased v0 version of the web components spec. As a result, it had a gazillion dependencies (rip &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower_components&lt;/code&gt;) and polyfills and ancient trash. 23906 lines of trash to be exact. Gooood riddance.&lt;/p&gt;

&lt;p&gt;The added 1580 lines are a bit of a bore:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;100 of these are this post.&lt;/li&gt;
  &lt;li&gt;another 300 is the &lt;a href=&quot;https://css-tricks.com/new-site-html-ipsum/&quot;&gt;HTML Ipsum&lt;/a&gt; from CSS tricks because I’m always scared I’m going to break a style on some ancient post.&lt;/li&gt;
  &lt;li&gt;300 lines of JavaScript for the header art that I don’t minify because I’d like to be able to read this in the future to fix whatever mistakes past Monica made, and I don’t have a build step set up. I’m still using the Jekyll that comes out of the box with GitHub pages and I am never looking back.&lt;/li&gt;
  &lt;li&gt;the rest is actual code that I touched! There was some really horrifying markup on the project/talks/template pages and now it’s uhhhh slightly less so.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lighthouse&quot;&gt;Lighthouse?&lt;/h1&gt;
&lt;p&gt;&lt;img alt=&quot;lighthouse scores all green&quot; src=&quot;/images/redesign/lighthouse.png&quot; /&gt;
Seems fine. The 93 is because I’m running this on localhost, where I don’t have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https&lt;/code&gt;. I’ll double check 
it once after I deploy, but that 96 on performance is sitting fine with me given that I (again) don’t minify anything on this site.&lt;/p&gt;

&lt;p&gt;I still don’t have a service worker installed because last time I did it cached things into oblivion, and I make hella typos on my posts and it was a bad time. Who even reads this site? Why would you want it offline? You don’t.&lt;/p&gt;

&lt;h1 id=&quot;colours&quot;&gt;Colours&lt;/h1&gt;
&lt;p&gt;I tried &lt;a href=&quot;https://twitter.com/notwaldorf/status/1407102532992655361?s=20&quot;&gt;really hard&lt;/a&gt; to add some dreamy pastel blobs randomly in the page. As you can tell from the replies on that tweet, it went to the Bad Place. The thing that worked the most was “blurred spans positioned absolutely” which makes browsers and my soul cry. I also didn’t want to use images, because … I didn’t. Downloading bytes of background images? In this economy??&lt;/p&gt;

&lt;p&gt;With pastels out of the way, I went for the exact opposite: &lt;span class=&quot;hilite&quot;&gt;bright&lt;/span&gt; and 
&lt;span class=&quot;dotted&quot;&gt;patterned&lt;/span&gt;. I recently worked on a Bauhaus inspired project for HashiConf (which ended up in the end not looking very Bauhaus at all), so I had a bunch of unused code lying around. &lt;a href=&quot;https://en.wikipedia.org/wiki/Bauhaus&quot;&gt;Bauhaus&lt;/a&gt; aesthetics are all about grids and bold, simple colours – I don’t know if I did it justice, but I certainly tried.&lt;/p&gt;

&lt;p&gt;The blog and weaknotes pages are listings of links which I always struggle with and 2021 didn’t fix
that. If all the text is a link, and links are meant to be bright, then most of the page is a bright, unreadable scream of colours. So on these pages, the default href styles are gone, and I added some hatching on hover only. That way there’s splotches of colour, but they’re mostly out of the way.&lt;/p&gt;

&lt;h1 id=&quot;the-generative-art-bits&quot;&gt;The generative art bits&lt;/h1&gt;
&lt;p&gt;I experimented with a bunch of basic generative art algorithms for the pages, like animated &lt;a href=&quot;https://genekogan.com/code/p5js-perlin-noise/&quot;&gt;Perlin noise&lt;/a&gt; and grid-based randomness. In the end, I did a variation on a pretty standard &lt;a href=&quot;https://en.wikipedia.org/wiki/Truchet_tiles&quot;&gt;Truchet tile&lt;/a&gt; grid that you see a lot in beginner generative art tutorials: you have a grid of cells, and each cell can be one of the 4 orientations of a quarter-circle. After staring a bunch at these quarter circles, some started looking like objects: a tulip, a boat, a bird. I kept one of each and painted them in black, so that they pop out.&lt;/p&gt;

&lt;h2 id=&quot;an-accidental-p5js-mini-polyfill&quot;&gt;An accidental p5.js mini-polyfill&lt;/h2&gt;
&lt;p&gt;I do all of my generative art in &lt;a href=&quot;https://p5js.org/&quot;&gt;p5.js&lt;/a&gt; and &lt;a href=&quot;https://github.com/mattdesl/canvas-sketch&quot;&gt;canvas-sketch&lt;/a&gt; because I want to write the least amount of canvas code I can, and most of the time I do that offline and for printing on paper. In this case though this code would live on every single page, and p5.js comes in at a couple hundred kb, most of which I am not actually using. I am a lazy woman with a lot of napping to do; I don’t want to rewrite any of my already written p5.js code! So I ended up writing a &lt;a href=&quot;https://gist.github.com/notwaldorf/e63ea117011ac059a258776d65b6ffc3&quot;&gt;little small object&lt;/a&gt; that implements only the bits of the p5.js API I was using. Cute eh?&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;HALF_PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Assume a is an array.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fillStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;strokeStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;noFill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fillStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;noStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;strokeStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;restore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fillRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;strokeRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beginPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beginPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moveTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you get to write your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw&lt;/code&gt; functions in almost the same way you would in p5.js.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mySketch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// &quot;Instantiate&quot; our weird &quot;p5.js&quot; &quot;instance&quot; mode.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mySketch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Woof, you made it this far? Slow news day, eh?&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 25: I redid my website</title>
   <link href="https://meowni.ca/posts/week-25"/>
   <updated>2021-06-21T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-25</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;It’s true, I did. I also wrote &lt;a href=&quot;https://meowni.ca/posts/redesign/&quot;&gt;a blog post&lt;/a&gt; about it because
tbh I did a good job on it, and it’s a good read.&lt;/li&gt;
  &lt;li&gt;As two ladies of leisure, Frances and I went to the MOMA on a weekday to see the new Nam June Paik exhibition. I didn’t love all of it, but the bits I really enjoyed were all about putting TVs in unexpected situations. Which makes sense, since I really enjoy when surrealism is executed well. I loved &lt;a href=&quot;https://sfmoma-media-dev.s3.us-west-1.amazonaws.com/www-media/2021/01/06155432/02-Nam-June-Paik-TV-Garden-768x512.jpg&quot;&gt;the TV garden&lt;/a&gt; which was a dark room of real life plants with a bunch of old school CRTs showing … weird ass videos; &lt;a href=&quot;https://sfmoma-media-dev.s3.us-west-1.amazonaws.com/www-media/2021/01/16103830/14-Peter-Moore-Charlotte-Moorman-with-TV-Cello-and-TV-Eyeglasses-768x965.jpg&quot;&gt;the TV cello&lt;/a&gt; and &lt;a href=&quot;https://walker-col.imgix.net/wac_5538.tif?fm=jpg&amp;amp;w=1440&amp;amp;h=1050&amp;amp;fit=max&amp;amp;dpr=1.5&quot;&gt;TV bra&lt;/a&gt; which are exactly what they say they are, and a bunch of TV sculptures, like this &lt;a href=&quot;https://sfmoma-media-dev.s3.us-west-1.amazonaws.com/www-media/2021/01/13165445/16-Nam-June-Paik-Merce-Digital-768x940.jpg&quot;&gt;TV robot&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The museum still requires indoor masks, which I have nothing against but thought it was an interesting choice since most of SF has given up on indoor masks for the vaccinated and the whole point of museums is to like… not touch anything, people or art. Anyway, I bought a dope book from the gift shop about architectural form that (as I am writing this entry 3 weeks later) I have yet to open.&lt;/li&gt;
  &lt;li&gt;Speaking of architectural form, the MOMA has a bonkers layout and I can never find the stairway that goes in the direction I need. I always end up wandering aimlessly around like a chicken. I have nothing against wandering aimlessly through a museum, I just don’t like it to be in a quest for stairs.&lt;/li&gt;
  &lt;li&gt;I bought a Diana Instant camera!!! Suz was the one who bought one first and tweeted about it, and it reminded me about how when I was poor in uni and “into photography” I was all about plastic leaky cameras (like Holgas and Dianas) but they were mad expensive and I needed to spend my money on predominantly food and wine. But now they’re an afforable price for adult Monica AND they’ve made an instant version that works with the Instax film so you don’t have to wait for 3 weeks to see you took a tragically exposed photo. Suz and I are now having this paired adventure where we text each other bad photos and compare notes. It’s fun.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 24: vroom vroom</title>
   <link href="https://meowni.ca/posts/week-24"/>
   <updated>2021-06-14T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-24</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;Weird flex: been making cheese fondue for lunch because I make the rules here.&lt;/li&gt;
  &lt;li&gt;One of the (many) amazing things about being a Canadian living in California is that &lt;em&gt;this&lt;/em&gt; state (unlike, say, no-rules-nevada) doesn’t recognize non-US driving licenses. This means that after almost 20 years of 
getting my first driver’s license I had to do the whole circus show (written test, road test, 
being treated like a teenager, etc) to be able to drive here. This week I finally bit the bullet
and a) drove daily which is wild and b) did my road test (passed with flying colours, I know you’re
wondering). Side effect: I don’t have to use my Quebec license when I get IDed in bars and go through through the whole apology that my birthday is in fact in french. Bouncers love that.&lt;/li&gt;
  &lt;li&gt;Speaking of, I’ve misplaced my Quebec licence and that’s very irritating.&lt;/li&gt;
  &lt;li&gt;Euro 2020 is on! As per, my heart team is the Netherlands and they’re
doing surprisingly well! They’ve been #blessed with a pretty easy group (rip group F) and I am not 
looking that gift horse in the mouth.&lt;/li&gt;
  &lt;li&gt;It’s a month that ends in y so I’m trying to redo my site. Inspos: I really like how clean &lt;a href=&quot;https://thefox.is/about&quot;&gt;Karolina’s&lt;/a&gt; is; I’m low key of obsessed with this &lt;a href=&quot;http://yearinreview.creativedestructionlab.com/#&quot;&gt;absurd cursor&lt;/a&gt; from CDL.&lt;/li&gt;
  &lt;li&gt;There’s a bear in Tahoe that I’m 100% convinced is just trolling our dog. He spent a whole day casually
pacing up and down next to our house, which sends Hopper into a fit of barking hysteria.&lt;/li&gt;
  &lt;li&gt;Books: I finished Midnight Library and really didn’t like it, and Convenience Store Woman and it reminded me a lot of absurd theatre plays. I’m starting Klara and the Sun now.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 22: a week of sports</title>
   <link href="https://meowni.ca/posts/week-22"/>
   <updated>2021-05-31T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-22</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;Trying out titles because I have enough weeks that even I can’t tell them apart and I lived through them.&lt;/li&gt;
  &lt;li&gt;Sports!!! We went to the Nations League ⚽️ semis and finals in Denver. If you don’t know this about me, I am a bit of a football (soccer) hooligan. Zach and I go to games, we sit in suporter sections, we chant. We went to France for the Women’s World Cup, because sports is a great excuse to travel, and the US women’s team is rad af. On top of that, a weird goal of mine is to be one of the drummers doing the chant drum beats, so I was super happy I got to &lt;a href=&quot;https://www.instagram.com/p/CP9CDo_pBOw/&quot;&gt;drum a couple of chants&lt;/a&gt; at both games! I even got a gnarly workplace injury blister this time! I think the next big international game is in Vegas, and this might be the one where I try to bring my very own snare drum? Stay tuned.&lt;/li&gt;
  &lt;li&gt;Colorado in general has given up on masks for the fully vaccinated, which is still so very strange to me. I ate indoors. I walked into a store without a mask on. I hugged friends I haven’t seen in a year. I hugged new friends I met in a bar.&lt;/li&gt;
  &lt;li&gt;We had 2 free days in between the semis and the final, so we went to Boulder! I hadn’t been before and I LOVED it. It’s so cute and chill. I would definitely be happy living there for a couple of years.&lt;/li&gt;
  &lt;li&gt;Books: I finished The Lies of Locke Lamora. It was an enjoyable story of thievery and shenanigans. I’m reading Midnight Library now and I am a bit worried because Laura (with who I usually agree on books) said she thought it was badly written, and I am a bit of a writing snob (eg I genuinely loved the writing style of The Starless Sea and a lot of people find that book unbearable).&lt;/li&gt;
  &lt;li&gt;I have updated my LinkedIn for the first time in over a decade. What a weird place that site is.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 21</title>
   <link href="https://meowni.ca/posts/week-21"/>
   <updated>2021-05-25T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-21</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;Chopped off 10 inches of my hair and I feel unstoppable. I always &lt;em&gt;think&lt;/em&gt; I can deal with mermaid hair when the reality is I cba to brush it and it keeps getting longer and drier until I’m ready to take the kitchen scissors to it. I resisted that impulse and got a professional to cut it. Am I finally an adult?&lt;/li&gt;
  &lt;li&gt;I am writing this update FROM A PLANE. Yes, a real plane. My brother-in-law’s family is moving into a new house and we’re going to celebrate. Also I haven’t seen their kids in a year and a half, which is 50% of one of them’s lives. She talks now! What!&lt;/li&gt;
  &lt;li&gt;Update: the inner life of 3 year olds is outstanding. We are just guests in their world.&lt;/li&gt;
  &lt;li&gt;Books: I finished the Vanishing Half and it was Very Good. I mostly avoided reading it because it has the most 2020 book style cover I’ve ever seen, but it was quite good despite that. Some weeks back I also finished On earth We’re Briefly Gorgeous and it was a bit of a miss for me. I like everything it was about (love a good immigrant memoir) but I didn’t enjoy the writing, which made the actual reading time a bit of a slog. I’m now reading The Lies of Locke Lamora because TikTok told me about it.&lt;/li&gt;
  &lt;li&gt;Jake did &lt;a href=&quot;https://twitter.com/jaffathecake/status/1398519620764581888?s=20&quot;&gt;a lot of walking&lt;/a&gt; for cancer (he’s against). He walked 100km in a row, in something like over 24h. As part of it he also did an hourly ama (or at least until he became a delirious shell of a man), and Frances and I (henceforth known as the &lt;a href=&quot;https://twitter.com/jaffathecake/status/1398765439770107904?s=20&quot;&gt;chuckle sisters&lt;/a&gt;) covered 6 shifts. It was good fun and I’m enormously proud of him.&lt;/li&gt;
  &lt;li&gt;One of the best things about having a FitBit smart watch instead of an Apple one is that I can make my own faces really easily (in JavaScript!!!). I wanted something that looked very clean on the main screen but also had the option for a stats heavy second screen, and I could never find quite the right one so I made my own. Putting this work experience to good use!&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 20</title>
   <link href="https://meowni.ca/posts/week-20"/>
   <updated>2021-05-17T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-20</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;normalcy resumes chez nous. I know this isn’t true everywhere, so if you’re in a place of lockdown: I am sorry for how annoying these updates will be. I was a good girl and bunkered down for over a year, and now I’ve got antibodies in spades and taking advantage of it.&lt;/li&gt;
  &lt;li&gt;first trip of the after times: Monterey! I’d never been, because prior to last year we didn’t have a car, and renting a car for a 2 hour trip always felt daunting. However, now we have a car, and San Francisco is full of lovely things just a drive away.&lt;/li&gt;
  &lt;li&gt;aquarium is still on pandemic rules so I didn’t get to see any 🦦🦦🦦. Next time!&lt;/li&gt;
  &lt;li&gt;left Hopper at a dog boarding place for half a day so that we could have brunch in Carmel “without the kids”. First, paying for eggs I didn’t cook was an incredible experience and I almost cried (this is a theme this month, every time I do something that was pedestrian and normal in the before times I get overwhelmed with emotion). Second, Hopper a) fooled the humans into somehow trusting she’s not a vacuum cleaner and promptly ate another dog’s lunch and b) was a squirelly weirdo and mostly wanted to hang out around humans and not the other dogs, which is 60% her personality and 40% something she picked up in the apocalypse.&lt;/li&gt;
  &lt;li&gt;had an &lt;em&gt;indoor&lt;/em&gt; fancy dinner with fellow vaccinated friends, to celebrate our new superpowers, and the place had white Russian ice cream floats for desert and can I just say: yes.&lt;/li&gt;
  &lt;li&gt;EUROVISION. Incredible showings from Iceland and Ukraine, and an absolute shit bouquet when it came to voting. Collusion has been a Eurovision classic since the dawn of time, but this year it was enraging. France, really? Discount Edith Piaf? What a travesty. Special mention however to the international conspiracy of letting the UK go to the final only to award them 0 points across the board. A masterpiece; well done everyone.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 18</title>
   <link href="https://meowni.ca/posts/week-18"/>
   <updated>2021-05-03T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-18</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Ya look at that? It’s May already. My dog’s is turning 2 on the 14th, does anyone have any
good dog cake recipes or should I just give her an almost-empty jar of peanut butter with the same
success rate?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I got my second fouchie outchie! (#teampfizer). I wouldn’t say it bodied me the next day,
but I felt uncomfortable enough to sit in bed and read not one but TWO Bridgerton novels. I’ve 
now read 1-4 and I think I’m done for a while.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Speaking of books, I’m finishing up On Earth We’re Briefly Gorgeous (Ocean Vuong; reads like poetry
but isn’t. Review next time), and I’m about to start up The Vanishing Half (Brit Bennett; very 2021 book cover). I also finished a book in Romanian, translated from Russian: Zuleiha opens her eyes (Guzel Yakhina. Really beautiful, much more hopeful and uplifting than the Russian literature I’m used to.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After 15+ years of living in North America, I think I am “into” oatmeal. Oatmeal isn’t a Romanian thing
at all – oats are for horses, cream of wheat is for babies, adults don’t eat either. Current
approach: 1. overnight oats (in water, cashew milk makes them too…intense and I don’t give money
to the meat industry for cow milk) + either apple sauce (that I make because I keep forgetting to eat apples), or frozen fruit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Other food shit I’m obsessed with right now: ingesting industrial quantities of watermelon, these
&lt;a href=&quot;https://gimmedelicious.com/keto-peanut-butter-cookies/&quot;&gt;keto peanut butter cookies&lt;/a&gt; (I don’t eat keto,
but pb cookies with no-guilt-sugar are delicius), cashew milk.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Arts: I am deeply struggling with a 3 layer linocut. I’ve carved it like 3+ times, and no matter how I do it I can’t line up all the 3 layers well. I think it’s time to give up on it and make it into a digital print. Also, I’ve been working on L-systems, which make pretty trees. Should I write a blog post about that when it’s done?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>From JavaScript to paper: a linocut adventure</title>
   <link href="https://meowni.ca/posts/tree-rings/"/>
   <updated>2021-04-28T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/tree-rings</id>
   <content type="html">&lt;style&gt;
.floatie-bit {
  display: flex;
  flex-direction: row;
}
.floatie-bit &gt; p { margin: auto}
.floatie-bit &gt; img {
  width: 35%;
  flex-shrink: 0;
  vertical-align: middle;
  border-radius: 10px;
}
.floatie-bit &gt; .img-column {
  width: 30%;
  flex-shrink: 0;
  display: flex;
  flex-direction: column;
  margin-right: var(--spacing-s);
} 
.img-column img {
  width: 90%;
  vertical-align: middle;
  border-radius: 10px;
}

@media (max-width: 700px) {
  .floatie-bit {
    flex-direction: column-reverse;
  }
  .floatie-bit &gt; img {
    width: 80%;
  }
  .floatie-bit &gt; .img-column {
    flex-direction: column;
    width: 100%;
    margin-top: var(--spacing-s);
    align-items: center;
  }
  .floatie-bit &gt; .img-column &gt; img {
    width: 80%;
    padding-top: var(--spacing-s);
  }
}
&lt;/style&gt;

&lt;p&gt;One of my favourite kinds of art to make involves taking nature and seeing it as simple shapes. Buildings are cubes, flowers are circles, hills are curves. Shells are spirals. Tree rings are weird circle bois, and they are some of the best. I’ve wanted to make a generative art of a tree ring for a long time, but everything I made kept sucking (scroll to the bottom if you don’t believe me. Shit was bad bad). I finally made something I like, I thought it might be neat to write a little bit about The Process™️, since it involves both JavaScript and murderous little knives.&lt;/p&gt;

&lt;h1 id=&quot;lets-talk-trees&quot;&gt;Let’s talk trees&lt;/h1&gt;
&lt;p&gt;My friend &lt;a href=&quot;http://twitter.com/kneath&quot;&gt;Kyle&lt;/a&gt; has a ranch, and in the summer he lets his friends fulfill the burned out millenial dream of having no cell signal and sleeping in a tent. He has infinitely many trees, and sometimes he lets me do a craft with some of the trees he chops down. I’m “currently” (read: I started last year and I’ll probably finish in 2026) making a side table. I also made these coasters:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;a photo of a small section of a tree ring&quot; src=&quot;/images/treerings/coasters.webp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Trees are rad, yo. Young trees have very regular and evenly spaced rings because much like human children, they haven’t had a lot of life to live. However, as trees get older, they get jobs they don’t like, have to start making dinner every night, start having back pains from literally just being trees and their rings get wonkier. Here is what I’m making my table from:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;a photo of a bigger section of a tree ring&quot; src=&quot;/images//treerings/table.webp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Trees can grow unevenly because of droughts or insects or capitalism building shit where it shouldn’t. They get visible scars from forest fires. You can map the entire life of a tree (and tbh, of everything that was happening around the tree) by looking at its cross section. There’s something called a &lt;a href=&quot;https://oceanservice.noaa.gov/facts/ghost-forest.html&quot;&gt;ghost forest&lt;/a&gt; that indicates at some point, something happened (like an earthquake), which caused salt water to rise, killing all the trees that lived there. Here’s a photo (&lt;a href=&quot;https://www.thechiefnews.com/news/tree-rings-tell-physiology-of-drought-intolerance-from-fire-suppression/article_15bdab20-096d-11e9-a7d2-6b0dc38e5dc2.html&quot;&gt;ref&lt;/a&gt;) of a knotty tree (heh heh) that has fire scars:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;a photo of a section of a tree ring that is very elongated and has a lot of dark blobby spots, that are labelled with years.&quot; src=&quot;/images//treerings/fire.webp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So you know, if you want a tree ring, you can’t just draw some concentric circles and call it a day.&lt;/p&gt;

&lt;h1 id=&quot;generate-some-tree-rings&quot;&gt;Generate some tree rings&lt;/h1&gt;
&lt;p&gt;Montage time: the Rocky-runs-up-the-stairs song is playing in the background. I am 
hunched over a laptop because I have the posture of a pretzel and the willpower to change that of a golden retriever left alone with a burrito. I am furiously typing for-loops in an editor; my cat is trying to drink from my water glass even though there’s a perfectly nice pet bowl of water next to it. I save these files to my computer to document what I think is going to be a cool progression of generated art. It is, in fact, not.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;some close concentric circles, each with jagged edges&quot; src=&quot;/images//treerings/1.webp&quot; /&gt;
  &lt;p&gt;I drew some concentric circles and tried to call it a day. They looked stupid. The circles are kind
  of jaggedy because I didn&apos;t even try to use Perlin noise, that&apos;s how lazy I was. If you don&apos;t know about Perlin noise, &lt;a href=&quot;https://varun.ca/noise/&quot;&gt;Varun&apos;s article&lt;/a&gt; is 😘🤌 and fun.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;concentric rings of small strokes&quot; src=&quot;/images//treerings/2.webp&quot; /&gt;
  &lt;p&gt;I tried to throw away the circles and just paint their shapes with strokes. This certainly looks interesting, but it doesn&apos;t do tree rings justice. Don&apos;t worry: I&apos;ll end up using these painty-strokes in a different project.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;close concentric circles, some of which are overlapped by randomly positioned small strokes&quot; src=&quot;/images//treerings/3.webp&quot; /&gt;
  &lt;p&gt;&quot;What if you keep the rings AND the strokes but you randomize them more&quot;. 
  &lt;br /&gt;&lt;br /&gt;
  No.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;small concentric circles like in the first image, but with some black triangles&quot; src=&quot;/images//treerings/4.webp&quot; /&gt;
    &lt;p&gt;&quot;Maybe go back to the first circles and add some cracks. Maybe that&apos;s what&apos;s missing&quot;.
    &lt;br /&gt;&lt;br /&gt;
    Narrator: it was not. So this definitely looks like a tree ring! But it also 100% looks like a for-loop generated it and that is not a thing I&apos;m sticking my name on.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;smoother concentric circles, of different thicknesses and greyscale colours, with some black lines overlapping&quot; src=&quot;/images//treerings/5.webp&quot; /&gt;
  &lt;p&gt;&quot;Perlin noise. Didn&apos;t I say Perlin noise fixes everything? This will fix everything&quot;.
  &lt;br /&gt;&lt;br /&gt;
  Better, but it still looks like someone in CS-101 drew it, let&apos;s be honest.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;smoother concentric circles, of different thicknesses and greyscale colours, with some black lines overlapping. they are pretty regular towards the center, but much wobblier towards the outermost circle&quot; src=&quot;/images//treerings/6.webp&quot; /&gt;
  &lt;p&gt;Play with the noise parameter, making the outer rings noisier than the inner ones. Don&apos;t 
  play with it too much though or it will steer rapidly into drippy Dali clock territory.
  &lt;br /&gt;&lt;br /&gt;
  This was okay. The shape looked like a believable tree ring; it was just kind of...boring.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;This, dear reader, is where I realised this wasn’t going to end well, and here’s why: after all these
explorations I had a fairly good idea of what I wanted the tree ring to look like, but I didn’t
know how to say it in JavaScript. All of this is drawing pixels and curves in the html canvas, and that shit is hard. I have no idea how to start adding textures and stuff to it, and the point is:
I don’t want to learn. For me, that isn’t what generative art is about, that’s what traditional mediums are about.&lt;/p&gt;

&lt;h1 id=&quot;carve-em-up&quot;&gt;Carve ‘em up&lt;/h1&gt;
&lt;p&gt;In parallel, I also started making &lt;a href=&quot;https://en.wikipedia.org/wiki/Linocut&quot;&gt;linocuts&lt;/a&gt;. Linocuts are a lot like stamps – you carve the mirror image of what you want to see, usually into a piece of linoleum using a sharp v-shaped knife. With stamps you press the stamp into an ink pad; with linocuts you roll the ink onto the block, and press the paper onto the inked block to make the impression.&lt;/p&gt;

&lt;p&gt;For context, the scene is: March 2021, in the middle of the pandemic. I am bored senseless, and stabbing squishy rubber with a sharp knife sounds like a great way to spend a Saturday. Also, there’s something poetic about literally bleeding for your art because as
a very clumsy person you best believe I accidentally (and sadly more than once) jammed a knife in my thumb.&lt;/p&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;div class=&quot;img-column&quot;&gt;
   &lt;br /&gt;
    &lt;img alt=&quot;a printout of a wobbly set of tree rings&quot; src=&quot;/images//treerings/7.webp&quot; /&gt;
  &lt;/div&gt;
  &lt;p&gt;I started with this generated tree ring. I don&apos;t have the digital file anymore because this part went so poorly and made me so mad I probably threw it out after a tantrum. I drew some random lines to &quot;represent texture&quot; on the printout and went in with the misplaced attitude of &quot;I&apos;ll figure the rest when I carve it&quot;, because despite this never working for the last 35 years of my life, it&apos;s still something I insist on trying.&lt;/p&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;div class=&quot;img-column&quot;&gt;
    &lt;img alt=&quot;a really bad and messy print of alleged tree rings&quot; src=&quot;/images//treerings/8.webp&quot; /&gt;
    &lt;img alt=&quot;an even worse and messy print of alleged tree rings&quot; src=&quot;/images//treerings/9.webp&quot; /&gt;
  &lt;/div&gt;
  &lt;p&gt;
  The linocuts and the prints were a mess, and here are some samples. I can&apos;t stress this enough, linocutting is not a medium for improvisation. I tried this chaos approach THREE more times,
  as if time was going to help (it didn&apos;t). It was truly bad. I&apos;m only showing you this to make you feel better about whatever projects you have in progress and don&apos;t feel great about. &lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;div class=&quot;img-column&quot;&gt;
    &lt;img alt=&quot;a photo of a bigger section of a tree ring&quot; src=&quot;/images//treerings/11.webp&quot; /&gt;
    &lt;img alt=&quot;a photo of a bigger section of a tree ring&quot; src=&quot;/images//treerings/12.webp&quot; /&gt;
  &lt;/div&gt;
   &lt;p&gt;I finally took a step back and made a plan, like I should&apos;ve done in the first place. I imported 
   the generated tree ring in Procreate, drew a bunch of other lines and cracks on it until it looked right. 
   At this point it looks *very* different than what we started with, but the foundations are all there: the edges and rings have the same shapes, the cracks are mostly in the same places.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;What a ride, eh? I’m happy that I did all the generative explorations, because now I have a PILE of JavaScript
I can just pull up whenever I need to: noisy circles, paint strokes, blobby stroke lines. I am also happy that
I ended up finishing this as a linocut: it now feels like the human-for-loop collaboration of my dreams.&lt;/p&gt;

&lt;p&gt;I’ve put up these prints for sale in &lt;a href=&quot;https://www.meownica.studio/product/tree-rings&quot;&gt;my store&lt;/a&gt; – they are all hand printed by me, either using black ink on white deckle paper, or with gold ink on a black paper.&lt;/p&gt;
&lt;div class=&quot;floatie-bit&quot;&gt;
  &lt;img alt=&quot;a photo of a bigger section of a tree ring&quot; src=&quot;/images//treerings/final1.webp&quot; /&gt;
  &lt;br /&gt;
  &lt;img alt=&quot;a photo of a bigger section of a tree ring&quot; src=&quot;/images//treerings/final2.webp&quot; /&gt;
&lt;/div&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 17</title>
   <link href="https://meowni.ca/posts/week-17"/>
   <updated>2021-04-26T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-17</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve been skipping weeks because a) literally nothing happens and b) I don’t have a good
system to update these notes. They’re a markdown file on a GitHub repo, and I kind of 
need a computer to edit it, but I also kind of don’t open my computer that much these days?
I also keep forgetting which day is Monday. Room for improvement.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I wrote a &lt;a href=&quot;https://meowni.ca/posts/tree-rings/&quot;&gt;blog post&lt;/a&gt; about how I generated some
tree rings in JavaScript and then carved them as a linocut. It doesn’t actually contain any
JavaScript, but it does have a lot of pretty images.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The last normal thing I did before the panini started was go to Japantown and stock
up on apocalypse supplies (snackos, mucho ramen, milk tea powder, korean face things). 
The first normal thing I did with my 1 vaccine shot was go to Japantown and restock 
all the things. This wasn’t on purpose, but I am pleased with the serendipity. It is cherry blossom season, so it was very pretty, HOWEVER, some racist asshole vandalized two of the oldest cherry trees there in January. Literally chopped down all of the branches, one at a time. What the actual fuck.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you’re against plastic (why aren’t you?) and use deodorants, Dove has started selling &lt;a href=&quot;https://www.dove.com/us/en/deodorants/refillable-deodorant.html&quot;&gt;refillable&lt;/a&gt; ones. I got mine from Target. The refill itself 
still comes in plastic, but overall it’s far less plastic than the obnoxious amount the normal ones have. I’m excited about this not because this deodorant is particularly amazing, but because Dove is a HUGE brand, and 
having mainstream brands start looking into more reusable, less-plastic products is a small but exciting progress.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Speaking of waste, Zach bought &lt;s&gt;us&lt;/s&gt; me the most amazing thing: a &lt;a href=&quot;https://www.vitamix.com/us/en_us/shop/foodcycler-fc-50&quot;&gt;foodcycler&lt;/a&gt;!!! We’ve been composting for years, but I’ve recently started getting lazier about putting the compost back in the freezer when I’m done with it, so our idiot dog has been stealing a lot of compost (which is full of bad things for her like coffee grounds, onion peels, literally half a spaghetti squash rind she ate and threw up for 8 hours). This foodcycler thing takes the compost and dehydrates it and grinds it and in 4 hours is done and gives you back fertilizer at like a tenth of the original volume. We’ve had it for a week and it’s honestly THE MOST innovation I’ve seen in my kitchen.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 15</title>
   <link href="https://meowni.ca/posts/week-15"/>
   <updated>2021-04-12T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-15</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;First week of being funemployed! It was very weird. By Wednesday I had lost track of what 
day it was, and I kept thinking it was a Saturday. By Friday I was overwhelmed with capitalism
guilt and thinking that I HAD to do something to “stay productive”. What a fake idea y’all; it hadn’t
even been a full week of vacation!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I got vaccinated!!! I had no side effects other than a very sore arm, which is strange because
my immune system is the golden retriever of immune systems and doesn’t miss a free opportunity
to throw a fever on something.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Games update: Played “Cozy Grove” (comes on many platforms. I played it on my phone but 
it’s also on the switch. It’a cute Animal Crossing like island game with daily tasks), and “Dear Reader” 
(I played it on my iPhone. It’s a very cute literary game where you “read” a book by unscrambling
text puzzles in sentences. I’m super curious about how they summarize the book, because it feels very well done. I “read” Flatland like that, and you totally get the gist of the whole story while obviously
not reading the whole book. Pretty neat)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I was on a &lt;a href=&quot;https://theworkitem.com/blog/creativity-monica-dinculescu/&quot;&gt;podcast&lt;/a&gt;, and it was proper 
fun. Dan is a really nice and thoughtful interviewer. I was joking with him that I’ve been a bit 
traumatized by podcasts since this weird show I was on a while back about Web Components, where the
hosts wanted to just produce drama and stir shit; I think they even opened up with something like “this
could be the Jerry Springer of JavaScript” and I was like……am I the pregnant 16 year old without
a baby daddy in this story because I think I should be offended. Anyway. This podcast wasn’t anything
like that, and I thoroughly loved being on it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also my hair looked great.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I got to the Big Reveal on the Mentalist and I gotta say: it was very good. Unsual for a procedural show
to have like a very strong arc, but this was a thing that was 5 seasons in the making and it was great. Unfortunately this means I am reaching the end of this show and I don’t have a next procedural lined up!!!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dog has an ear infection and it’s incredibly gross. Golden Retrievers have a lot of ear.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I think the trick to “exercising” is just living in yoga pants and sports bras. I am 100% more likely to
exercise if I’m already dressed for it, because the thought of changing into yoga pants from whatever potato sack outfit I’m wearing just to go exercise seems daunting. Is this a life hack? Also, what is wrong with my brain that changing into different clothes seems like an unmeasurable amount of effort?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Actually don’t answer that.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 14</title>
   <link href="https://meowni.ca/posts/week-14"/>
   <updated>2021-04-05T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-14</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Let’s not bury the lede: I quit my job. After 8 years of working there, Google feels like a very different 
company than the one I joined, one that aligns less and less with my values, and it was time to move on.
It sucks, because my immediate team was a group of wonderful people who do great work; I will miss them,
and the work I did, greatly. I haven’t had a vacation longer than 2 weeks since I was 18-ish, because I worked every summer and was too much of a naive workaholic to think I should take more than 1 week between jobs, so I am giving myself 6 months before I start something new this time around. It’s stressful to not have a plan, and I am bad at relaxing, but I have full confidence I can learn to overachieve at this as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Didn’t I tell y’all I was worried SOMETHING was going to happen and I wasn’t going to get my vaccine? Here I am, 3 hours before my J+J stabbie stabby, reading about how my appointment is cancelled because it has an incredibly rare clotting side effect. One that is 10000 more rare than the usual clots women get threatened with for taking birth control and that absolutely nobody blinks an eye at anymore. This feels a lot like fabricated concern; we already don’t care about women getting blood clots. 1 in over 6 million? Fam, that’s better odds than getting in a car or not getting e-coli from Chipotle. Stop this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve become very bad at telling stories, which is 100% a result of the panini and not being forced to socialize with people. I’ve noticed several times in recent weeks where I’m telling a story and can see the life leaving from people’s eyes. I am bored of what I am saying as I am saying it. I am not ready to move to the midwest yet; I must fix this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/Danez_Smif/status/1381449712428060672?s=20&quot;&gt;This&lt;/a&gt; is a very good tweet. Abolish the police already. Stop giving guns to insecure people who think a uniform gives them the right to kill others because of the colour of their skin. Stop giving guns to incompetent people who apparently aren’t trained enough to tell the difference between a gun and a taser, but are confident they have a right to use either. Stop giving guns to people.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I am working on 2 linocuts. I should probably start working on more generative stuff, since JavaScript is my bread and butter and should somehow prove to my future employers I still got it. Or something. I am a deflated balloon after finding out my vaccine was cancelled and writing about yet another dead black man above so I don’t really know how to end this update on a good note.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Week 13</title>
   <link href="https://meowni.ca/posts/week-13"/>
   <updated>2021-03-29T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-13</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.nintendo.com/games/detail/calico-switch/&quot;&gt;Calico&lt;/a&gt; came out and I finished it in 2 days! It’s an adorably cute game about running a pet cafe in a fantastical little world. It’s honestly the kind of game I would make. It has an incredible cooking activity interaction, which I can only describe as “shit, this game engine has physics and collision detection, let’s use it for something!”. It’s great. (spoilers if you don’t want to play it: the interaction is “you turn into a smol person and throw the cooking ingredients that are now bigger than you at a giant bowl”. it’s wonderful.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I am now playing Fenyx Rising on the Switch because it looked like a Zelda Breath of the Wild clone and can confirm: it’s basically BOTW minus cooking plus quality of life improvements (swords don’t break! more looting and outfits!) and sassy greek gods. Don’t know how the Ubisoft lawyers managed to sweep that under the rug, but I for one welcome the 50+ hours of gameplay ahead of me.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I tried to make a Queen of Puddings desert because I saw it on celebrity bakeoff and like Dizzee Rascal (self proclaimed literal first time baker) managed to follow the recipe and do it so I felt overconfident. My custard didn’t set; I would’ve come last in the technical challenge. Also, it was WAY too sweet in my opinion, but at least that part wasn’t my fault.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I also made my own homemade kaya! I discovered kaya when I was in Singapore 2 years ago, and it was life changing. A kaya toast set is probably my favourite breakfast concept, and I missed having it since I ran out of the Ya Kun kaya I bought on that trip. Worry no more: I am back on that bullshit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I am doing a 2 week &lt;a href=&quot;https://www.chloeting.com/program/2020/two-weeks-shred-challenge.html&quot;&gt;Chloe Ting program&lt;/a&gt;, which means I have exercised every day this week. This is a huge record that I am very proud of, because I think exercising is the most boring and awful activity in the universe. I hated every minute of it, but by Sunday the minutes SEEM to at least pass faster? I dunno fam, it’s not great.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve started cross stitching while watching the Mentalist. It feels…oddly relaxing? I have no idea what I’m going to do with the result of cross stitching though, hang it in a bathroom somewhere? Is it too early to go down the pensioner aesthetic route?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The linocut print of generated-with-javascript tree ring is almost done! I’ve been making some test prints, and they’re cute! I think I’m going to write a blog post about the process because I am very happy with it!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I think summer is coming. Better get that SPF out.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 12</title>
   <link href="https://meowni.ca/posts/week-12"/>
   <updated>2021-03-22T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-12</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Trying something really revolutionary this week which is “doing nothing”. Bear with me here. I mean: listening to an audio book and NOT also cleaning the house. Just sitting, listening to that book and doing nothing. WASTING THAT TIME. In this economy??? Yes. Do I dislike the idea? Also yes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Related: I switched to the Samantha Irby (Wow, no thank you) audiobook because a) she narrates it and her voice is great and b) after 365+ days in the panini, a voice that isn’t my husband’s is a welcomed blessing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I shipped out 10 linocut prints and (hyperbole) it was the most stressful thing I’ve done. Hand prints
are beautiful because they’re so textured and imperfect and really truly awful because they’re so textured and imperfect. I basically printed 10 extras so I’d have something to pick from, and ended up hating all of them. I hope that’s just my brain, and the people who they went to end up liking them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;California is opening up vaccines to all humans after April 15, and I have a vaccine appointment for April 22. It’s been so long since this started that I’ve lost all hope. I assume something horrible will happen like they’ll change their minds or I’ll show up and they’ll be like ha ha no vaccines for legal aliens or people whose names start with the letter M or they’ll run out or I’ll sleep through the appointment or or or. Welcome to my brain, it is a literal prison.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All week I did many linocuts and no JavaScripts, so next week I’m making a rule to either only carve
generated things, or only generate things. In the carving pipeline: a generated bookcase, a generated tree ring. In the coding pipeline: a techno landscape (maybe???) for my friend Daniel, some posters for a conference my friend Jana is organizing. Neither of them read this and that’s for the best.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I &lt;a href=&quot;https://www.instagram.com/p/CMm6WeKHgVM/&quot;&gt;bought an art&lt;/a&gt; from an artist on Instagram! I don’t usually like very abstract art, but this one is so bright and happy and I think will look great in our very white-walls apartment. It’s coming from Malta, a country about which I know very little about (capital: Valetta, location: off the tip of the Italian boot, anything else: no)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Big week to be a boat, eh?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 11</title>
   <link href="https://meowni.ca/posts/week-11"/>
   <updated>2021-03-15T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-11</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It’s been another week of people being shit, innit? I know I should be 
used to this by now, but it never ceases to amaze me the capability people have for violence
and evil, and the capability the patriarchy has to excuse it. “Dude had a bad day”? For real real?
If that excuse has legs then you’d expect every uterus-holding person to do at LEAST a murder
per year. And yet it’s always white dudes who haven’t ever thrown up from cramps or had to deal with birth control hormones that feel they’re 
entitled to attention or sex or whatever and go on these racist murder sprees. And they’re 
going to continue to as long as the media excuses them as “bad days”, or gives them a platform by 
encouraging racism and xenophobia. If you’re a Fox news anchor who’s ever said the
words “china virus” in the last year…these murders are on you pal. I see you, and I deeply hope you don’t have a good night of sleep for the rest of your life.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I took all this anger and donated to Red Canary Song and also pointlessly stabbed linoleum with it. The goal is to carve things a computer generates, 
but at the moment that’s a bit too hard for me (I make the computer generate a lot of lines and uhhh that’s a lot of cutting), so I’ve been carving some non-generative stuff. They’re all a bit surrealist, because that is extremely my shit, but I don’t really know what to do with them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I also don’t understand my audience. For example, I made this &lt;a href=&quot;https://meownica.bigcartel.com/product/the-internet-and-plants&quot;&gt;computer plant&lt;/a&gt;. I thought it was meh, so I wasn’t gonna put it up in the store, but after tweeting about it, it ended up selling out in a nanosecond. I made this March Madness &lt;a href=&quot;https://meownica.bigcartel.com/product/basketball-buzzers-beets&quot;&gt;basketball beet&lt;/a&gt; that’s 
like…actually well carved and in two colours and cute and nobody cared. The same happened with the generative stuff – the &lt;a href=&quot;https://meownica.bigcartel.com/product/smoke-1&quot;&gt;chaos attractors&lt;/a&gt; I thought were deeply boring sold out instantly, the &lt;a href=&quot;https://meownica.bigcartel.com/product/flight-3&quot;&gt;wings in flight&lt;/a&gt; that 
I absolutely adore are a no-op. I don’t get it, y’all.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I am back on my procedural bullshit. &lt;a href=&quot;https://twitter.com/mrmrs_&quot;&gt;Adam&lt;/a&gt; has been telling me about
the Mentalist for months now, and holy shit: he was right. A++ procedural murders, be back in 7 seasons.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Every year I say I’m going to do a March Madness bracket where I ignore the chalk and just pick it on names and mascots, and every year I think the chalk knows best so I don’t and get busted on like day 1. I see you Oral Roberts toothpastes and Loyola wolf boys, I should’ve kept you going to the final 4 like I wanted to, eh?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Related: defensive fouls in basketball are absolutely bullshit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Zach and I are rewatching all of the Marvel movies in story chronological order. This means that I went on
several really productive 4 am YouTube holes of watching Avengers bloopers, every recorded interview with Robert Downey Jr, and that whole Ally McBeal season he was on. Imagine if I could put that kind of energy in watching videos about quantum mechanics or something. Instead, I can tell you that he met his wife when filming Gothika, that Tom Hiddleston couldn’t stop laughing during that one scene in Avengers 1 when Hulk smashes him into the Stark tower apartment floor, and that Mark Ruffalo is scared of needles so he doesn’t have the Avengers tattoo everyone else got. WHY AM I THIS WAY.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 10</title>
   <link href="https://meowni.ca/posts/week-10"/>
   <updated>2021-03-08T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-10</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I took the whole week off because I was very tired of life. It’s the year anniversary of the last
time the world was normal and it’s bringing me down. Between covid and immigration
delays it’s looking very 50/50 on whether I can attend my closest cousin’s wedding this fall in Romania,
and I’m beyond gutted at the thought of missing it. All I can do about it is wait, and that’s making the pandemic fatigue worse by a thousand.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I made two &lt;a href=&quot;https://meownica.studio/&quot;&gt;prints&lt;/a&gt; of Barnsley ferns. They looked cool
in the end, but they were a bit of a struggle. Barsnley ferns are these super popular fractals
that (spoilers) look like ferns, but honestly, fractals in general are not my favourite. These
ones come out of 4 equations and 6 parameters which sounds like would open a whole world of 
possibilities, but it turns out most combinations of values produce absolute trash. Which is fine,
but that’s not my style of generative art. Instead, I spent all my random numbers in trying to
paint the ferns like &lt;a href=&quot;https://www.meownica.studio/product/ferns-single-edition&quot;&gt;furry brush strokes&lt;/a&gt; and &lt;a href=&quot;https://www.meownica.studio/product/ode-to-barnsley-single-edition&quot;&gt;letters&lt;/a&gt; I don’t think anyone other than me appreciates that 😅.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I got deep into linocuts. I’ve been trying to figure out how to make the things that come out of a computer also come out of my hands, and hand prints can definitely be that thing. Doing the linocut itself is my favourite kind of relaxing; it keeps my hands busy with stabbing squishy things (also see: that time
i picked up felting in meetings). I can’t believe I haven’t tried it before. Also, Frances says that the linocuts I’ve been doing look a lot like the kind of carving I used to do with my pottery, which is great news because that means I have a *~style~*.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As usual, I am undeservedly lucky: one of my cousins, &lt;a href=&quot;https://ralu.ca/&quot;&gt;Raluca Iancu&lt;/a&gt; is an enormously
talented printmaker and professor of printmaking, so I got to text her with questions. I don’t think
everyone who starts up with a hobby can text a professional in that area and be like “hello I bought 10$
tools and some linoleum, please hold my feelings with your 10+ years of domain expertise”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Zach and I have been babysitting our friends’ smol puppy. Her name is Penny and she is SO CUTE. The cat
feels infinitely betrayed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I am reading “Wow, no thank you” by Samantha Irby because she is hilarious and hates people almost
as much as I do. I just finished season 4 of Below Deck and I think I need to take a break because
I got way too invested in the romantic life of Ben the chef.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I am looking for a chill, weekly “draw this” prompt from instagram. If you’re reading this and you
know one that you’ve used or you like, please let me know!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 8</title>
   <link href="https://meowni.ca/posts/week-8"/>
   <updated>2021-02-27T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-8</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This week was entirely consumed by the fact that I opened an &lt;a href=&quot;https://meownica.studio&quot;&gt;online store&lt;/a&gt; to sell generative “art” prints. Art is in quotations here because I have a deeply unhealthy relationship with calling anything I do art, or myself an artist, but we don’t have time to for a therapy session right now.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It went really great. I sold out of 2 kinds of prints! People who weren’t just my friends put it orders! My first customer ever was Mariko, which is absurd because she should’ve gotten a free print without even asking based on the kilograms of gacha she’s brought me from Japan, but of course she was also the first one to see the tweet about the store because that’s just the
kind of friend she is.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(this paragraph is really niche and boring, skip it). Every once in a while I use a software that blows my fucking mind. E-commerce is generally NOT this experience btw, because it’s all integrations that are 90% magic and 10% wonky af. Like, my store is a BigCartel store (big fan!), but the site itself is a bit flaky so sometimes Things Will Happen™ (like pages won’t redirect, the theme editor will just panic, javascript is a prison). Stripe was like 95% magic and 5% “the oauth flow didn’t redirect well For Reasons™ so I had to do it twice”. I don’t even know who was at fault there. Anyway, PirateShip is a thing that prints USPS labels and it was 120% magic. People wrote their addresses in their orders in my store; I clicked a single button on the PirateShip site, which imported those addresses, made shipping labels, made customs forms for the international orders, formatted all the labels for my label printer to print AND emailed all the customers their tracking numbers. And charged me 0 extra dollars. PirateShip, I don’t know how you make your money but you are an absolute gem and I love you. The post office gentleman even commented on how together my shit was.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Frances and I had a FitBit active minutes challenge and I WON by like 32 minutes (aka extremely close). Zach was also
in some Apple Fitness challenge with a friend, so we had several “can we walk to the dog park, I need the points” moments.
The dog had the best week.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I am trying to get as good at painting on my iPad as I am in real life (which honestly, is not bad. I am a good technical
artist, I’m just basic and derivative, ya know?). I took some skillshare classes, and I installed a paperfeel screen protector
thing that really helped. The shinyness is so offputting for drawing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I finished “Dept. of Speculation” by Jenny Offill. I really enjoyed it. I write book reviews on &lt;a href=&quot;https://www.goodreads.com/user/show/27136484-monica&quot;&gt;my goodreads&lt;/a&gt; if you’re looking for a book to read.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’m watching a lot of Below Deck (like, all the past seasons). I don’t know what this will do to my personality, but given that
it’s been almost a year of hanging out with pretty much just my pets and Zach, it probably won’t be an improvement.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spotted: a very fuzzy bee smelling the flowers (mostly Nasturtiums it turns out) from the bee-friendly seeds I planted 
last year. You know you love me, xoxo garden girl.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 7</title>
   <link href="https://meowni.ca/posts/week-7"/>
   <updated>2021-02-15T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-7</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I got deep into geocaching, friends. I found 3 caches in Arizona! I didn’t sign any of them
because I kept forgetting to bring a pen, so now nobody will know I was there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Geocaching is mad in the US. We drove back from Arizona (flying? in this economy??), and there were
HUNDREDS along the highway. First, who are these people that stop on the side of the highway to hide a cache? 
Second, who are these people who stop on the side of the highway to go look for a cache? Were you raised by
wolves? Highways are dangerous yo, don’t just stop on the shoulder unless your car is on fire.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I am filled with fury about cryptoart. FILLED. I follow someone on Instagram who has raised money for the 
national park service, and loves Joshua Tree, and a lot of her art is of nature, and she’s been minting like
3 NFTs a week. &lt;a href=&quot;https://joanielemercier.com/the-problem-of-cryptoart/&quot;&gt;Joanie Lemercier&lt;/a&gt; wrote how 10 seconds of
cryptoart used more energy than their studio in 2 years. TWO YEARS. Imagine being an artist that is
minting cryptoart in the same week that Texas residents are bankrupt because they couldn’t pay their
$17,000 heating bill in the winter because the Texas utilities companies are messed up and unregulated and
can fuck with prices when supply is low. FILLED WITH FURY.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Related: I think part of the problem is that we’re not making people build those absurd rigs to mine crypto
anymore.In uni one of my friends built one of those babies to mine doge at home, and he could heat up his
house in the winter from it! Now you just sign up for a service that mines in a data center and heats up the
desert somewhere.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also related: I 100% empathize with artists that selling art is hard and it’s impossible to make a living,
but as with everything, crypto isn’t gonna solve anything. Unless you have a weird perpetuity clause in your
NFT (is that a thing? I don’t know. I make it a point to know as little as possible about crypto because I already
have heartburn from regular life things and don’t need more), the only people making money from cryptoart are the people who
could already sell regular art for a shit ton of money. Otherwise nobody is going to pay any real money
for your anonymous neon animated block, crypto or not.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I tweeted about this AND I now wrote about it and I am still filled with fury. Sorry to the 2 people
who read these notes and also read this on Twitter. Nobody better email me about this; I cannot be convinced to not hate crypto, and I will just mute you with high prejudice and no guilt.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Honestly now that I am typing out these notes I’m also filled with fury about everything that’s
going on with Google and Research, so I don’t think I’ve done anything other than be angry all week. lol what 
a time to be alive.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the spare rage free seconds I’ve had left, I have been hard at work at getting meownica studio up and running. I have a special &lt;a href=&quot;https://www.instagram.com/meownica.studio/&quot;&gt;instagram&lt;/a&gt; account. I took the &lt;a href=&quot;https://www.meownica.studio/&quot;&gt;actual store&lt;/a&gt; out of maintenance mode. I enlisted my photographer friend &lt;a href=&quot;https://www.ashleybatz.com/&quot;&gt;Ashley&lt;/a&gt; (she is enormously talented, please hire her) to take photos so that I can update the store with real life product photos. This week is the week, I feel it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also &lt;a href=&quot;https://github.com/mattdesl/canvas-sketch&quot;&gt;canvas-sketch&lt;/a&gt; is dope and it does dope things (like use units that make sense)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 6</title>
   <link href="https://meowni.ca/posts/week-6"/>
   <updated>2021-02-08T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-6</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I skipped week 5 because all I did in the panna cotta was watch 3 seasons of
“how to get away with murder”. It’s a terrible show and I’m not ashamed of it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is up with that star codex thing? I can’t believe there was a cult of
assholes in tech I didn’t know about. I’m obviously not surprised they existed,
there’s an asshole under every rock in tech; I’m just surprised I didn’t know
about it. I’m a person in the know! I have an invite to Dispo!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I watched the #freebritney documentary and I think that a) the concept of a conservatorship for a grown ass 40 year old woman is fucked and b) her dad being
a mysoginistic asshole is 80% of the reason she’s on one. Nobody
put Kanye in a corner when he was going bonkers; we let him run for
president and bought his shitty 20 minute long album to make fun of it and talked about how he prolly needs to take his meds but oh well,
famous people amirite. But if a woman goes a bit bonkers and in the process
shaves her head (we all know women aren’t allowed to shave their heads), then suddenly she needs to be in a legal monetary prison for life? Rich people waste their
money ALL the time, why is she the different one? Makes you think.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I also think it’s the cherry on the cake that because her dad is “managing” her
estate she is essentially paying both for her lawyers to try to help her,
and for the opposing lawyers to try to screw her.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve been working on a lot of generative art. This is good, because I’m making
things and I want to open a store so people can put my things on their walls,
but bad because when I make art and keep looking at it I end up violently hating it, and that spirals out of control into a “everything I do is basic and derivative” mood which tbh makes me feel like shit. I had a nice chat with @mrmrs who is 100x more talented than me but feels similarly about his art sometimes, so I felt very seen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We drove to Arizona this weekend. We are still doing nothing but now it’s
nothing around cactuses and the desert. I’ve been trying to find ways to get myself
to move more, and I read in Alice’s notes that she tried out geocaching, so I installed an app last night! I thought there would be like a geocache per state, but there’s millions. There are 2 geocaches within a 2 mile walk! If there’s no week 7 notes it’s
either because nothing happened or because I died trying to get to this cache. The halting
problem is a hell of a thing.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Week 4</title>
   <link href="https://meowni.ca/posts/week-4"/>
   <updated>2021-01-25T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-4</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Tahoe (where we currently live during this pannie-d) got a ton of snow this week, so I’ve been in winter mode. Went skiing on Friday, went snowshoeing on Sunday. My calves are on fire. Skiing is pretty safe; everyone is wearing masks, they’ve closed all the
lodges, and tbh nobody should be within 6 feet of me skiing on a good day.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I can tell when I accidentally overdo it with the hobbies (which is every time I get excited about a new hobby) because I rapidly swing in the other
direction. I painted nothing this week, and I spent all weekend watching the entire season of Bling Empire in one day instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I knitted most of a
&lt;a href=&quot;https://www.ravelry.com/patterns/library/quick-ombre-hat&quot;&gt;hat&lt;/a&gt;
and then unravelled it all because it had accumulated too many mistakes. It’s a really fun
knit so I’m not too bothered.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I spent a lot of evenings frantically working on a visualization about plastic waste (new hobby alert) that nobody asked for. It started as “lemme do a quick thing to get better at d3 and
at asking questions about the data” and it’s now a good 8+ hours of work in. Sure wish I would’ve half assed it, because now it’s not done and I don’t really want to finish it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Still reading &lt;a href=&quot;https://gretchenmcculloch.com/book/&quot;&gt;“Because Internet”&lt;/a&gt;; also started
&lt;a href=&quot;https://www.amazon.com/Travelling-Cat-Chronicles-Hiro-Arikawa/dp/0451491335&quot;&gt;The Travelling Cat Chronicles&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I am really &lt;a href=&quot;https://twitter.com/notwaldorf/status/1354298108083990528?s=20&quot;&gt;irritated and confused&lt;/a&gt; by this Hangouts/Chat situation. I am on an iPhone, and
want to send &lt;a href=&quot;https://fberriman.com/&quot;&gt;Frances&lt;/a&gt; stupid links, hot takes and photos. We can’t use our respective
phone’s Messages app (because hers is over SMS which shits the bed on photos, and mine is Apple proprietary). We
were using Hangouts, but it’s deprecated, and wanted to use Chat, but it’s …
enterprise only and peons can’t start new conversations? Also Whatsapp is evil and
Signal spams all my contacts when I install it. What the fuck, I just want to talk
to non-Apple friends in 2021.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;February is a perfect calendar &lt;a href=&quot;https://twitter.com/standupmaths/status/1356212992669589504?s=20&quot;&gt;rectangle&lt;/a&gt; and that is satisfying.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are week notes the new LiveJournal but without comments? Discuss.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 3</title>
   <link href="https://meowni.ca/posts/week-3"/>
   <updated>2021-01-18T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-3</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Monday was off which ruined any routine I had formed. I barely got used
to waking up on Mondays to go to work and then bam, 2 weeks in, a Monday off. I had
dreams all week about working part time, probably because my brain is clinging
desperately to this hope of not having to ever wake up on Mondays.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I got 3 &lt;a href=&quot;https://twitter.com/notwaldorf/status/1351609102330327043?s=20&quot;&gt;aquatic snails&lt;/a&gt; in a small little aquarium. They live next to my laptop so I can look at
them during the boring meetings, and they don’t seem to have any worries. Tentative names: Shelly, Shelmet, Tickle me Shelmo. They’re super active around noon, and I’m learning that whatever number of
tentacles I thought a snail had, it’s incorrect. I am obsessed with them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We had an absolutely awful ER adventure with our dog. On Saturday night she was
really ill all of a sudden: she couldn’t stand without falling over,
couldn’t stop throwing up, and her nose was super hot (this is how you can
check if a dog has a fever!). Since she’s golden retriever and therefore a
trash vacuum, we were almost positive she ate a poisonous mushroom, or
some coffee beans or chocolate or something bad like that. Imagine our shock when
the ER did a tox screen and it came back positive for….MDMA. Best guess right now is
that someone at the airbnb next door (who hosts a lot of dubious frat boys)
threw something in our fenced-in yard. In any case,
dogs shouldn’t be on hard drugs, and she had a pretty rough rave of IV fluids and ice packs all night. Now I’m too freaked out to let her outside in the yard and have some empathy
towards the mothers who want to lock their childrens in the bedrooms and
never leave them out of their sight. What a shitty thing to do to a dog, man.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I am reading &lt;a href=&quot;https://gretchenmcculloch.com/book/&quot;&gt;“Because Internet”&lt;/a&gt; by my second favourite linguist, Gretchen McCulloch.
My favourite linguist is Jane Solomon; she also wrote a book, &lt;a href=&quot;https://www.amazon.com/Dictionary-Difficult-Words-perplexing-words/dp/1786038110&quot;&gt;“The Dictionary of Difficult Words”&lt;/a&gt;, and 7 year old me would’ve thought it was the absolutely best ever.
If you have a smart ass 7 year old, buy it for them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I see some progress in my watercolours. Do’s: layer blobs of colours, but only
after the previous one has completely dried. Dont’s: No aggressive blending or
gradients that aren’t just “this colour bled into this other one”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 2</title>
   <link href="https://meowni.ca/posts/week-2"/>
   <updated>2021-01-11T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-2</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Still into soups: I made a bomb cream of broccoli. I also bought a new
&lt;a href=&quot;https://www.orringtonfarms.com/product/orrington-farms-natural-vegan-chicken-flavored-base/&quot;&gt;vegan broth base&lt;/a&gt; to fuck with because buying the
cartons of broth is like buying bottled water aka: bad and wasteful.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My dog’s skin is turning grey. I know this sounds funny but it’s like, a thing. There could be a number of reasons for this, but the most likely one is that she’s an inbred dumbass and allergic to something in her food, like chicken. Or she could be dying. In any case, she’s now on Fancy Food™️ which makes her insufferable. Related: pet nutrition is absolutely bonkers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you’re trying to gauge what level of pandemic mental breakdown I’m at, I dyed
my hair pastel pink in the bathroom last week (Manic Panic blessing my life since 2001),
and this week I “rescued” a very sad looking croton from the grocery shop. I got
emotional that it was ugly and unloved and nobody else was going to care for it
because people only buy pretty plants, so I HAD to adopt it. I paid 3$ for this
privilege of bringing a plant with broken leaves into my house.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;New season of drag race! I know this will be very polarizing, but I kind of love
how insane Utica is. I also love Gottmik (and that Ru has finally pivoted to saying
“and may the best drag queen win”) and Tamisha. Still don’t understand the pork chop
gimmick, and I haven’t eaten a pork chop in like a year and a half so it makes me hungry.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I had some really good meetings at work with super creative and inspiring
people, and it’s spilling into my personal life: I have 2 (TWO) ideas
for generative art projects, and 0 (ZERO) motivation to actually do them. I also
haven’t finished the Bach Menuet I started last week. What do I do instead with my
evenings you ask? Watch every single Trixie Mattel video on YouTube because that’s the journey I’m on.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Week 1</title>
   <link href="https://meowni.ca/posts/week-1"/>
   <updated>2021-01-04T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/week-1</id>
   <content type="html">&lt;p&gt;I’ve been thinking for a while about setting this up, and this week seems
as good as any. Both &lt;a href=&quot;https://alicebartlett.co.uk/blog/weaknotes&quot;&gt;Alice&lt;/a&gt; and &lt;a href=&quot;https://fberriman.com/blog/&quot;&gt;Frances&lt;/a&gt;
have weekly updates that are a joy to read. &lt;a href=&quot;https://livelaugh.blog/about&quot;&gt;Jenn&lt;/a&gt; has a live laugh blog. Maybe this is the year of long form tweets?&lt;/p&gt;

&lt;p&gt;I haven’t touched my site in like 6+ months so when I tried to run jekyll locally
it obviously didn’t work, so what you’re reading took like 40 commits on GitHub.&lt;/p&gt;

&lt;p&gt;In work news, I’m coming back to Magenta after 6 months of being a fellow with the Trevor project. I lead a team that worked on classifying suicidal ideation for
one of their projects. The work was super interesting (though often sad), and in
a shocking development i really enjoyed being a team lead. I think that even though I’m
really good at writing actual code, I’m also good at herding cats and holding
a lot of statuses and details in my head. I was worried at the beginning of the
fellowship that TLs don’t write any code and I would suddenly become a meeting chair,
and even though I &lt;em&gt;did&lt;/em&gt; have a ton of meetings, I also wrote a ton of code.
I know it’s weird to hear a woman assert things she’s good at it. This is also
a new thing I’m trying out. My notes, my rules!&lt;/p&gt;

&lt;p&gt;In personal news, I’ve gotten really into broth-as-a-savoury-afternoon tea. I used to make a lot of miso (and drink it out of a cup; this part is key), but to add some
variety in my life, this week I started boiling a bunch of vegetables during meetings
and making my own broth. Anything for variety in the apocalypse, amirite.&lt;/p&gt;

&lt;p&gt;Goldie moved in to my Animal Crossing island.&lt;/p&gt;

&lt;p&gt;I am exclusively watching serial killer shows right now (Des, I’ll be gone in the dark, Ripper)
which isn’t exactly off brand but might be a little TOO on brand, you know? That’s what
I get for finishing Bridgerton in 2 days.&lt;/p&gt;

&lt;p&gt;For my birthday in November my mum got me some new books of piano sheet music, so
I’ve started playing some piano again. Before I moved to America, I used to play every day and be actually good at it, but much like with everything else I got really burnt
out by the stress of “being good at a hobby” and started hating it. I think enough
time has passed that I can give it a try again, and maybe I won’t be so intense this time.
I’m currently trying to nail Bach’s Menuet in G. &lt;a href=&quot;https://twitter.com/pcastr/status/1346654481451245569&quot;&gt;Here&lt;/a&gt; is my coworker playing around with it.&lt;/p&gt;

&lt;p&gt;A lot of you JINXED this year like the jinxers you are because shit was looking
good on Tuesday, and lo and behold by Wednesday the world was on fire again and I
was sad and just watched the news in horror.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Fixing typedoc's generated TOC if your code is using ES6 modules</title>
   <link href="https://meowni.ca/posts/typedoc-toc/"/>
   <updated>2020-02-21T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/typedoc-toc</id>
   <content type="html">&lt;p&gt;My one policy about blogging is “write the blog post you wanted to find in the search results”.
I spent an inordinate amount of time yesterday trying to get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typedoc&lt;/code&gt; to only show the docs
for the files I’m actually exporting in my library, and didn’t find anything
on the internet to help me, so here is the blog post I wanted to read.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;
&lt;p&gt;You are working on a JS library. You author your source in TypeScript. You have
an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.ts&lt;/code&gt; file that exports only some of your source files. You would like
your generated docs from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typedoc&lt;/code&gt; to only have docs for &lt;em&gt;those&lt;/em&gt; files (Why? So
that people don’t open issues along the lines of “I see the docs for function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt;,
but I can’t see how to call it, pls export it”. Sweet child, if that
function was meant to be public it probably would’ve been. That function is
actually 3 spiders in a trench coat).&lt;/p&gt;

&lt;p&gt;That is, you would like your Table of Contents to show this:
&lt;img width=&quot;500&quot; alt=&quot;toc only shows 5 entries&quot; src=&quot;https://user-images.githubusercontent.com/1369170/75011632-f396cb80-5434-11ea-97c7-708a94e932fe.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and not this:
&lt;img width=&quot;500&quot; alt=&quot;toc shows every file under the sun&quot; src=&quot;https://user-images.githubusercontent.com/1369170/75011626-f09bdb00-5434-11ea-859b-ab195c5f1b47.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;things-that-arent-solutions&quot;&gt;Things that aren’t solutions&lt;/h2&gt;
&lt;p&gt;In the order that I’ve tried them:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mode modules&lt;/code&gt; flag: the word “modules” is a lie here and really just means
“under a namespace” not like… ES6 modules (&lt;a href=&quot;https://github.com/TypeStrong/typedoc/issues/109&quot;&gt;tracking issue&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--excludeNotExported&lt;/code&gt; flag: it helps to generate docs for only the
exported &lt;em&gt;functions&lt;/em&gt;, but not files&lt;/li&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-excludePrivate&lt;/code&gt; flag: same as above&lt;/li&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--exclude&lt;/code&gt; flag: this is nice in theory, but I have like 30+ private
files that shouldn’t be documented and only like 5 top level exports, so that regex
will suck. Also, my experience is that next time someone adds a file they want or
don’t want documented they won’t know to add it to this list and we’re back to having a problem&lt;/li&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--toc&lt;/code&gt; flag. I honestly don’t know what it does, but for me, it did nothing 100% of the time&lt;/li&gt;
  &lt;li&gt;thinking this should presently work in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typedoc&lt;/code&gt;. Here is the &lt;a href=&quot;https://github.com/TypeStrong/typedoc/issues/639&quot;&gt;tracking issue&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/TypeStrong/typedoc/pull/1184&quot;&gt;open PR&lt;/a&gt; that might fix it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;my-solution&quot;&gt;My “solution”&lt;/h2&gt;
&lt;p&gt;I’m less bothered that the docs for the private files get generated at all,
and more bothered that they’re linked in the main page TOC and thus discoverable.
So my “solution” that “fixes” it is: inject some JavaScript that hides all the files that aren’t
exported in the top level &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.ts&lt;/code&gt;. It’s gross, but it’s good enough (Also: the
title of my autobiography).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: This works for for my library (here’s the &lt;a href=&quot;https://github.com/tensorflow/magenta-js/pull/409/files#diff-1853dafcee10b39c22a19539ff8fd11cR67&quot;&gt;PR&lt;/a&gt; I’m blessing our code
with this horror), but for your particular setup it might need some changes. I
speak very broken bash, so I probably can’t help you with those changes.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Variables I have:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Where your source is. We call the script from a different&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# place than the index.ts but maybe you don&apos;t.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;srcDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Where you generate the docs. This could be a /docs folder, or a temp one&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# because you&apos;re going to push to the GitHub gh-pages branch.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# I don&apos;t know what you do, I only know what we do (the latter).&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;docsDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The root index.ts file has a bunch of &quot;export * from &apos;./foo&apos;;&quot; lines.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Parse those lines into a space separated list of names. It&apos;s ok that&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# they&apos;re space separated, we&apos;ll split them in JS,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this is all a horror anyway. You might have to touch these regexes, sry.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/export &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; from &apos;.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&apos;;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/p&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$srcDir&lt;/span&gt;/src/index.ts&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# If your theme uses a different td class name than the one below,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# inspecting it and update it in the selector. Also my names had&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a bunch of extra quotes, hence the replacing, yours might not.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This is why I don&apos;t want to maintain this.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;scriptToFixTheToc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;script&amp;gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
const toc = &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$exports&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.split(&apos; &apos;); &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
const links = document.querySelectorAll(&apos;.tsd-kind-external-module&apos;); &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
for (let i = 0; i &amp;lt; links.length; i++) { &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
  const name = links[i].textContent.trim().replace(/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/g, &apos;&apos;); &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
  if (toc.indexOf(name) === -1) { &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
    links[i].parentNode.removeChild(links[i]); &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
  } &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
} &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
&amp;lt;/script&amp;gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Inject that script in the index.html.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$scriptToFixTheToc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$docsDir&lt;/span&gt;/index.html

&lt;span class=&quot;c&quot;&gt;# Pray.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
Like sands through the hourglass so are the hacks of our lives.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>monica.css</title>
   <link href="https://meowni.ca/posts/monica-dot-css/"/>
   <updated>2020-02-19T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/monica-dot-css</id>
   <content type="html">&lt;p&gt;Back in the day when I worked on Polymer I got used to relying on a bunch of useful CSS classes
that at the time we called &lt;a href=&quot;https://github.com/PolymerElements/iron-flex-layout/blob/master/iron-flex-layout-classes.js&quot;&gt;iron-flex-layout&lt;/a&gt;.
They were there partly because flexbox was a sadness on IE and you needed to say everything 3 times to maybe
get it right twice, and add some
very special &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flex-basis: 0.000000001px&lt;/code&gt;
“bug fixes” that tbh nobody should ever have to write by hand. But they were also there because it’s kind of nice to say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div class=&quot;horizontal&quot;&amp;gt;&lt;/code&gt;
and for it to just work.&lt;/p&gt;

&lt;p&gt;Some years later, it’s now 2020, and flexbox is really good everywhere! We don’t need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iron-flex-layout&lt;/code&gt; anymore, but tbh I still
want to say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div class=&quot;horizontal&quot;&amp;gt;&lt;/code&gt; and for it to just work.&lt;/p&gt;

&lt;p&gt;I know there are tons of CSS frameworks out there like &lt;a href=&quot;https://tachyons.io/&quot;&gt;tachyons&lt;/a&gt; that can do this for me, but most of these frameworks
do &lt;em&gt;too much&lt;/em&gt; for me. I don’t work on large projects that need design systems, and I don’t want every possible padding and margin and colour and flexbox configuration in the world. I just
want the ones that I know I end up using in every project. So here is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monica.css&lt;/code&gt;: my very own CSS framework, which I copy paste at the beginning of every CSS file and take it from there. It’s already minified and bundled (because you copy pasted it) so dare I say: fast loading and efficient? 🙃&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;border-box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;pointer-events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.horizontal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;flex-direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.vertical&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;flex-direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.center&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.flex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--spacing-xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--spacing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;24px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--spacing-s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--spacing-m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;36px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Metronomes in JavaScript</title>
   <link href="https://meowni.ca/posts/metronomes/"/>
   <updated>2019-09-10T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/metronomes</id>
   <content type="html">&lt;style&gt;
  img.plot { max-height: 400px !important; }
&lt;/style&gt;

&lt;p&gt;My job nowadays involves a lot of music and JavaScript. You know what musicians really
care about? Paychecks (support your local musicians, go to concerts, don’t steal music
from indie musicians). But also: keeping time.&lt;/p&gt;

&lt;p&gt;Keeping time in JavaScript is kind of a joke, not just because time is a
social construct (this is the Jenn Schiffer social engineering at work), but because it’s really easy to write
code that blocks the timekeeper. Remember: JavaScript
inherently only has one thread, which it uses for everything: painting your buttons,
looping through arrays, mining bitcoin, scrolling. Everything.
This means that most of the time, you
write blocking code, but it only blocks for a little bit – 1ms here and there. And that’s ok!
Visually you don’t notice that kind of latency, and let’s be honest: it takes like 400ms to download the scripts, what’s 1ms?&lt;/p&gt;

&lt;p&gt;1ms starts getting in the way when it’s actually 5ms, or 40 ms, or when you’re
trying to have a metronome run correctly. I made a &lt;a href=&quot;https://input-delay.glitch.me&quot;&gt;typing delay experiment&lt;/a&gt; to see how much delay people could tolerate, and just
for typing alone some people got really antsy around 200ms (shout out
to the section of the population who thought they were heroes because they could
tolerate infinity delay because of how bad ssh latency is. That’s not heroic,
that’s Stockholm syndrome. Complain to your sys admins).&lt;/p&gt;

&lt;p&gt;When I changed that to an &lt;a href=&quot;https://audio-delay.glitch.me&quot;&gt;audio delay experiment&lt;/a&gt;,
musicians started complaining around 40ms. And that was just audio delay, not
an actual metronome. Imagine that fucking with your audio too! So, keeping time is really important – but how do we actually do that in JavaScript?&lt;/p&gt;

&lt;p&gt;In general, when we want to not block in JavaScript (and do better than
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setInterval&lt;/code&gt;, who is the friend you invite to a party but
shows up like +/- 4h to it), we do one of two things:
start writing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; functions, or move code to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Worker&lt;/code&gt; (&lt;a href=&quot;https://twitter.com/dassurma&quot;&gt;Surma&lt;/a&gt;
has a great &lt;a href=&quot;https://dassur.ma/things/when-workers/&quot;&gt;article&lt;/a&gt; about workers everyone
should read). In
particular, for audio things, there’s a third option: using the Web Audio clock – Chris Wilson has a &lt;a href=&quot;https://www.html5rocks.com/en/tutorials/audio/scheduling/&quot;&gt;great blog post&lt;/a&gt;
about how to do your own audio scheduling which is an oldie but a goodie! (turns out
not much changes in 4 years in the Web Audio spec world). Anyway, I wanted to
compare these three approaches, and see how bad the latency was.&lt;/p&gt;

&lt;h2 id=&quot;play-with-the-experiment&quot;&gt;Play with the experiment&lt;/h2&gt;
&lt;p&gt;Me being me, I &lt;a href=&quot;https://metronomes.glitch.me/&quot;&gt;made a whole demo&lt;/a&gt; to
test and compare these approaches. I built
3 kinds of metronomes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a really bad one using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setInterval&lt;/code&gt; on the main thread,&lt;/li&gt;
  &lt;li&gt;a less bad one using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setInterval&lt;/code&gt; in a Worker,&lt;/li&gt;
  &lt;li&gt;the best one, that uses the Web Audio API to preschedule audio events, at
the times you want (labelled “prescheduled” in the graphs). The audio events
will happen precisely at the time they are scheduled, but if you want a
callback to do some visual work on, that callback needs to be in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;,
and will happen when it happens. This is why there are two lines for this metronome.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can run them on your own in that Glitch, but if you only want
the results, here they are.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;
&lt;p&gt;There are 3 metronomes, that each tick 20 times, and after each tick, a callback
function is called. For the first 2 metronomes, in this callback you &lt;em&gt;also&lt;/em&gt;
make the audio tick (except for the Web Audio scheduler metronome, which makes the audio
tick on its own time). The graphs below log the difference between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audioContext.currentTime&lt;/code&gt;
of successive ticks.&lt;/p&gt;

&lt;h3 id=&quot;-the-unrealistic-case&quot;&gt;🤔 The unrealistic case&lt;/h3&gt;
&lt;p&gt;This is when you’re literally doing 0 work in between the clock ticks. This is
probably never going to happen in a real app unless it’s … just
an actual metronome i guess. In this case, the difference between successive ticks looks
ok for all metronomes – I mean, why wouldn’t it be? You’re not scrolling, you’re
not doing any work, what’s there to block the ticks? There’s still a bit of variance between
each ticks, but that’s because we know we can’t schedule anything (except for the Web Audio
clock) to be &lt;em&gt;exactly&lt;/em&gt; 0.5s away.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;plot&quot; alt=&quot;&quot; src=&quot;/images/metronomes/1.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-the-awful-case&quot;&gt;🤢 The awful case&lt;/h3&gt;
&lt;p&gt;Here we are doing 0.5 seconds of fake work on the main thread, after each tick. This
is where things get really dodgy. Because that fake work is blocking, that means that &lt;em&gt;all&lt;/em&gt;
the metronome callbacks are kind of screwed, and their ticks are delayed by at least 0.5s.
In the second metronome, even though we’re calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setInterval()&lt;/code&gt; in a Worker, it makes no difference because the work from the previous tick is blocking, so it automatically delays the next tick.
In the Web Audio case, we can hear the ticks correctly (the green line), but the callback (which you would use to display things to the screen), is delayed for the same reason
as the other metronomes. Friends don’t let friends do work on the main thread.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;plot&quot; alt=&quot;&quot; src=&quot;/images/metronomes/2.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-the-better-but-still-not-great-case&quot;&gt;😰 The better, but still not great case&lt;/h3&gt;
&lt;p&gt;When we have a big chunk of blocking work, a good approach is to chunk it up in
smaller work. There are several ways to do this. I split each 0.5s of work into smaller
5ms chunks, and then do each of them in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requestAnimationFrame&lt;/code&gt;. This is ok,
but a bit wasteful (it makes your work take longer than necessary). A better
approach is to use tasks (see this &lt;a href=&quot;https://github.com/GoogleChromeLabs/proxx/blob/b1fa3b4c7a8565ddc245b03680dadd567c3a8f9e/src/utils/scheduling.ts#L20-L34&quot;&gt;sample code&lt;/a&gt; from the proxx game),
but the results weren’t going to be that different in this case, so I didn’t bother.
Anyway, this experiment looks better!
Now our ticks are only delayed by about 5ms, which might be ok for your use case. The bad main
thread &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setInterval&lt;/code&gt; metronome is still doing poorly because there’s still
work on the main thread and it keeps time on the main thread, so time is still
wibbly wobbly in this case.
&lt;img class=&quot;plot&quot; alt=&quot;&quot; src=&quot;/images/metronomes/3.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-the-optimal-case&quot;&gt;🤩 The optimal case&lt;/h3&gt;
&lt;p&gt;All workers all the time! If you can, do all this expensive work in a Worker!
If we move the work we have to do in the callback completely off the main thread,
then this setup basically looks the same as the unrealistic “there’s no work being done ever”
case – the key distinction is that it’s really “there’s no work being done &lt;em&gt;on the main thread&lt;/em&gt; ever. Hurray!&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;plot&quot; alt=&quot;&quot; src=&quot;/images/metronomes/4.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-have-i-learned-from-this&quot;&gt;What have I learned from this&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;time is hard&lt;/li&gt;
  &lt;li&gt;I knew &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setInterval()&lt;/code&gt; is bad for time keeping, but now I know it’s like … really bad&lt;/li&gt;
  &lt;li&gt;if you need audio scheduling, use the Web Audio clock&lt;/li&gt;
  &lt;li&gt;if you need accurate scheduling without the Web Audio clock, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setInterval&lt;/code&gt;
in a Worker&lt;/li&gt;
  &lt;li&gt;and if you can, move any expensive work that you have to do from the main thread
to a Worker.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this helps at least one of you!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/dassurma&quot;&gt;Surma&lt;/a&gt; for proof reading this and letting
me steal his horrific “block for a fixed time” sample code (it’s &lt;a href=&quot;https://glitch.com/edit/#!/metronomes?path=script.js:151:1&quot;&gt;this&lt;/a&gt;. I know you want to look).&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>The perils of tensor.dataSync()</title>
   <link href="https://meowni.ca/posts/on-tfjs-datasync/"/>
   <updated>2019-02-22T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/on-tfjs-datasync</id>
   <content type="html">&lt;p&gt;One of the first things you stumble on when you start using TensorFlow.js is
that sometimes you need your data as a Tensor, and sometimes you need it
as a JavaScript number. Maybe it’s for logging it, maybe it’s for displaying
it somewhere during training, maybe it’s because you don’t trust the robots
to be better than you at math.&lt;/p&gt;

&lt;p&gt;This is a quick post that tries to clarify why doing this &lt;strong&gt;synchronously&lt;/strong&gt;
is probably bad and will leave your UI really janky. &lt;a href=&quot;https://twitter.com/nsthorat&quot;&gt;Nikhil&lt;/a&gt;
(who like, birthed TensorFlow.js, bless) was kind enough to explain this to me recently, so I figured
I’d return the favour, with fewer meeps and more mistakes.&lt;/p&gt;

&lt;h2 id=&quot;downloading-and-uploading&quot;&gt;Downloading and Uploading&lt;/h2&gt;
&lt;p&gt;When you create a Tensor, it lives on the CPU. The mere fact that it’s a Tensor
doesn’t automatically move that data into its GPU mansion – it needs to be used in a WebGL
program. (I’m playing fast and loose here with the words GPU and CPU btw, so
hold back the pedantics: when I say “it lives on the CPU” I mean “in main memory,
where the CPU processes stuff”; the GPU has it‘s own memory, that’s where it
processes stuff, and that’s where that data has to get transferred to.
It’s fine. You know I know.)&lt;/p&gt;

&lt;p&gt;You &lt;strong&gt;upload&lt;/strong&gt; the tensor to the GPU when you call one of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tf.&lt;/code&gt; operations on it.
Tensor operations are matrix math, and matrix math is really fast on the GPU,
so every time you call something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sum&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqrt&lt;/code&gt; on a Tensor, TensorFlow.js
creates a little &lt;a href=&quot;https://js.tensorflow.org/tutorials/custom-webgl-op.html&quot;&gt;WebGL operation&lt;/a&gt;,
and sends it to the backend. Whatever data lived on the CPU is now
“uploaded” to the GPU (to a WebGL texture).&lt;/p&gt;

&lt;p&gt;You &lt;strong&gt;download&lt;/strong&gt; a Tensor when you want to get that data from the GPU back onto
the CPU. The data now lives in a WebGL texture, so TensorFlow.js needs to call
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readPixels&lt;/code&gt;&lt;/a&gt;
to … read… those pixels… from the texture and convert them back into something you can use.
Here’s the problem: calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readPixels&lt;/code&gt; is fundamentally a blocking operation: when you
ask the GPU to give you data, you &lt;em&gt;have&lt;/em&gt; to wait for it to respond; this means
you can’t really do anything else on the screen while this is happening, like
paint any animations.&lt;/p&gt;

&lt;p&gt;TL;DR:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const a = tf.tensor();  // a is on the CPU.
const b = a.sqrt();     // Upload a&apos;s data to the GPU.
const c = a.dataSync(); // Download a&apos;s data from the GPU to the CPU.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the problems here are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readPixels&lt;/code&gt; will make your UI janky.&lt;/li&gt;
  &lt;li&gt;downloading and uploading from the GPU isn’t free, so doing this over and over
is bad news bears.&lt;/li&gt;
  &lt;li&gt;downloading from the GPU synchronously over and over is a 2-in-1 and
will probably murder your favourite pet.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;
&lt;p&gt;If you read the latest &lt;a href=&quot;https://js.tensorflow.org/api/0.15.1/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.15.1&lt;/code&gt;&lt;/a&gt; docs,
you’ll discover that there are at least 4 ways of “downloading” your tensor:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aTensor.array()&lt;/code&gt; – asynchronous, and keeps the shape of the tensor (so it returns a nested array)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aTensor.arraySync()&lt;/code&gt; – same as above but &lt;strong&gt;synchronous&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aTensor.data()&lt;/code&gt; – asynchronous and doesn’t keep the shape of the tensor (and returns a fancy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Float32Array&lt;/code&gt; like type)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aTensor.dataSync()&lt;/code&gt; – same as above but &lt;strong&gt;synchronous&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Out of these, I personally prefer the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt; flavours, since I think about my
tensors based on their dimensions, so when they get flattened I get confused.&lt;/p&gt;

&lt;p&gt;The difference between the sync and async versions is that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;for the sync methods, TensorFlow.js just goes ahead and calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readPixels&lt;/code&gt;,
which instantly blocks and causes sadness.&lt;/li&gt;
  &lt;li&gt;for the async methods, it creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/fenceSync&quot;&gt;“fence”&lt;/a&gt; (think of it like a fancy WebGL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;),
and then calls a different method, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getBufferSubData&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getBufferSubData&lt;/code&gt;&lt;/a&gt;
when that fence is hit. Unlike &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readPixels&lt;/code&gt;, this doesn’t block the UI thread
and it won’t cause sadness.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you, like me, have strange hobbies and want to find this in the actual
TensorFlow.js source code, check out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readSync&lt;/code&gt; methods in
&lt;a href=&quot;https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/backend_webgl.ts&quot;&gt;this file&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-to-do&quot;&gt;What to do&lt;/h2&gt;
&lt;p&gt;My advice is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;if you have to download your data, try to do it once, asynchronously. Do this
at the end, after all your GPU computations are done.&lt;/li&gt;
  &lt;li&gt;reach towards the &lt;strong&gt;async&lt;/strong&gt; versions first – that way, even though the
operation is expensive, it won’t block the UI and you can do other non-janky
things like letting the user scroll on the page.&lt;/li&gt;
  &lt;li&gt;if you really really pinky swear have to use the sync version, just take
another look at the code and see if you can’t move that call somewhere else
where it can by async.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>I did an inktober and I want to tell you about it</title>
   <link href="https://meowni.ca/posts/inktober/"/>
   <updated>2018-11-15T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/inktober</id>
   <content type="html">&lt;p&gt;Inktober is a project where artists make an ink drawing every day for the
whole month of October. This year I did an inktober but ignored all the rules, and
made Internet Stuff™️ instead. That experiment lives &lt;a href=&quot;https://howthee.glitch.me&quot;&gt;here&lt;/a&gt;, but
I want to tell you why I did it before you go ahead and judge it. I
think that it’s also important to tell you it was a huge pain in the ass just
in case you watched it unfold and thought I magically stuck every landing.&lt;/p&gt;

&lt;h2 id=&quot;the-why&quot;&gt;The why&lt;/h2&gt;
&lt;p&gt;“Art” is a word I struggle with a lot. I don’t think of myself as an artist, because
none of the things I make feel like art yet. At the same time, I obsess about these
things if I don’t feel they represent &lt;em&gt;me&lt;/em&gt;, which is one of the
nigthmares of being an artist – hence the struggle. For example, I made pottery for well over a year
before I thought any of the mugs looked like what I wanted them to look like.
They looked fine, and they looked like mugs, but they weren’t the kind of mugs
I &lt;em&gt;wanted&lt;/em&gt; to make.&lt;/p&gt;

&lt;p&gt;In my opinion, one of the qualities you need to be an artist is to be
extremely creative. I am not extremely creative, but I believe that everything
in life can be learnt by grinding that level. So with inktober I wanted to
force myself to think creatively every day, for a whole month, and see if that
would level up my creativity.&lt;/p&gt;

&lt;h2 id=&quot;the-how&quot;&gt;The how&lt;/h2&gt;
&lt;p&gt;I don’t like open ended projects because I think they lead to
intellectual wankery instead of like, &lt;em&gt;actually doing the thing&lt;/em&gt;, so I made up these rules
for my weird art experiment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it had to be somehow about the sheriff of circle punch [1]&lt;/li&gt;
  &lt;li&gt;it shouldn’t take more than like, an hour&lt;/li&gt;
  &lt;li&gt;it’s fine if I skipped weekends [2]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[1] Honestly the first day of inktober was a joke to make fun of the hashtag
and my friend &lt;a href=&quot;https://twitter.com/fabrahamlincoln&quot;&gt;Fabian&lt;/a&gt;, who I troll
with a &lt;a href=&quot;https://www.urbandictionary.com/define.php?term=Circle%20Game&quot;&gt;circle punch&lt;/a&gt;
any time I can. This of course ended up trolling me, because I did the whole fucking month
afterwards, so ain’t that the troller becoming the trollee. My friend &lt;a href=&quot;https://twitter.com/goatsandbacon&quot;&gt;Bushra&lt;/a&gt; came up with the name (“it’s always howdy,
never howthee”). &lt;a href=&quot;https://twitter.com/search?q=from%3A%40goatsandbacon%20%23inktober&amp;amp;src=typd&quot;&gt;Her inktober&lt;/a&gt; was way better.&lt;/p&gt;

&lt;p&gt;[2] I don’t work weekends, and if anyone tells you that “being creative”,
or “making art” doesn’t feel like work, don’t believe them. Nothing is a free lunch.&lt;/p&gt;

&lt;h2 id=&quot;the-aftermath&quot;&gt;The aftermath&lt;/h2&gt;
&lt;p&gt;I learnt a lot of CSS. A lot of the days ended up with me looking at Codepen
and trying to figure out what animation I could use that day. I learnt about
svg filters, and became really comfortable writing keyframes. I finally
managed to write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;align-items: center; justify-content: space-between;&lt;/code&gt;
without having to look it up. I only crashed my browser once.&lt;/p&gt;

&lt;p&gt;Overall it was really, really hard, and I hated a lot of it.
A bunch of the days &lt;a href=&quot;https://howthee.glitch.me/day-5.html&quot;&gt;were&lt;/a&gt; &lt;a href=&quot;https://howthee.glitch.me/day-6.html&quot;&gt;political&lt;/a&gt;. Some of the days were &lt;a href=&quot;https://howthee.glitch.me/day-8.html&quot;&gt;freebies&lt;/a&gt;. &lt;a href=&quot;https://howthee.glitch.me/day-18.html&quot;&gt;Day 18&lt;/a&gt;
was my favourite. &lt;a href=&quot;https://howthee.glitch.me/day-10.html&quot;&gt;Day 10&lt;/a&gt; almost
made me throw my laptop at the cat.&lt;/p&gt;

&lt;p&gt;And you know what? I think it worked. I noticed that I was walking around all day
&lt;em&gt;looking&lt;/em&gt; at everything, like artists look at everything, trying to see
what I could use for that day’s inktober. Once, when I was in
highschool, an art teacher set me up on a mentoring date with an art school major.
I told her half of the time I didn’t know what to paint, and she told me to
just look at things and make them weird. “It’s like the Eiffel tower, but like
melting over a bridge, you know?”. I didn’t know, but then on day 18
I took a drum beat and made it into a Franken-morphed sheriff. I wrote down
every idea that I had, and after the month was over, I still had ideas left over.
They’re not all good, but you can afford being picky when you’re out of the drought.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;glitch-embed-wrap&quot; style=&quot;height: 900px; width: 100%;&quot;&gt;
  &lt;iframe allow=&quot;geolocation; microphone; camera; midi; encrypted-media&quot; src=&quot;https://glitch.com/embed/#!/embed/howthee?path=README.md&amp;amp;previewSize=100&quot; alt=&quot;howthee on Glitch&quot; style=&quot;height: 100%; width: 100%; border: 0;&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Hello magenta</title>
   <link href="https://meowni.ca/posts/hello-magenta/"/>
   <updated>2018-11-07T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/hello-magenta</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://magenta.tensorflow.org&quot;&gt;Magenta.js&lt;/a&gt; is a JavaScript library that helps you generate art and music
on the web. It’s also the team that I work on now! One of the things that I do
whenever I join a new team is learn a bunch of things, and then make a bunch of
tutorials that past Monica would’ve loved to stumble over. This is one of them!&lt;/p&gt;

&lt;p&gt;In this tutorial, we’ll talk about the music generation bits in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@magenta/music&lt;/code&gt; (one of the several libraries in Magenta.js) –
how to make your browser sing, and in particular, how to make your browser
sing &lt;em&gt;like you&lt;/em&gt;!. The tutorial is interactive, and introductory
and &lt;a href=&quot;https://hello-magenta.glitch.me/&quot;&gt;on Glitch&lt;/a&gt;. Go play with
all the examples, and have fun! 💕&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Hello tensorflow</title>
   <link href="https://meowni.ca/posts/hello-tensorflow/"/>
   <updated>2018-05-22T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/hello-tensorflow</id>
   <content type="html">&lt;style&gt;
  iframe {
    height: 640px;
    width: 100%;
    margin: 0 auto;
    border: 5px solid #E0F7FA;
    border-radius: 3px;
  }
&lt;/style&gt;

&lt;p&gt;&lt;strong&gt;Machine Learning (ML)&lt;/strong&gt; is the dope new thing that everyone’s talking about, because it’s really good
at learning from data so that it can predict similar things in the future. Doing ML by hand is pretty annoying
since it usually involves matrix math which is zero fun in JavaScript (or if you ask me: anywhere 😅).
Thankfully, &lt;a href=&quot;https://js.tensorflow.org/&quot;&gt;TensorFlow.js&lt;/a&gt; is here to help! It’s
an open source library that has a lot of built-in Machine Learning-y things like models and algorithms so that
you don’t have to write them from scratch.&lt;/p&gt;

&lt;h2 id=&quot;is-your-problem-a-machine-learning-problem&quot;&gt;Is your problem a Machine Learning problem?&lt;/h2&gt;

&lt;p&gt;Machine learning is good at classifying and labelling data. The premise of every machine learning problem is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Someone gives us some data that was generated according to a &lt;strong&gt;secret&lt;/strong&gt; formula. This data could be a bunch of points (that are generated based on some math equation), but could also be fun, like images (the secret formula could be “some of these images are chihuahuas and some are
&lt;a href=&quot;https://mashable.com/2016/03/10/dog-or-muffin-meme/#LjBd4.e9lgqJ&quot;&gt;blueberry muffins&lt;/a&gt;) or bus schedules.&lt;/li&gt;
  &lt;li&gt;By looking at this data we were given, we approximate the secret formula so that we can correctly predict a future data point. For example, if we’re given a photo, we will eventually be able to confidently say whether it’s a dog or a muffin.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-fun-demo&quot;&gt;A fun demo!&lt;/h2&gt;

&lt;p&gt;If you want to get started, predicting numbers tends to be easier than
predicting images, so in this example we’re trying to fit a curve to a bunch of
data (this is the same example from the
&lt;a href=&quot;https://js.tensorflow.org/tutorials/fit-curve.html&quot;&gt;TensorFlow&lt;/a&gt;
site but with waaaaay more code comments and a prettier graph).&lt;/p&gt;

&lt;p&gt;We are given a bunch of points (for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; between -1 and 1, calculate a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; according to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y = a * x^3 + b * x^2 + c * x + d&lt;/code&gt; – we know this is the secret formula but we don’t know the
values of those &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a,b,c,d&lt;/code&gt; coefficients.)
Our goal is to learn these coefficients, so that if we’re given a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; value, we can say what the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; value should be.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;blue&lt;/strong&gt; dots are the training points we were given. The &lt;strong&gt;red&lt;/strong&gt; dots would be our guesses,
based on our initial, default coefficients (hella incorrect!). Once you click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;train&lt;/code&gt;
button, the &lt;strong&gt;green&lt;/strong&gt; dots show how our coefficients are getting better. After you see the default
example, check what happens if you change the shape of the data, or we are given fewer data points or fewer iterations!&lt;/p&gt;

&lt;iframe src=&quot;https://hello-tensorflow.glitch.me/index.html#demo-content&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;Most machine learning algorithms follow this pattern:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We have to figure out the &lt;strong&gt;“features”&lt;/strong&gt; of the secret formula that generated the data we were given, so that we
can learn them. In my opinion, this is like 80% of the complexity of solving an ML problem. In this example, we were told the shape of the secret formula (it’s a cubic!), so the features we have to learn are the coefficients in the polynomial. For something more
complex like the “is this a dog or a blueberry muffin” problem, we’d have to look at pixels and colours and formations and what
makes a dog a dog and not a muffin.&lt;/li&gt;
  &lt;li&gt;Once we figure out these features (in our case, those &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a,b,c,d&lt;/code&gt; coefficients), we initialize them to some random values. We could now use them to make
predictions, but they would be teeeeeerrible because they’re just random.&lt;/li&gt;
  &lt;li&gt;(I’m just going to use our actual example from now on and
not dogs)&lt;/li&gt;
  &lt;li&gt;We start looking at every piece &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(x,y)&lt;/code&gt; of training data we were given. We take the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; value, and based on these coefficients we have estimated, we predict what the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; value would be.
We then look at the correct &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; value from the original training data, calculate the
difference between the two, and then adjust our coefficients so that our predicted value gets closer to the correct one.&lt;/li&gt;
  &lt;li&gt;(this, with more math sprinkled in is called “stochastic gradient descent”. “Stochastic” means probabilistic, and
“gradient descent” should make you think of walking down a hill, towards a sink hole – the higher the hill, the bigger the prediction error, which is why you want to descend towards the error-free hole.)&lt;/li&gt;
  &lt;li&gt;This part of code is actually pretty messy (because matrices and derivatives), and TensorFlow does this for us!&lt;/li&gt;
  &lt;li&gt;We keep doing this until we use up all the data, and then repeat the entire process so that we iterate over the same data over
and over again until at the end we’ve pretty much learnt the coefficients!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The code&lt;/h2&gt;

&lt;p&gt;You can look at the code for the demo &lt;a href=&quot;https://glitch.com/edit/#!/hello-tensorflow?path=script.js:95:10&quot;&gt;on Glitch&lt;/a&gt;. I tried to comment
most lines of the code with either what the algorithm or TensorFlow are doing (especially when
TensorFlow is actually doing a looooot of heavy lifting behind the scenes). I hope it helps!&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>How browsers position floats</title>
   <link href="https://meowni.ca/posts/float-layout/"/>
   <updated>2018-04-11T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/float-layout</id>
   <content type="html">&lt;style&gt;
  iframe {
    height: 800px;
    width: 100%;
    margin: 0 auto;
    border: 5px solid #E0F7FA;
    border-radius: 3px;
  }
&lt;/style&gt;

&lt;p&gt;When you have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt; CSS property on a box (with a value different than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;none&lt;/code&gt;), this box
must be laid out according to the &lt;strong&gt;float positioning algorithm&lt;/strong&gt;. Loosely, it says:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if the box has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float:left&lt;/code&gt;, the box is positioned at the beginning of the line box&lt;/li&gt;
  &lt;li&gt;if the box has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float:right&lt;/code&gt;, the box is positioned at the end of the line box&lt;/li&gt;
  &lt;li&gt;text (and more generally anything within the normal, non-floaty flow) is laid out along the edges of the floating boxes&lt;/li&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear&lt;/code&gt; property changes the floating behaviour.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anyway, in general you’ll have a better time if you use a flexbox or CSS grid instead of floats, because floats are quirky and have strange edge cases, but if you were ever curious
about how the algorithm would choose where to position different floats, here’s a demo
(which you can also play with directly on &lt;a href=&quot;https://float-layout.glitch.me&quot;&gt;glitch&lt;/a&gt;):&lt;/p&gt;

&lt;iframe src=&quot;https://float-layout.glitch.me/demo.html&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>An intro to Reinforcement Learning (with otters)</title>
   <link href="https://meowni.ca/posts/rl-with-otters/"/>
   <updated>2018-02-26T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/rl-with-otters</id>
   <content type="html">&lt;style&gt;
  img.otter { max-height: 220px !important; }
  iframe.otter {
    height: 800px;
    width: 100%;
    margin: 0 auto;
    border: 5px solid #E0F7FA;
    border-radius: 3px;
  }
&lt;/style&gt;

&lt;p&gt;Before I wrote the JavaScripts, I got a master’s in AI (almost a decade ago 🙀),
and wrote a &lt;a href=&quot;/includes/mdinculescu_thesis.pdf&quot;&gt;thesis&lt;/a&gt;
on a weird and new area in Reinforcement Learning. Or at least it was new then.
It’s definitely still weird now. Anyway, I loved it. With all the hype around Machine Learning
and Deep Learning, I thought it would be neat if I wrote a little primer
on what Reinforcement Learning really means, and why it’s different than
just another neural net.&lt;/p&gt;

&lt;p&gt;Richard Sutton and Andrew Barto wrote an &lt;em&gt;amazing&lt;/em&gt; book called
“Reinforcement Learning: an introduction”; it’s
my favourite non-fiction book I have ever read in my life, and it’s why I fell
in love with RL. The complete draft is available
for free &lt;a href=&quot;http://incompleteideas.net/book/bookdraft2017nov5.pdf&quot;&gt;here&lt;/a&gt;, and if you’re into math,
and want to explore this topic further, I can’t recommend it enough.&lt;/p&gt;

&lt;p&gt;If you’re not into math, I have otters.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;otter&quot; alt=&quot;otter says hi&quot; src=&quot;/images/2018-02-26/0.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-it&quot;&gt;What is it?&lt;/h2&gt;
&lt;p&gt;Reinforcement learning (or RL) solves a very specific problem: figuring out
how to act over time, so that you get the most long term reward.
Both these sequences of actions and the reward bit are important components
that make RL a “good” approach to solve a problem.&lt;/p&gt;

&lt;p&gt;For example, this is perfect if you’re a Roomba who is trying to get home
(the only reward you get is if you
  actually get home, so while you’re roaming around aimlessly and get no 💰,
  you have a feeeeeeeling you’re not doing it right).&lt;/p&gt;

&lt;p&gt;On the other hand, this is terrible if you’re
  trying to figure out if a photo has an otter in it; there are no
  sequences of actions that matter here, other than doing the decision of saying
  “yes iz otter”. You’re just trapped in a room where people slip Polaroids of
  animals under the door and you have to tell them what it is. Nightmares aren’t
  really a good area for RL.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;otter&quot; alt=&quot;i&apos;m doing RL&quot; src=&quot;/images/2018-02-26/1.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-isnt-it&quot;&gt;What isn’t it?&lt;/h2&gt;
&lt;p&gt;There are many things with the word “learning” in them that &lt;em&gt;aren’t&lt;/em&gt; Reinforcement Learning.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;supervised learning&lt;/em&gt;. This is a kind of Machine Learning where someone
gave you a training set that has everything labelled correctly, you learn from
it, and hope that at exam time what you’ve learnt is correct. This is the “I have
1000 images of cats, now I can tell you if this new image is a cat” problem.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;unsupervised learning&lt;/em&gt;. This is another kind of Machine Learning where
someone gave you a bunch of data with no labels, and just by staring at it you
try to find structure in it and make up labels. This is the “I have 1000 images of
cats and dogs, but nobody told me what a cat or a dog looks like; now I can tell you
if this new image is like what I call a cat or a dog”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Classification&lt;/em&gt; is a very common problem that can be solved with both of these
Machine Learning approaches (but can’t be solved very well with RL, which isn’t
really suited for one-off actions).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Artificial_neural_network&quot;&gt;Neural nets&lt;/a&gt; are very good at solving these 2 kinds of Machine Learning problems. For example, the secrets straight out of your &lt;a href=&quot;https://secure.i.telegraph.co.uk/multimedia/archive/03370/doge_3370416k.jpg&quot;&gt;nightmares&lt;/a&gt;
are created by a “deep” neural net, a neural net that has several layers in between
its input and output layers.&lt;/p&gt;

&lt;p&gt;If you add neural nets on top of some Reinforcement Learning algorithms, you get something
called &lt;em&gt;Deep Reinforcement Learning&lt;/em&gt;, which is a brand new area of research that
brought you supercomputers that &lt;a href=&quot;https://en.wikipedia.org/wiki/AlphaGo&quot;&gt;win at Go&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-world&quot;&gt;The world&lt;/h2&gt;
&lt;p&gt;RL problems are usually set up in an environment that is built out of &lt;strong&gt;states&lt;/strong&gt;,
and you can move between them by taking &lt;strong&gt;actions&lt;/strong&gt;. Once you take an action,
you’re given a &lt;strong&gt;reward&lt;/strong&gt;, and you keep doing this until someone
tells you to stop.&lt;/p&gt;

&lt;p&gt;In the Roomba example, the states could be the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(x,y)&lt;/code&gt;
positions on the map, and you move between two states (i.e. locations) by moving the
motors in a particular direction. The reward might be set up in such a way that
you only get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; point if you reach the home base, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; otherwise. If there’s
particularly dangerous spots in the world you want to make sure the Roomba
learns to avoid (like cliffs or a cat), you can make sure any actions that end
up in those states get a reward of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some environments are less like real worlds and more
like abstract worlds: when you’re playing Texas Hold’em poker, the state that you’re in
could be the hand that you have, and what cards are on the table, and the actions
could be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;folding&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raising&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checking&lt;/code&gt;. If you only give a reward at the end of the game (eg.
  “I won this hand or I didn’t”), it’s very hard to know how you’re actually
  doing. These problems have much more complicated reward signals (and tbh, states): how players
  are doing, which are staying, how they’re playing, need to be considered.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;otter&quot; alt=&quot;this is otterly rewarding&quot; src=&quot;/images/2018-02-26/2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nerd alert&lt;/strong&gt;: If you’re interested in the math behind this, the environments are usually
represented by a &lt;a href=&quot;https://en.wikipedia.org/wiki/Markov_decision_process&quot;&gt;Markov Decision Process&lt;/a&gt; (MDP), or a &lt;a href=&quot;https://en.wikipedia.org/wiki/Partially_observable_Markov_decision_process&quot;&gt;Partially Observable
Markov Decision Process&lt;/a&gt; (POMDP). The difference between the two is that in the latter case you’re not told
exactly what your state in the world is (you’re a GPS-less Roomba). You still
know what actions you took, and what reward you’re accumulating, but since you
don’t know what they &lt;em&gt;actually&lt;/em&gt; mean in the world, you have to make up your own
representation of it. These are typically harder and weirder problems, and these
were the ones I was focusing my research on, btw!&lt;/p&gt;

&lt;h2 id=&quot;learning-how-to-act&quot;&gt;Learning how to act&lt;/h2&gt;
&lt;p&gt;Ok, so: we’re a Roomba, we’ve been placed somewhere in a world, and we have a
goal: to get home (I think this technically makes us ET, but hey). The thing that
tells us which action to take in a state is our &lt;strong&gt;policy&lt;/strong&gt;. If we can figure out
the best action to take in every state in the world, then we have an &lt;strong&gt;optimal
policy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;otter&quot; alt=&quot;clear eyes, optimal policy, can&apos;t lose&quot; src=&quot;/images/2018-02-26/3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to figure out if a policy is better than another, we need to figure out how “good”
it is to be in a certain state according to that policy (because then you get to compare them:
from this state, one policy leads me to a pot of gold, and one to
sudden death. One is clearly superior). We call this the &lt;strong&gt;value of a state&lt;/strong&gt;,
and it’s basically the reward we &lt;em&gt;expect we’re going to get&lt;/em&gt; from that state if
we follow what the policy tells us to do.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;expected reward&lt;/strong&gt; bit is subtle
but hella important: if you just care about immediate reward, a state that doesn’t lead you
to instant death sounds pretty good! However, if you keep taking these seemingly-ok-because-they-didn’t-kill-us actions,
you might still end up at the edge of the cliff, one step away from instant death. By
considering reward a number of steps away, you don’t get trapped in shitty trajectories like this.&lt;/p&gt;

&lt;p&gt;Most basic RL algorithms try to learn one of these functions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the &lt;strong&gt;state-value function&lt;/strong&gt;, which is the value of every state in the world. This
is usually called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;V&lt;/code&gt; (for value)&lt;/li&gt;
  &lt;li&gt;the &lt;strong&gt;action-value function&lt;/strong&gt;, which is the value of taking an action from a state,
for all actions and states in the world. This is usually called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q&lt;/code&gt; (for qaction? lolmath.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The difference between the two is potentially religious. The &lt;strong&gt;state-value&lt;/strong&gt;
function basically says “where you are in the world is important, so figure out
the sequence of good states and follow that”. The &lt;strong&gt;action-value&lt;/strong&gt; function says “we’re in a state, and
some of the actions we can take are awesome, and some are terribad, figure out the awesome ones”.&lt;/p&gt;

&lt;p&gt;The point of an RL algorithm is to basically learn these functions, and then
pick the one with the highest value: that’s your optimal policy!&lt;/p&gt;

&lt;h2 id=&quot;how-do-we-learn&quot;&gt;How do we learn?&lt;/h2&gt;
&lt;p&gt;We learn things about the world by exploring the world. You can think about it
as roaming the world in “practice mode”, which gives you experience, which helps
you learn what your policy is (what to do in a particular state).
When it’s “exam time mode”, you use the policy you’ve learnt and act according
to that. The more data you have, the better you learn.&lt;/p&gt;

&lt;p&gt;If we think about our &lt;strong&gt;practice policy&lt;/strong&gt; as the way we decided to act
while in practice mode, and our &lt;strong&gt;optimal policy&lt;/strong&gt; as the way we will act during
“exam time” (always be the very best you at exams), then there are
two fundamentally different ways in which you can learn:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;on-policy learning&lt;/strong&gt;: in practice mode, you are following the &lt;strong&gt;practice policy&lt;/strong&gt; to
explore the environment, and learning
how well it works. the more you learn, the better it gets. in “exam time mode”, you still use this &lt;strong&gt;practice policy&lt;/strong&gt; you’ve perfected.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;off-policy learning&lt;/strong&gt;: in practice mode, you are following the &lt;strong&gt;practice policy&lt;/strong&gt; to
explore the environment, and learning what the &lt;strong&gt;optimal&lt;/strong&gt; policy should look like,
based on what you’re discovering. in “exam time mode”, you would use the &lt;strong&gt;optimal policy&lt;/strong&gt;
you’ve been learning.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&quot;otter&quot; alt=&quot;i&apos;m an on policy otter, my policy is to always say yes to food&quot; src=&quot;/images/2018-02-26/4.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;and-now-a-code&quot;&gt;And now, a code!&lt;/h2&gt;
&lt;p&gt;My favourite favourite FAVOURITE thing about AI is that if you
do a simple thing, you can get a very satisfying demo. There are tons of Reinforcement
Learning algorithms out there: some are very complicated and take a lot of math. But
some are very simple, and that’s the one I &lt;a href=&quot;https://glitch.com/edit/#!/q-learning&quot;&gt;implemented&lt;/a&gt; for you.&lt;/p&gt;

&lt;p&gt;It’s called &lt;strong&gt;Q-Learning&lt;/strong&gt;, because it learns the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q&lt;/code&gt; function (if you forgot:
  this is the action-value function, i.e. the value of all of the actions,
  from all of the states). It works like this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Initialize your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q&lt;/code&gt; function randomly (so the value of any action from
    any state is a random number). This bit is important so that you don’t accidentally
    bias your policy with lies&lt;/li&gt;
  &lt;li&gt;Start in a random state (call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;From this state, we need to figure out
  how to move in the world. We’re gonna
  do something slightly fancy called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epsilon-greedy&lt;/code&gt;: most of the time, we’re going to move
  according to what the policy says (“greedily”). However, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epsilon&lt;/code&gt; percent of the time, we’re going to move randomly. This means that we still get to do some random exploration, which
  is important to make sure we see new states we might not otherwise.
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epsilon-greedy&lt;/code&gt; is loooooved by RL people because it balances “exploration” (doing
    things randomly) with “exploitation” (doing things correctly) and you’ll
  find it in like literally every RL paper out there.&lt;/li&gt;
  &lt;li&gt;And…take that action! Once you take it, you’ll end up in a state &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_2&lt;/code&gt;,
  and the world tells you what reward you
  got. Call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt;. We’re going to use this reward to update our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q&lt;/code&gt; function for
  the state we were in, and the action we took; more precisely: we’re going to update our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q(S,A)&lt;/code&gt;
  value. Note how you basically always update the &lt;em&gt;previous&lt;/em&gt; state-action pair, by seeing the
  results of that action in the world.&lt;/li&gt;
  &lt;li&gt;The update step is a bit mathy, so I’ll spare you it (here’s the &lt;a href=&quot;https://glitch.com/edit/#!/q-learning?path=q-learner.js:73:32&quot;&gt;relevant code&lt;/a&gt; if you want
  to check it out), but the TL;DR is: if this action was a good action,
  then the state that we ended up in should be a better state than the one we
  were currently in (closer to the goal). If we got a bad reward, then we reduce
  the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q(S,A)&lt;/code&gt;; if we didn’t, then we increase it.&lt;/li&gt;
  &lt;li&gt;boring note incoming: this is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;off-policy&lt;/code&gt; algorithm. How we calculate the
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q(S,A)&lt;/code&gt; values isn’t affected by how we actually moved in the world; we assume
  we followed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greedy&lt;/code&gt; (aka best) policy, even if we didn’t.&lt;/li&gt;
  &lt;li&gt;Anyway, now, we’re in a new state, so back at Step 2. Repeat Steps 2-6 until you
  end up in a goal state. Once you do (yay!), you can go back to Step 1 and start
  in a new random state (this is important so that you see new parts of the world!).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you do this enough times, you eventually experience enough of the world that
your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q&lt;/code&gt; function will tell you what to do!&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;otter&quot; alt=&quot;get otter here, we otter see a demo!&quot; src=&quot;/images/2018-02-26/5.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;This is a gridworld! It has a goal state, and a blob can move in any direction from
any state. If you press play before doing any learning, the blob will just
walk around randomly. If you press the learn button, the blob will take &lt;a href=&quot;https://glitch.com/edit/#!/q-learning?path=index.html:64:6&quot;&gt;10000 steps&lt;/a&gt;
around the world and learn the optimal policy. I also plotted a heatmap of the Q function (the
  greener the square, the higher its value is). States close to the goal are more important,
  and this makes sense!&lt;/p&gt;

&lt;p&gt;You can check out that glitch, clone it, and play with that
value. If you take far fewer steps (like 5000), you’ll see that your policy isn’t perfect
everywhere around the world (you might see the blob get stuck in circles a lot, far away from the goal,
  because it hasn’t explored that area well enough yet).&lt;/p&gt;
&lt;iframe class=&quot;otter&quot; src=&quot;https://q-learning.glitch.me/&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;p&gt;Hope this was useful! I wanted to write this post because I read this awesome
&lt;a href=&quot;https://www.alexirpan.com/2018/02/14/rl-hard.html&quot;&gt;article&lt;/a&gt; by Alex Irpan about
the problems with Deep Learning, but I didn’t know who to share it with, because
I don’t really hang out with RL researchers anymore. So instead, I decided to
teach you (YES, YOU!) some Reinforcement Learning, so that you can now read
that article and not be lost in it. Yay? Yay!&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/danlizotte&quot;&gt;Dan Lizotte&lt;/a&gt; for reading this, even
though he really didn’t have to.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Automatic visual diffing with Puppeteer</title>
   <link href="https://meowni.ca/posts/2017-puppeteer-tests/"/>
   <updated>2018-01-31T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/2017-puppeteer-tests</id>
   <content type="html">&lt;p&gt;So testing, right? We should do it. The thing is, testing is hard, and good testing
is &lt;em&gt;reaaaaaaally&lt;/em&gt; hard, and tbh I’m pretty bad at testing. So I end up not
testing my apps, and then I feel guilty about it, but I’ll stop you now:
you can’t run guilt on Travis. If this sounds familiar, then this blog post is for you.&lt;/p&gt;

&lt;p&gt;I did a little song-and-dance that sets up &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot;&gt;Puppeteer&lt;/a&gt;*
, takes screenshots of your app (like, all the routes you care about), and
then compares them to the “golden” ones. If they match, your test passes!
Yes, it only works on Chrome. No, it’s not
actually unit testing. Yes, it’s literally just counting pixels but you know what?
It counts them in both a wide and a narrow viewport size and any testing is better
than no testing at all; fight me.&lt;/p&gt;

&lt;p&gt;* Puppeteer is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt; library that lets you control Chrome. You know, like a puppet.
In particular, Puppeteer makes
  it super easy to take screenshots (and click on things in your page). It’s
  like a waaaaaaay less infuriating Selenium, but infinitely harder to spell.&lt;/p&gt;

&lt;p&gt;This post looks long because I’ve put all the code I have so
that you can copy paste it. Skip to the &lt;a href=&quot;#the-thing-that-does-the-diffing&quot;&gt;good&lt;/a&gt; part
if you already know how to test.&lt;/p&gt;

&lt;h2 id=&quot;do-the-npm&quot;&gt;Do the npm&lt;/h2&gt;
&lt;p&gt;If you want to test things with Puppeteer, you have to setup a thing for the
tests, a server that launches your site, and then Puppeteer to look
at that site. I have this in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; to wrangle these things:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;chai&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^4.1.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mocha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^5.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;puppeteer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pixelmatch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^4.0.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;polyserve&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^0.23.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Explanation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I chose Mocha/Chai for testing because that’s what I’m used to. You can
literally use any other testing framework you’re comfortable with; I don’t think it matters.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mapbox/pixelmatch&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pixelmatch&lt;/code&gt;&lt;/a&gt; is the thing that diffs
two images and tells you how many pixels they differ by. It’s super awesome 🏆.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Polymer/polyserve&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polyserve&lt;/code&gt;&lt;/a&gt; is what I use as a local
server. You can use Python or Express or whatever you cool kids use. I’ll
point out in the code where it’s Polyserve specific (literally 2 lines), and you
can sub in your favourite server there.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;set-up-your-test&quot;&gt;Set up your test&lt;/h2&gt;
&lt;p&gt;In order to tell Puppeteer to investigate your site, you need to:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;start a test suite&lt;/li&gt;
  &lt;li&gt;that sets up a local server&lt;/li&gt;
  &lt;li&gt;and in each test tells Puppeteer to do something.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My setup looks like this:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;puppeteer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;puppeteer&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;chai&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;polyserve&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;👀 screenshots are correct&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;polyserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// This is ran when the suite starts up.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This is where you would substitute your python or Express server or whatever.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;polyserve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Create the test directory if needed. This and the goldenDir&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// variables are global somewhere.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;existsSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mkdirSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// And its wide screen/small screen subdirectories.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;existsSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/wide`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mkdirSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/wide`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;existsSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/narrow`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mkdirSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/narrow`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// This is ran when the suite is done. Stop your server here.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;polyserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// This is ran before every test. It&apos;s where you start a clean browser.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;puppeteer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// This is ran after every test; clean up after your browser.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;afterEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Wide screen tests!&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;wide screen&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setViewport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/view1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;takeAndCompareScreenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;view1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;wide&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// And your other routes, 404, etc.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Narrow screen tests are the same, but with a different viewport.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;narrow screen&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setViewport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;375&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;667&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/view1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;takeAndCompareScreenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;view1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;narrow&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// And your other routes, 404, etc.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can test all sort of things here, by the way. Puppeteer lets you interact
with the page (click on buttons, links, etc), so maybe you want to trigger
different UI states before you screenshot them (like narrow view &lt;em&gt;but also&lt;/em&gt; with
  the navigation drawer opened).&lt;/p&gt;

&lt;h2 id=&quot;filling-in-the-blanks&quot;&gt;Filling in the blanks&lt;/h2&gt;
&lt;p&gt;All the heavy lifting (which isn’t very heavy tbh) is done in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeAndCompareScreenshot&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// - page is a reference to the Puppeteer page.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// - route is the path you&apos;re loading, which I&apos;m using to name the file.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// - filePrefix is either &quot;wide&quot; or &quot;narrow&quot;, since I&apos;m automatically testing both.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;takeAndCompareScreenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filePrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// If you didn&apos;t specify a file, use the name of the route.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filePrefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Start the browser, go to that page, and take a screenshot.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;goto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`http://127.0.0.1:4000/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.png`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Test to see if it&apos;s right.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compareScreenshots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;getting-the-golden-screenshots&quot;&gt;Getting the golden screenshots&lt;/h3&gt;
&lt;p&gt;This bit is easy. Make a different test suite (just make sure you don’t run it every time you
run your tests), and run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page.goto&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page.screenshot&lt;/code&gt; lines for all
the routes you’re testing. I recommend doing the viewport dance too, to get both the
wide and narrow screen ones &lt;em&gt;for freeeeee&lt;/em&gt; (I am using just the viewport
  size here, because that’s how my app works. Puppeteer lets yo do &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pageemulateoptions&quot;&gt;device emulation&lt;/a&gt;
  and all sorts of other goodness, so just read the docs). Put all these screenshots in a place; I put mine in
  a folder called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test/screenshots-golden/&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-thing-that-does-the-diffing&quot;&gt;The thing that does the diffing&lt;/h3&gt;
&lt;p&gt;This is the logic in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compareScreenshots&lt;/code&gt;, and it’s basically straight
out of the &lt;a href=&quot;https://github.com/mapbox/pixelmatch#nodejs&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pixelmatch&lt;/code&gt; docs&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compareScreenshots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;img1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createReadStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.png`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PNG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doneReading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;img2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createReadStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;goldenDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.png`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PNG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doneReading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filesRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doneReading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Wait until both files are read.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filesRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// The files should be the same size.&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;image widths are the same&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;image heights are the same&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Do the visual diff.&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PNG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;img1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;img2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numDiffPixels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pixelmatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;img1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;img2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;img1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;img1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// The files should look the same.&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numDiffPixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;number of different pixels&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;-its-all-worth-it&quot;&gt;💯 It’s all worth it&lt;/h2&gt;
&lt;p&gt;Now, when you run your tests (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mocha test/ --timeout 5000&lt;/code&gt; in my case), you get
something like this:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;340&quot; alt=&quot;10/10 passing tests&quot; src=&quot;https://user-images.githubusercontent.com/1369170/35607089-624a2f28-0607-11e8-9448-0af2c40fe31a.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And if it fails, you get an error and the number of pixels you’re off by.&lt;/p&gt;

&lt;h2 id=&quot;️&quot;&gt;⭐️&lt;/h2&gt;
&lt;p&gt;Now go on, navigate to all your routes and test your stuff, and thank me
with a photo of your dog.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>2017: another year in review</title>
   <link href="https://meowni.ca/posts/2017-in-review/"/>
   <updated>2018-01-02T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/2017-in-review</id>
   <content type="html">&lt;p&gt;You can tell I hate writing year in reviews because this one is really, really
late. I tend to hate bragging, and I definitely hate introspective and, in
particular, I always think I am underperforming (and that’s fine). However, that’s usually not true,
and writing a year in review forces me to see the awesome things I did, so even if I did end up
underperforming, at least I can learn from that. That’s the whole point of post-mortems,
  right?&lt;/p&gt;

&lt;p&gt;As usual, here’s life as GitHub saw it. Red text is projects I’ve shipped, black text is
conferences I’ve spoken at. Technically I didn’t speak at Blinkon, but I spoke
&lt;em&gt;to&lt;/em&gt; people at it so hey, counting it.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;2017 contribution graph with project and conferences markers&quot; src=&quot;/images/2017-review/github.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The reason why this post mortem is important to me is that before writing it,
I literally thought this year was bad and I just “did fewer things”. But that’s
not actually true!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I wrote less code than in 2016 (2713 vs 3153 contributions), but that’s totally
irrelevant? GitHub contributions are a fake idea, and I’m the first one
to tell you this, so I don’t know why I get worked up about them every year. I contributed
to weird branches (which don’t get counted), and did a lot of weird explorations that
obviously never got merged. I planned things. I wrote design documents. I reviewed
design documents. I formed strong opinions. I learnt Redux. Eat it, contributions graph.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I gave fewer talks than in 2016 (7 vs 8), but I enjoyed conferences more. I went
to a conference where I only hung out with badass women. I went to Railscamp, where
I had no wifi and canoed and wore a headlamp like a giant dork. I MC-ed Chrome Dev Summit
with Mariko, which was scary, and intimidating and incredibly fun.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I built more side projects (10 vs 9). One of them got
featured in &lt;a href=&quot;https://www.theverge.com/2017/4/20/15331050/party-parrot-tweet-monica-dinculescu-terminal-self-care-github&quot;&gt;The Verge&lt;/a&gt;!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I worked fewer weekends (16 vs 28 days. Goal: 0). And I don’t mean on &lt;em&gt;work-work&lt;/em&gt;,
I mean, &lt;em&gt;at all&lt;/em&gt;. On the weekends I play Stardew Valley, or make pottery,
or knit, or watch an entire season of Riverdale &lt;em&gt;because I can&lt;/em&gt;. Maybe this means
I’ll work on fewer side-things, and maybe this will hurt my career, but it will keep me happier, not burnt out, and less likely to murder my partner. And that’s p important.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I joined the Unicode Emoji committee. YES. Really. It took me a year of emails,
and even now I’m pretty sure I’m the least useful member out of the whole bunch,
but that’s ok, because I can get better!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I became broadly aware of a lot of technical things, but not necessarily
&lt;em&gt;deeply&lt;/em&gt; aware of them. I am really confident I understand Web Components, emoji and web fonts
&lt;em&gt;really well&lt;/em&gt;, but I still don’t really know how any of our polyfills work, or
how to fix a sizeable bug in Polymer, or what to do
about async/await and stuff. In the last couple of months of the year
I started learning more about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http/2 push&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;link rel=preload&lt;/code&gt;, but I feel
it’s a broad sort of understanding. I don’t know yet what kind of person I want to
be: “I understand something &lt;em&gt;really&lt;/em&gt; well in all its intimate aspects which makes me an expert”, or
“I understand many things well enough to have opinions and advice, but not well
enough to be an expert in any of them”. This is the thing I want to figure out this year.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I learnt how to skateboard. I saw one of my favourite bands in concert.
I ordered a coffee entirely in Japanese. I learnt how to
make mugs and bowls and bottles, with my hands. I made new friends, and I didn’t piss off any
of my current ones (that I know of). I nuzzled dogs, and cats, and an otter.
I still didn’t spoil Star Wars. I turned 32.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;2017 instagram top nine&quot; src=&quot;/images/2017-review/instagram.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I don’t do resolutions because they don’t really work for me, but I heard a
good one from a coworker: do 12 &lt;strong&gt;new&lt;/strong&gt; things next year.&lt;/p&gt;

&lt;p&gt;So, I will.&lt;/p&gt;

&lt;h3 id=&quot;️&quot;&gt;❤️ &lt;/h3&gt;

&lt;p&gt;// also available: &lt;a href=&quot;../2016-in-review/&quot;&gt;2016&lt;/a&gt; and &lt;a href=&quot;../a-year-in-review&quot;&gt;2015&lt;/a&gt; years in review,
that were actually on time.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>::part and ::theme, an ::explainer</title>
   <link href="https://meowni.ca/posts/part-theme-explainer/"/>
   <updated>2017-12-18T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/part-theme-explainer</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Updated May 18, 2020&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(get it? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::&lt;/code&gt; ? I made a funny)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://meowni.ca/posts/shadow-dom/&quot;&gt;Shadow DOM&lt;/a&gt; is a spec that gives you DOM and style encapsulation. This is great for reusable &lt;a href=&quot;https://meowni.ca/posts/web-components-with-otters/&quot;&gt;web components&lt;/a&gt;, as it reduces the ability of these components’ styles getting accidentally stomped over (the old &lt;em&gt;“I have a class called “button” and you have a class called “button”, now we both look busted”&lt;/em&gt; problem), but it adds a barrier for styling and theming these components deliberately.&lt;/p&gt;

&lt;p&gt;Since a lot has changed since the &lt;a href=&quot;https://meowni.ca/posts/styling-the-dome/&quot;&gt;last time&lt;/a&gt; I talked about styling the Shadow DOM, I wanted to give you a quick update about what new specs were in the works! Please note that this spec &lt;strong&gt;isn’t&lt;/strong&gt; quite final, which means that a) the syntax and capabilities will likely change and b) there isn’t a polyfill you can use for realsies.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Ok, so. When talking about styling a component, there are usually two different problems you might want to solve:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;💇 Styling:&lt;/strong&gt; I am using a third-party &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;fancy-button&amp;gt;&lt;/code&gt; element on my site and I want this one to be blue&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;🎨 Theming:&lt;/strong&gt; I am using many third-party elements on my site, and some of them have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;fancy-button&amp;gt;&lt;/code&gt;; I want all the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;fancy-button&amp;gt;&lt;/code&gt;s to be blue.&lt;/p&gt;

&lt;p&gt;Here’s almost everything I know on this topic.&lt;/p&gt;

&lt;h2 id=&quot;a-trip-through-time&quot;&gt;A trip through time&lt;/h2&gt;
&lt;p&gt;There have been several previous attempts at solving this, some more successful than others. If you’ve read my &lt;a href=&quot;https://meowni.ca/posts/styling-the-dome/&quot;&gt;last&lt;/a&gt; post about this, you’re already caught up. If you haven’t, here’s the deets:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;First came &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:shadow&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/deep/&lt;/code&gt; (which have since been deprecated, and removed as of Chrome 60). These were shadow-piercing selectors that allowed you to target any node in an element’s Shadow DOM. Apart from being terribad for performance, they also required the user of an element to be intimately familiar with some random element’s implementation, which was unlikely and lead to them just breaking the whole element by accident&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/--*&quot;&gt;Custom properties&lt;/a&gt; allow you to create custom CSS properties that can be used throughout an app. In particular, they pierce the shadow boundary, which means they can be used for styling elements with a Shadow DOM:
If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;fancy-button&amp;gt;&lt;/code&gt; uses a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--fancy-button-background&lt;/code&gt; property to control its background, then:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;fancy-button&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#one&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;--fancy-button-background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* solves the 💇  problem and */&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;fancy-button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;--fancy-button-background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* solves the 🎨  problem */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The problem with using just custom properties for styling/theming is that it places the onus on the element author to basically declare every possible styleable property as a custom property. As a result, &lt;a href=&quot;http://tabatkins.github.io/specs/css-apply-rule/&quot;&gt;@apply&lt;/a&gt; was proposed, which basically allowed a custom property to hold an entire ruleset (a bag of other properties!). &lt;a href=&quot;https://twitter.com/tabatkins&quot;&gt;Tab Atkins&lt;/a&gt; has a very good &lt;a href=&quot;https://www.xanthir.com/b4o00&quot;&gt;post&lt;/a&gt; as to why this approach was abandoned, but the tl;dr; is that it interacted pretty poorly with pseudo classes and elements (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:focus&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:hover&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::placeholder&lt;/code&gt; for input), which still meant the element author would have to define a looooot of these bags of properties to be used in the right places.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;and-now-something-different-but-the-same&quot;&gt;And now: something different but the same&lt;/h2&gt;

&lt;p&gt;The current new proposal is &lt;a href=&quot;https://drafts.csswg.org/css-shadow-parts-1/&quot;&gt;::part&lt;/a&gt; (and possibly later, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::theme&lt;/code&gt;), a set of pseudo-elements that allow you to style inside a shadow tree, from outside of that shadow tree. Unlike &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:shadow&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/deep/&lt;/code&gt;, they don’t allow you to style arbitrary elements inside a shadow tree: they only allow you to style elements that an author has tagged as being eligible for styling. They’ve already gone through the CSS working group and were blessed, and were brought up at TPAC at a Web Components session, so we’re confident they’re both the right approach, and highly likely to be implemented as a spec by all browsers, though there is some discussion of the exact selector syntax still going on.&lt;/p&gt;

&lt;h2 id=&quot;how-part-works&quot;&gt;How ::part works&lt;/h2&gt;
&lt;p&gt;You can specify a “styleable” part on any element in your shadow tree:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;x-foo&amp;gt;&lt;/span&gt;
  #shadow-root
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;part=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some-box&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;part=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some-input&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- not styleable --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/x-foo&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re in a document that has an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;x-foo&amp;gt;&lt;/code&gt; in it, then you can style those parts with:&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;x-foo&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;some-box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You &lt;strong&gt;can&lt;/strong&gt; use other pseudo elements or selectors (that were not explicitly exposed as shadow parts), so both of these work:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;x-foo&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;some-box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;x-foo&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;some-input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::placeholder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You &lt;strong&gt;cannot&lt;/strong&gt; select inside of those parts, so this &lt;strong&gt;doesn’t&lt;/strong&gt; work:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;x-foo&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;some-box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;nor&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;x-foo&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;some-box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;some-other-thing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You &lt;strong&gt;cannot&lt;/strong&gt; style this part more than one level up if you don’t forward it. So without any extra work, if you have an element that contains an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x-foo&lt;/code&gt; like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;x-bar&amp;gt;&lt;/span&gt;
  #shadow-root
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;x-foo&amp;gt;&amp;lt;/x-foo&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/x-bar&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You &lt;strong&gt;cannot&lt;/strong&gt; select and style the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x-foo&lt;/code&gt;’s part like this:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;x-bar&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;some-box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;forwarding-parts&quot;&gt;Forwarding parts&lt;/h3&gt;
&lt;p&gt;You &lt;strong&gt;can&lt;/strong&gt; explicitly forward a child’s part to be styleable outside of the parent’s shadow tree with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exportparts&lt;/code&gt; attribute. So in the previous example, to allow the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some-box&lt;/code&gt; part to be styleable by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x-bar&lt;/code&gt;’s parent, it would have to be exposed:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;x-bar&amp;gt;&lt;/span&gt;
  #shadow-root
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;x-foo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;exportparts=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some-box&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/x-foo&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/x-bar&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exportparts&lt;/code&gt; forwarding syntax has options a-plenty. 🙏 Feel free to skip these if
you’re not interested in the minutiae of the syntax!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exportparts=&quot;some-box some-input&quot;&lt;/code&gt;: explicitly forward &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x-foo&lt;/code&gt;’s parts that you know about (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some-box&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some-input&lt;/code&gt;) as they are. These selectors &lt;strong&gt;would&lt;/strong&gt; match:&lt;/p&gt;

    &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;x-bar&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;some-box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;x-bar&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;some-input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exportparts=&quot;some-input: bar-input&quot;&lt;/code&gt;: explicitly forward (some) of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x-foo&lt;/code&gt;’s parts (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some-input&lt;/code&gt;) but rename them. These selectors &lt;strong&gt;would&lt;/strong&gt; match:&lt;/p&gt;

    &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;x-bar&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;bar-input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;These selectors would &lt;strong&gt;not&lt;/strong&gt; match:&lt;/p&gt;
    &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;x-bar&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;some-box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;x-bar&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;some-input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;x-bar&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;bar-box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You &lt;em&gt;can&lt;/em&gt; combine these, as well as add a part to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x-foo&lt;/code&gt; itself (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some-foo&lt;/code&gt; below. This means “style this particular &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x-foo&lt;/code&gt;, but not the other one, if you had more):&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;x-bar&amp;gt;&lt;/span&gt;
  #shadow-root
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;x-foo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;part=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some-foo&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;exportparts=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some-input: bar-input&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/x-foo&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/x-bar&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-all-buttons-in-this-app-should-be-blue--theming-problem&quot;&gt;The “all buttons in this app should be blue” 🎨 theming problem&lt;/h2&gt;
&lt;p&gt;Given the above prefixing rules, to style all inputs in a document at once, you need to
Ensure that all elements correctly forward their parts and
Select all their parts.&lt;/p&gt;

&lt;p&gt;So given this shadow tree:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;submit-form&amp;gt;&lt;/span&gt;
  #shadow-root
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;x-form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;exportparts=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some-input some-box&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      #shadow-root
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;x-bar&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;exportparts=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some-input some-box&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          #shadow-root
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;x-foo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;exportparts=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some-input some-box&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/x-foo&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/x-bar&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/x-form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/submit-form&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;x-form&amp;gt;&amp;lt;/x-form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;x-bar&amp;gt;&amp;lt;/x-bar&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can style all the inputs with:&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;:root::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;some-input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;👉 This is a lot of effort on the element author, but easy on the theme user.&lt;/p&gt;

&lt;p&gt;If you hadn’t forwarded them with the same name and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some-input&lt;/code&gt; was used at every level of the app (the non contrived example is just an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag that’s used in many shadow roots), then you’d have to write:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;:root::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;form-bar-foo-some-input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;:root::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;bar-foo-some-input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;:root::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;foo-some-input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;:root::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;some-input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;👉 This is a lot of effort on the theme user, but easy on the element author.&lt;/p&gt;

&lt;p&gt;Both of these examples show that if an element author forgot to forward a part, then the app can’t be themed correctly.&lt;/p&gt;

&lt;h2 id=&quot;how-theme-might-work&quot;&gt;How ::theme might work&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::theme&lt;/code&gt; is another pseudoelement originally proposed to pair with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::part&lt;/code&gt;. It matches any parts with that name, anywhere in the document. This means that if you hadn’t forwarded any parts, i.e.:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;x-bar&amp;gt;&lt;/span&gt;
  #shadow-root
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;x-foo&amp;gt;&amp;lt;/x-foo&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;x-foo&amp;gt;&amp;lt;/x-foo&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;x-foo&amp;gt;&amp;lt;/x-foo&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/x-bar&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You could style all of the inputs in x-bar with:&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;x-bar&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::theme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;some-input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This can go arbitrarily deep in the shadow tree. So, no matter how deeply nested they are, you could style all the inputs with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;part=&quot;some-input&quot;&lt;/code&gt; in the app with:&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;:root::theme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;some-input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;As mentioned before, this spec is still in the works and we don’t have a shim that you can use in production. Hell, this shim isn’t even guaranteed to work for all the cases that should work according to the spec, so you should take this code with an enormous iceberg of salt. This is a &lt;a href=&quot;https://part-theme.glitch.me/&quot;&gt;demo&lt;/a&gt; that illustrates styling and theming a bunch of vanilla custom elements in a form.&lt;/p&gt;

&lt;p&gt;Some notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;this shim is meant for a demo prototype of the (still in the works) API. it is a very very very very rough shim, which means its performance is badly in the weeds (don’t use it in production. don’t use it for anything you care about)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;it probably has bugs and doesn’t implement the spec 100%, and nobody will fix these bugs. Again, this shim wasn’t ever meant to be used for realsies&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the shim is implemented as a mixin, which means you can only use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::part&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::theme&lt;/code&gt; inside of a custom element using that mixin (see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;another-form.js&lt;/code&gt;)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Chrome extensions for quick site redesigns</title>
   <link href="https://meowni.ca/posts/extensions/"/>
   <updated>2017-09-20T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/extensions</id>
   <content type="html">&lt;p&gt;There’s this thing I hate about the modern web which is that sites are rarely
one giant html file filled with goodies. You can’t just “run a site” locally.
You need an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt; or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp&lt;/code&gt; step or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; if you’re lucky. And probably
a local server, but not the one you have installed. Which, I mean,
makes sense, because modern web sites are big and powerful and have complicated
front-ends and &lt;em&gt;do&lt;/em&gt; more things than a giant html file would. But
it also kind of sucks because the build ceremonial sacrifices can be a bit overwhelming.
Maybe you just want to see what the links would look like if they didn’t have
underlines. Maybe you want to change the fonts. Maybe you’re never even
going to ship these changes, you just want to get a feel for them.&lt;/p&gt;

&lt;p&gt;Boy, have I got an idea for you: Chrome extensions. Hear me out. A Chrome extension
is a bit of code that runs on a specific page (or set of pages). It can be anything
you want. In particular, it can be a CSS stylesheet.&lt;/p&gt;

&lt;p&gt;Then, re-theming a site is just a matter of installing this Chrome extension. If
you want to share it with people, you can just zip it up and send it around.
It’s obviously not production ready, but it’s amaaaaazing for prototyping.&lt;/p&gt;

&lt;p&gt;I made a &lt;a href=&quot;https://glitch.com/edit/#!/chrome-css-extension&quot;&gt;glitch&lt;/a&gt; project
that gets you started with writing a Chrome extension that injects a CSS stylesheet.
There’s only one thing you need to know: this stylesheet is a &lt;em&gt;User Agent&lt;/em&gt;
stylesheet, which means it has the lowest specificity. So some of its styles
won’t get applied unless you slap some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!important&lt;/code&gt;s on it (or have extra
specific selectors). Or, if you have an ID, you can do my favourite CSS hack ever
that I learnt from &lt;a href=&quot;https://twitter.com/dassurma&quot;&gt;Surma&lt;/a&gt; and will take to the grave:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;#foo#foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* this is a really winner #foo selector */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;That’s it! If you want to see an example of such an extension in the wild, I made &lt;a href=&quot;https://github.com/notwaldorf/picasso&quot;&gt;picasso&lt;/a&gt;,
which is just a pretty Google Calendar theme. Originally it was just a local
extension I kept on my machine, but eventually I published it because I
realized other people may want to give their calendar a bubble bath. Anyway, happy retheming!&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Shadow DOM: fast and encapsulated styles</title>
   <link href="https://meowni.ca/posts/shadow-dom/"/>
   <updated>2017-08-11T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/shadow-dom</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/getting-started/primers/shadowdom&quot;&gt;Shadow DOM&lt;/a&gt; is a fairly recent-ish spec that gives you DOM tree encapsulation – it’s one of the superhero lions in the Voltron of specs called “Web Components”. &lt;a href=&quot;https://www.webcomponents.org/introduction&quot;&gt;Web Components&lt;/a&gt; let you create reusable, self-contained components in JavaScript; the Shadow DOM bit makes sure that the CSS and markup you bundle with your implementation is encapsulated, hiding the implementation details of your element.&lt;/p&gt;

&lt;p&gt;The idea of encapsulation isn’t new – most programming languages have a way to define “private” bits of code – variables or methods that are irrelevant to the user of that object and make the element work. Messing with them usually voids the contract and breaks the guarantee that the element will continue to work. In these languages you could, instead, use a global variable or method for everything. It’s not a question of whether it will work (it will), but whether it will work over time, in a large code base (it won’t). You know it won’t.&lt;/p&gt;

&lt;p&gt;On the web, there’s two kinds of encapsulation we might want: style encapsulation (an element’s styles don’t leak outside) and DOM encapsulation (an element’s internal implementation isn’t visible). This post talks about style encapsulation; tune in soon for the second half of the story – the DOM encapsulation!&lt;/p&gt;

&lt;p&gt;Whew, ok then. So then why is CSS encapsulation so hard? And what’s the fastest way to get it?&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tools-to-the-rescue&quot;&gt;Tools to the rescue!&lt;/h2&gt;

&lt;p&gt;🙏 Before you set me on fire on Twitter, hear this: the next paragraph isn’t a criticism of CSS (which I think is the greatest tool for authoring styles) nor a criticism of the tools we use (which I think fill real gaps we have), but a criticism of the standards process itself.&lt;/p&gt;

&lt;p&gt;I have a theory that developers will put up with too much when it comes to writing CSS. For a while there, CSS wasn’t moving forward, so people started using tools to get around that. We didn’t have variables or mixins, so we started using preprocessors. We didn’t have style encapsulation, so we started naming things “the right way” with BEM, so that we didn’t accidentally stomp over each other’s styles. We wanted to be able to author CSS from inside a JavaScript component, so we started using CSS-in-JS. We needed all these tools, because “the platform” (read: the browsers that be) wasn’t there, and building these tools showed that there was a need to move forward. For style encapsulation, Shadow DOM &lt;strong&gt;is&lt;/strong&gt; the platform moving forward.&lt;/p&gt;

&lt;p&gt;The unsatisfying part of the web is that you don’t have these problems when you build a one page site or app – you have control over your 17 shades of slightly different blue and your custom build pipeline. But when you have big projects, with weird architectures, targeting different platforms and written across different teams, you end up spending a lot of time just setting up infrastructure and build configurations, which kind of sucks.&lt;/p&gt;
&lt;h2 id=&quot;existing-scoping-approaches&quot;&gt;Existing scoping approaches&lt;/h2&gt;
&lt;p&gt;So now that you (maybe) believe me that style encapsulation is a good thing, let’s talk about the bunch of ways in which you can get various degrees of it. They basically come in two flavours: encapsulation by convention or encapsulation with buy-in. Here they are (in my opinion), from least to most effective:&lt;/p&gt;
&lt;h3 id=&quot;1-better-naming-strategies&quot;&gt;1. Better naming strategies&lt;/h3&gt;
&lt;p&gt;“&lt;em&gt;Name your stuff better&lt;/em&gt;” works if you have control over the things you are naming. But if you already do, then you probably don’t need style encapsulation in the first place. You can just…not…do the bad things and the stomping. The problem is that if you’re building a third party widget (say, a fancy date picker that everyone in the universe will have to use), or if you’re building something as part of a large team, you have to be very, very careful not to name it anything that anyone out there might ever call it. Not very scientific.&lt;/p&gt;

&lt;p class=&quot;chunk&quot;&gt;
👍 It’s really easy and doesn’t need tools.&lt;br /&gt;&lt;br /&gt;
👎 It’s really hard if you don’t have tools to enforce it. And doesn’t really work.
&lt;/p&gt;

&lt;h3 id=&quot;2-iframe&quot;&gt;2. &amp;lt;iframe&amp;gt;&lt;/h3&gt;
&lt;p&gt;Ugh, you know it works. Iframes are this special magical portal that teleports any piece of HTML into your piece of HTML, while keeping it wrapped in a safety bubble. But you can’t resize them easily. Or scroll nicely. Or pretend they’re not a teleported piece of code wrapped in a safety bubble. I didn’t even have to doctor this screenshot, it’s real life:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;google search suggestions for &apos;iframes are&apos;&quot; src=&quot;/images/2017-08-11/iframes.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;chunk&quot;&gt;
👍 It’s the most encapsulation and abstraction you will ever get on the web.&lt;br /&gt;&lt;br /&gt;
👎 It’s an iframe.
&lt;/p&gt;

&lt;h3 id=&quot;3-css-modules&quot;&gt;3. CSS modules&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://m.alphasights.com/css-evolution-from-css-sass-bem-css-modules-to-styled-components-d4c1da3a659b&quot;&gt;CSS Modules&lt;/a&gt; are another approach to faking style encapsulation. It’s basically a smart way of automating BEM, so that you don’t have to worry about choosing the unique class names – there’s a tool that does it for you! It works pretty well, since it prevents any potential name collisions you’ve had with BEM, but at the end of the day, it’s not &lt;em&gt;actually&lt;/em&gt; style encapsulation. There’s nothing stopping you from styling any bit of the DOM tree, which means it’s not a very satisfactory answer if you’re in the business of vending, or using, robust third party components.&lt;/p&gt;

&lt;h3 id=&quot;4-css-in-js&quot;&gt;4. CSS-in-JS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.freecodecamp.com/css-in-javascript-the-future-of-component-based-styling-70b161a79a32&quot;&gt;CSS-in-JS&lt;/a&gt; is a new approach that lets you author CSS literally in JavaScript. Then, this JavaScript is basically transmogrified into a style, which means that that style is sort of encapsulated – it’s local to that element, and hard to stomp over. There’s several ways to do this, some better than others:&lt;/p&gt;

&lt;h4 id=&quot;directly-setting-the-style-as-an-attribute&quot;&gt;Directly setting the style as an attribute&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;someElement.style.marginLeft = ‘20px’
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the worst of all the worlds because the CSS parser can do way fewer optimizations and caching than if you used class names, for example (see &lt;a href=&quot;https://twitter.com/notwaldorf/status/859636431974739968&quot;&gt;a benchmark&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&quot;embedding-css-style-strings-in-your-js-output&quot;&gt;Embedding CSS style strings in your JS output&lt;/h4&gt;

&lt;p&gt;Something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div style=”...”&amp;gt;&lt;/code&gt; is still pretty terrible for performance. Browsers (or at least Chrome), do a looooooot of string conversions in this case, which means it at least doubles your memory footprint, because the same string has to live both in V8 and Blink. Here’s what happens behind the scenes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Take the JS off the wire, in whatever encoding your page is in&lt;/li&gt;
  &lt;li&gt;Turn it into whatever encoding V8 prefers, for super optimal memory compactness&lt;/li&gt;
  &lt;li&gt;Scan the JavaScript string&lt;/li&gt;
  &lt;li&gt;Parse the JavaScript string&lt;/li&gt;
  &lt;li&gt;Turn it into an internal string for the DOM when you want to apply the styles&lt;/li&gt;
  &lt;li&gt;Potentially re-encode it if you’re unlucky&lt;/li&gt;
  &lt;li&gt;Take the internal string, pass it to Blink (string copies ahoy!)&lt;/li&gt;
  &lt;li&gt;Blink passes it to the CSS parser, which turns it into styles&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;compiling-out-your-css&quot;&gt;Compiling out your CSS&lt;/h4&gt;

&lt;p&gt;Like, into a separate resource, and then applying styles via classes. This works really well, since you’ve used the browser as it wanted to be used. In comparison to the previous case, for a regular &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; in a CSS stylesheet, the browser has the same string and just passes it around:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Take the CSS off the wire into Blink&lt;/li&gt;
  &lt;li&gt;Tokenize it&lt;/li&gt;
  &lt;li&gt;Build a DOM tree with the string as a text node&lt;/li&gt;
  &lt;li&gt;Parse the text node&lt;/li&gt;
  &lt;li&gt;Pass it to the CSS parser, which turns it into styles&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;chunk&quot;&gt;
👍 Managing a giant amount of styles is nice. Style encapsulation is nice. It works extremely well if you’re using a framework that works well with this.&lt;br /&gt;&lt;br /&gt;
👎 There’s &lt;a href=&quot;https://github.com/MicheleBertoli/css-in-js&quot;&gt;a million&lt;/a&gt; ways to do this, and it’s really overwhelming if you are new to it. This approach tends to also be married to a framework, which makes sharing components hard -- both the user and the author of a component need to agree on &lt;b&gt;both&lt;/b&gt; the framework and the css-in-js style, which isn’t always possible.
&lt;/p&gt;

&lt;h3 id=&quot;4-shadow-dom&quot;&gt;4. Shadow DOM&lt;/h3&gt;
&lt;p&gt;This is a cheap move: you know this article is about the Shadow DOM, and I left it until the end because I obviously think it’s the best. Shadow DOM was literally built to solve the problem of style and DOM encapsulation. It does the same thing that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements have been doing for years (hiding their dirty laundry) but in a way that browsers can optimize around.&lt;/p&gt;

&lt;p&gt;The reason for that is that browsers have a special &lt;strong&gt;style resolver&lt;/strong&gt; for Shadow DOM trees. Apart from being regular CSS that the browser already knows how to optimize, the CSS inside shadow DOM trees only applies inside that element. This means that changing a class name or style inside of a shadow root won’t affect everything outside it. Since you don’t have to consider the rest of the world, this means style resolution and application is much faster.&lt;/p&gt;

&lt;p&gt;The same argument can be made for element authors – since you know that everything inside of your element can’t leak outside, the implementation is much simpler. You don’t have to think about &lt;em&gt;the rest&lt;/em&gt; of the world. You only have to consider your element’s public API, and its implementation.&lt;/p&gt;

&lt;p&gt;Before you complain that using a Shadow DOM and Web Components means that it absolutely requires JavaScript: this is true. But if you’re in a big team, building the kind of big app where you’re looking to style encapsulation as a solution for your CSS bowl of spaghetti, I’m pretty sure you’re already using JavaScript. And the community has been exploring &lt;a href=&quot;https://github.com/skatejs/ssr&quot;&gt;solutions&lt;/a&gt; to server-side rendering Shadow DOM anyway. Tradeoffs be tradeoffs, and this seems like an easy one.&lt;/p&gt;

&lt;p class=&quot;chunk&quot;&gt;
👍 We’ve been complaining that nothing in CSS was helping with style encapsulation and this is &lt;i&gt;literally&lt;/i&gt; the platform’s answer to that problem.&lt;br /&gt;&lt;br /&gt;
👎 Because it’s a new spec, it’s suffering from some growing pains. On older browsers you need a &lt;a href=&quot;https://github.com/webcomponents/shadycss&quot;&gt;polyfill&lt;/a&gt;. If you want reusable elements that are also highly customizable, this style encapsulation might get in the way right now. Thankfully, good people are already working on that. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/--*&quot;&gt;Custom properties&lt;/a&gt; are a new spec meant to address this, and the &lt;a href=&quot;https://tabatkins.github.io/specs/css-shadow-parts/&quot;&gt;new proposal&lt;/a&gt; for theming custom elements is now an &lt;a href=&quot;https://twitter.com/tabatkins/status/893376459091390464&quot;&gt;editor&apos;s draft&lt;/a&gt;!
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The zen of web development is a small page – reusable components, not a lot of code, no wheels reinvented. Encapsulated styles are better for you as a developer (code can be simpler), and better for you as a platform (code can be faster). And without external tools or iframe nightmares, the only way to get this is Shadow DOM.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>PWAs with Polymer: a checklist</title>
   <link href="https://meowni.ca/posts/polymer-pwa-checklist/"/>
   <updated>2017-07-26T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/polymer-pwa-checklist</id>
   <content type="html">&lt;style&gt;
.content img:not(.emoji) {
  border: 1px solid #efefef;
  margin: 24px 0;
}
&lt;/style&gt;

&lt;p&gt;The Meownica Web App Workflow™ goes like this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Write bad code until the file is too long&lt;/li&gt;
  &lt;li&gt;Refactor that code into some web components&lt;/li&gt;
  &lt;li&gt;Repeat steps 1-2 until done&lt;/li&gt;
  &lt;li&gt;Realize you forgot to do the PWA dance, so your app is scoring 45 on &lt;a href=&quot;https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk?hl=en&quot;&gt;Lighthouse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Make it into a PWA by doing basically the same steps every time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’m not joking about step 5. It’s all a bunch of fairly simple boilerplate and
party tricks, that I copy paste from a couple of apps. This time I decided to make
them into a checklist. This checklist is keen on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polymer cli&lt;/code&gt;, because I
usually write apps that use Polymer. If you don’t, you can replace the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polymer cli&lt;/code&gt; with your favourite bundler/service-worker generator!&lt;/p&gt;

&lt;p&gt;If you just want the checklist, &lt;a href=&quot;https://meowni.ca/posts/polymer-pwa-checklist/#checklist&quot;&gt;here&lt;/a&gt; it is. If you want to see &lt;em&gt;how&lt;/em&gt; I made this checklist and how the &lt;a href=&quot;https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk?hl=en&quot;&gt;Lighthouse&lt;/a&gt; score improved as I checked more items off, jump to the &lt;a href=&quot;#step-by-step&quot;&gt;case-study&lt;/a&gt;!&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#checklist&quot; id=&quot;markdown-toc-checklist&quot;&gt;Checklist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-by-step&quot; id=&quot;markdown-toc-step-by-step&quot;&gt;Step by step&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1--add-a-manifestjson&quot; id=&quot;markdown-toc-1--add-a-manifestjson&quot;&gt;1. 📝 Add a manifest.json&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2--bundle-with-the-polymer-cli&quot; id=&quot;markdown-toc-2--bundle-with-the-polymer-cli&quot;&gt;2. 🏃 Bundle with the Polymer CLI&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3--add-a-service-worker&quot; id=&quot;markdown-toc-3--add-a-service-worker&quot;&gt;3. 🤖 Add a Service Worker&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4--fix-first-paint&quot; id=&quot;markdown-toc-4--fix-first-paint&quot;&gt;4. 🎨 Fix first paint&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#-&quot; id=&quot;markdown-toc--&quot;&gt;🆗 🆒&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;checklist&quot;&gt;Checklist&lt;/h2&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; /&gt; generate icons (sizes: 48x48, 96x96, 144x144, 192x192, 512x512) &lt;a href=&quot;https://github.com/PolymerLabs/indie-catalog/tree/master/icons&quot;&gt;[example]&lt;/a&gt;&lt;br /&gt;
&lt;input type=&quot;checkbox&quot; /&gt; add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; &lt;a href=&quot;https://github.com/Polymer/shop/blob/master/manifest.json&quot;&gt;[example]&lt;/a&gt;&lt;br /&gt;
&lt;input type=&quot;checkbox&quot; /&gt; add the rest of the manifesty things to your index.html &lt;a href=&quot;https://github.com/PolymerLabs/indie-catalog/blob/master/index.html#L14&quot;&gt;[example]&lt;/a&gt;&lt;br /&gt;
&lt;input type=&quot;checkbox&quot; /&gt; add the &lt;a href=&quot;https://github.com/Polymer/polymer-cli&quot;&gt;polymer cli&lt;/a&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install -g polymer-cli&lt;/code&gt;&lt;br /&gt;
&lt;input type=&quot;checkbox&quot; /&gt; add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polymer.json&lt;/code&gt; &lt;a href=&quot;https://github.com/Polymer/shop/blob/master/polymer.json&quot;&gt;[example]&lt;/a&gt;&lt;br /&gt;
&lt;input type=&quot;checkbox&quot; /&gt; run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polymer build&lt;/code&gt;&lt;br /&gt;
&lt;input type=&quot;checkbox&quot; /&gt; register your Service Worker &lt;a href=&quot;https://github.com/PolymerLabs/indie-catalog/blob/master/index.html#L102&quot;&gt;[example]&lt;/a&gt;. If you have a complicated app setup or caching strategy, you might want to generate a &lt;a href=&quot;https://github.com/Polymer/shop/blob/master/sw-precache-config.js&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sw-precache-config.js&lt;/code&gt;&lt;/a&gt; file.&lt;br /&gt;
&lt;input type=&quot;checkbox&quot; /&gt; add fallback content while your main element is updating &lt;a href=&quot;https://github.com/PolymerLabs/indie-catalog/blob/master/index.html#L84&quot;&gt;[example]&lt;/a&gt;. As a general rule, I try to match this fallback content very closely to what the first paint of the element will actually be, so that there’s no visual jank&lt;br /&gt;
&lt;input type=&quot;checkbox&quot; /&gt; make sure that your page renders something without JavaScript &lt;a href=&quot;https://github.com/PolymerLabs/indie-catalog/blob/master/index.html#L90&quot;&gt;[example]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Provided your app isn’t outrageously big (think: the only thing that will make
loading 10MB of JavaScript up front better, is not loading 10MB of JavaScript), this should help put you somewhere in the green scores on Lighthouse.&lt;/p&gt;

&lt;h2 id=&quot;step-by-step&quot;&gt;Step by step&lt;/h2&gt;
&lt;p&gt;So, here’s the post-game analysis of what I did to make  &lt;a href=&quot;https://github.com/polymerlabs/indie-catalog&quot;&gt;indie-catalog&lt;/a&gt; into a PWA with a pretty decent Lighthouse score. I didn’t take it all the way to 💯, because the last 5-10 points always end
up being very app specific, and that kind of sorcery is best left for a different blog post.&lt;/p&gt;

&lt;p&gt;It doesn’t particularly matter what my app does – you can think of it as a generic Polymer 2.0 app, with a bunch of Polymer elements, that I have done nothing special to. It doesn’t have a Service
Worker, it doesn’t lazy load anything, it doesn’t bundle or minify any of the loaded code. Its Lighthouse
score is an absolute tragedy (minus that a11y score 🙌):&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;initial Lighthouse score&quot; src=&quot;/images/2017-07-26/before-score.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The PWA section details point to the very straight forward problem of “you have no Service Worker, what did you expect”. TBH, exactly this.
&lt;img alt=&quot;initial Lighthouse PWA section&quot; src=&quot;/images/2017-07-26/before-pwa.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Performance wise, the app is really slow. Because it doesn’t minify any if its sources, it
has to download a lot of things, a lot of times, which is a horrifying experience on 3G:
&lt;img alt=&quot;initial Lighthouse performance section&quot; src=&quot;/images/2017-07-26/before-perf.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1--add-a-manifestjson&quot;&gt;1. 📝 Add a manifest.json&lt;/h3&gt;
&lt;p&gt;This is easy Lighthouse points. This is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; skeleton that I use; replace
your app name and theme colour:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;your-name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;short_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shorter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;start_url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;display&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;standalone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;theme_color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#fbbc05&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;background_color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#fbbc05&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;icons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;icons/icon-192x192.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sizes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192x192&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;icons/icon-512x512.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sizes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;512x512&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then, load it in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;, along with this other absolutely fantastic
platform-specific copy pasta. I’m sure there’s a script out there that
does it for you, but I’ve become so good at copy pasting it that it really doesn’t
matter. Also, it’s not like you do it more than once an app:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icons/favicon.ico&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- See https://goo.gl/OOhYW5 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manifest&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manifest.json&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- See https://goo.gl/qRE0vM --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;theme-color&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#fbbc05&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Add to homescreen for Chrome on Android. Fallback for manifest.json --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mobile-web-app-capable&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application-name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;indie-catalog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Add to homescreen for Safari on iOS --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;black-translucent&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apple-mobile-web-app-title&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;indie-catalog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Homescreen icons --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apple-touch-icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icons/icon-48x48.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apple-touch-icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sizes=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;96x96&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icons/icon-96x96.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apple-touch-icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sizes=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;144x144&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icons/icon-144x144.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apple-touch-icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sizes=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;192x192&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icons/icon-192x192.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Tile icon for Windows 8 (144x144 + tile color) --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;msapplication-TileImage&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icons/icon-144x144.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;msapplication-TileColor&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#fbbc05&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;msapplication-tap-highlight&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The shitty part of this is that you have to generate your icons at 5 different sizes.
But, I told you, it’s easy 💰: once you do this, your PWA score will jump quite a bit (from &lt;strong&gt;45&lt;/strong&gt; to &lt;strong&gt;64&lt;/strong&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;lighthouse score&quot; src=&quot;/images/2017-07-26/after-manifest-and-icons.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2--bundle-with-the-polymer-cli&quot;&gt;2. 🏃 Bundle with the Polymer CLI&lt;/h3&gt;
&lt;p&gt;I use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polymer cli&lt;/code&gt; because it bundles and minifies my sources, and generates a Service Worker for free, and basically solves all of my PWA problems. To install it, run&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g polymer-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to make it go, you need to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polymer.json&lt;/code&gt; file. Here is my starting skeleton:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;entrypoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;fragments&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;some-element.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;maybe-another-element.html&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sources&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;images/**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;i-dont-know-your-directory-structure&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bower.json&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;extraDependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;manifest.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bower_components/webcomponentsjs/*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;builds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;preset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es5-bundled&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;preset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es6-bundled&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;lint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;polymer-2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lint&lt;/code&gt; rule if you don’t want to lint your code. Check the CLI’s
&lt;a href=&quot;https://github.com/Polymer/polymer-cli&quot;&gt;docs&lt;/a&gt; or Polymer shop-app’s &lt;a href=&quot;https://github.com/Polymer/shop/blob/master/polymer.json&quot;&gt;polymer.json&lt;/a&gt;
for more inspiration.
If you don’t plan on conditionally serving different bundles to different browsers
(ahem, IE11), you can also remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;es5&lt;/code&gt; preset.&lt;/p&gt;

&lt;p&gt;Once you have that, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polymer build&lt;/code&gt;, and start serving out of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build/es6-bundled&lt;/code&gt;
directory. Eventually, this will be the directory you’ll actually serve out, so
do a gulp dance or something. 💃🎉🎁.&lt;/p&gt;

&lt;p&gt;Polymer CLI works best if your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; doesn’t have a bunch of imports in it (like &lt;a href=&quot;https://github.com/PolymerLabs/indie-catalog/blob/beab690c1552c8bf7f247a1adbc5b9e45ed5940f/index.html#L39&quot;&gt;this&lt;/a&gt;). If that’s the case, rather than trying to fight the CLI, I recommend re-structuring
your app in an app-shelly way, like &lt;a href=&quot;https://github.com/PolymerLabs/indie-catalog/blob/630b114c5244a7e80d9a33ce51317c00d4c25829/index.html#L56&quot;&gt;this&lt;/a&gt;. I’ve learnt not to fight the tools.&lt;/p&gt;

&lt;p&gt;Anyway, at this point, our Lighthouse score is going to get a little bit worse. Even though this looks bad,
it actually makes sense: we converted our many little downloads into one giant
bundle that we have to wait for, so whatever incremental updates we had are
gone (don’t worry, we fix, we fix). And we still haven’t actually added a Service Worker:
&lt;img alt=&quot;lighthouse score&quot; src=&quot;/images/2017-07-26/after-bundle.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Brief intermission: I (actually &lt;a href=&quot;https://twitter.com/patrickhulce&quot;&gt;Patrick Hulce&lt;/a&gt;) accidentally unearthed a Lighthouse bug, and
significantly improved the performance score by moving a script from the head
to the body. This is prooobably an accident and will be fixed in the future,
but let’s document it for posterity anyway:
&lt;img alt=&quot;lighthouse score&quot; src=&quot;/images/2017-07-26/script-fix-score.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3--add-a-service-worker&quot;&gt;3. 🤖 Add a Service Worker&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polymer cli&lt;/code&gt;, bless its soul, actually generated a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service-worker.js&lt;/code&gt; file for
us, we just haven’t added it anywhere, like our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;serviceWorker&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;service-worker.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this change, Lighthouse is deeeeelighted:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;lighthouse score&quot; src=&quot;/images/2017-07-26/after-sw-score.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The PWA score has improved a lot! It can actually go all the way to 91, but I’m
a) serving from localhost which doesn’t redirect HTTP traffic correctly, and b)
there’s a &lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/issues/2688&quot;&gt;bug&lt;/a&gt; that’s
screwing me out of some money dollars:
&lt;img alt=&quot;lighthouse score&quot; src=&quot;/images/2017-07-26/after-sw-pwa.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The perf score has improved a lot, because Service Workers are caching machines
whos job is to help with perf, but our bundle size is still affecting our first paint.
Look at those screenshots! We wait almost 2.7s before we paint some yellow
on the screen! Surely we can do better:
&lt;img alt=&quot;lighthouse score&quot; src=&quot;/images/2017-07-26/after-sw-perf.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4--fix-first-paint&quot;&gt;4. 🎨 Fix first paint&lt;/h3&gt;
&lt;p&gt;In that screenshot again, we’re getting some
content back pretty fast (the white -&amp;gt; gray transition at 886 ms), but then we show
nothing while the main element, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;cat-alog&amp;gt;&lt;/code&gt;, is upgrading. To get around that,
I like to add fallback content in the light DOM of that main element. This works
because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;cat-alog&amp;gt;&lt;/code&gt; doesn’t have any slots, so once it upgrades, any content between
its opening and closing tags is nuked:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;unresolved&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;x-app&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unresolved&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- This content would be blown away when
  x-app upgrades, because x-app has no slots --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;🙏 pls hold while fetching content&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/x-app&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Usually I try to &lt;a href=&quot;https://github.com/PolymerLabs/indie-catalog/blob/master/index.html#L85&quot;&gt;match&lt;/a&gt; this fallback content to what the element paints
once it upgrades. It’s a little annoying because you can’t always share styles,
but most of the time (in my opinion) results in a better experience.&lt;/p&gt;

&lt;p&gt;For extra bonus points, we can remove that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unresolved&lt;/code&gt; attribute when
the element upgrades:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RenderStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;afterNextRender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;unresolved&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;cm&quot;&gt;/* Other lazy code here */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This last change ends up putting us in the 💚green💚 on Lighthouse!&lt;/p&gt;

&lt;p&gt;The performance of the app is looking pretty great, since we basically
moved first paint to that first downloaded byte:
&lt;img alt=&quot;lighthouse score&quot; src=&quot;/images/2017-07-26/final-perf.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-&quot;&gt;🆗 🆒&lt;/h2&gt;

&lt;p&gt;Final score on the deployed site is a satisfying &lt;strong&gt;A-&lt;/strong&gt; across the board:
&lt;img alt=&quot;lighthouse score&quot; src=&quot;/images/2017-07-26/final-score.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I didn’t try to win the Lighthouse jackpot, because I wanted to see how
far I would get with using &lt;em&gt;just&lt;/em&gt; the Lighthouse instructions and score, without inspecting any of the performance/network tabs in the Dev Tools. My next step would probably be
to see whether lazy loading parts of my app will help, and a long and introspective
look at the Dev Tools Network tabs, to see what downloads I could delay.&lt;/p&gt;

&lt;p&gt;Anyway,
I hope this helped, and that it showed that getting a good Lighthouse score is
mostly ceremony and hardly any goat sacrifices. ❤️&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>An intro to web components with otters</title>
   <link href="https://meowni.ca/posts/web-components-with-otters/"/>
   <updated>2017-06-06T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/web-components-with-otters</id>
   <content type="html">&lt;style&gt;
  img.otter { max-height: 220px !important; }
  iframe.otter {
    height: 250px;
    width: 100%;
    margin: 0 auto;
    border: 5px solid #E0F7FA;
    border-radius: 3px;
  }
  iframe.otter-two {
    width: 100%;
    height: 320px;
    border: 5px solid #E0F7FA;
    border-radius: 3px;
    padding: 0px 10px;
  }
&lt;/style&gt;

&lt;p&gt;&lt;img class=&quot;otter&quot; alt=&quot;everyone keeps talking about web components, but huh?&quot; src=&quot;/images/2017-06-06/1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I work on a library called &lt;a href=&quot;https://www.polymer-project.org/&quot;&gt;Polymer&lt;/a&gt;, which helps you write web components faster and easier. This is awesome, but it’s only awesome if &lt;strong&gt;you&lt;/strong&gt; (yes, YOU) know what a web component is, and know that you want to write one. So here’s a story about what these things are and teaches you how to use them without showing you 10 pages of docs and getting you to install tools and CLIs. Maybe it’s for you. Maybe it isn’t. In either case, it has otters.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#why-should-you-care&quot; id=&quot;markdown-toc-why-should-you-care&quot;&gt;Why should you care?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#thinking-about-your-app&quot; id=&quot;markdown-toc-thinking-about-your-app&quot;&gt;Thinking about your app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#where-do-web-components-live&quot; id=&quot;markdown-toc-where-do-web-components-live&quot;&gt;Where do web components live?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#polyfills-and-you&quot; id=&quot;markdown-toc-polyfills-and-you&quot;&gt;Polyfills and you&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-i-want-to-use-someone-elses-web-component-in-my-app&quot; id=&quot;markdown-toc-1-i-want-to-use-someone-elses-web-component-in-my-app&quot;&gt;1. I want to use someone else’s web component in my app&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-install-the-web-component&quot; id=&quot;markdown-toc-1-install-the-web-component&quot;&gt;1. Install the web component&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#status-check&quot; id=&quot;markdown-toc-status-check&quot;&gt;Status check&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-import-it-in-the-app&quot; id=&quot;markdown-toc-2-import-it-in-the-app&quot;&gt;2. Import it in the app&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-insert-it-somewhere-in-the-app&quot; id=&quot;markdown-toc-3-insert-it-somewhere-in-the-app&quot;&gt;3. Insert it somewhere in the app&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#status-check-1&quot; id=&quot;markdown-toc-status-check-1&quot;&gt;Status check&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-i-want-to-write-a-web-component-to-use-in-my-app&quot; id=&quot;markdown-toc-2-i-want-to-write-a-web-component-to-use-in-my-app&quot;&gt;2. I want to write a web component to use in my app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#thats-all-there-is&quot; id=&quot;markdown-toc-thats-all-there-is&quot;&gt;That’s all there is!&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#-see-you-soon-new-web-component-friends&quot; id=&quot;markdown-toc--see-you-soon-new-web-component-friends&quot;&gt;👋 See you soon, new web component friends!&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-should-you-care&quot;&gt;Why should you care?&lt;/h2&gt;

&lt;p&gt;Web components aren’t a new library or framework, they’re a new browser feature, and they let you write &lt;em&gt;encapsulated&lt;/em&gt; and &lt;em&gt;reusable&lt;/em&gt; &lt;em&gt;components&lt;/em&gt; (more &lt;a href=&quot;https://www.webcomponents.org/introduction&quot;&gt;details&lt;/a&gt;). If you’ve ever used an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element, I like to think of it as the OG web component, because it’s exactly that. The thing
is that before web components came around, you had to wait on all browsers
to agree on a new element (like, a date picker). And even after they agreed
on a new element, it took them yeaaaaars to implement it. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;date&quot;&amp;gt;&lt;/code&gt;
was drafted in 2011 – today, 6 years later, not all browsers
have implemented it! With
web components, &lt;strong&gt;web developers&lt;/strong&gt; get to write such elements, so that you don’t
have to wait for 10 years before all browsers agree that they should implement a date picker.
P cool, right?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;component&lt;/strong&gt; is a bunch of code that fits logically together, kinda like a unit
of functionality. This could be a simple widget like a fancy button or a date picker, or a more complex UI setup like “a responsive blog layout”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Encapsulated&lt;/strong&gt; means that an element’s styles and children are scoped to itself, so you can’t accidentally break what it looks like by using CSS haphazardly in your app&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reusable&lt;/strong&gt; means that if you have a web component, no matter how you wrote it, you should be able to use it in any other app, regardless of how it’s built (eg, a React app). This is different than, say, a React component, which you can’t just use in an Angular app without bringing all of React with you (and in most cases, it won’t even work)
    &lt;ul&gt;
      &lt;li&gt;Using other people’s web components is nice because it means you get to write less code, and you can use someone else’s code. Also, when I say “using web components”, I literally mean
writing something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;emoji-picker&amp;gt;&amp;lt;/emoji-picker&amp;gt;&lt;/code&gt;, that just works out of the box.
Remember, a custom element is just an open source &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; – whatever you can do
with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; you could do with a custom element.&lt;/li&gt;
      &lt;li&gt;Writing your own web component is nice because splitting your app in smaller pieces makes it more manageable. Sharing your own web component with others means that they could write less code and use yours! Sharing is caring &amp;lt;3&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&quot;otter&quot; alt=&quot;so i can write &amp;lt;emoji-picker&amp;gt;, yay!&quot; src=&quot;/images/2017-06-06/2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You write web components in ES6 JavaScript. Polymer is a JavaScript library that’s like jQuery for web components – you import it, it gives you a bunch of helper functions and saves you writing a lot of boilerplate code.&lt;/p&gt;

&lt;p&gt;Also, bad habit: people (and me, I am those people) tend to use “custom element” and “web component” interchangeably. If you’re pedantic, they mean different things. Don’t be pedantic, it makes the otters sad.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;otter&quot; alt=&quot;sad otter because it&apos;s getting well-actuallied&quot; src=&quot;/images/2017-06-06/3.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;thinking-about-your-app&quot;&gt;Thinking about your app&lt;/h2&gt;

&lt;p&gt;If you’re starting to think about using web components in your app, there’s basically 2 situations you could be in, and I tend to reason about each differently&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I want to use someone else’s web component in my app&lt;/li&gt;
  &lt;li&gt;I want to write a web component to use in my app&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There’s other things that you might eventually care about, such as making your application production ready, and improving its performance. They are super important topics, but if you’ve never used a web component before, they’re also not the most important topics for you &lt;strong&gt;right now&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;otter&quot; alt=&quot;is this magic? nah it&apos;s prolly just undocumented code&quot; src=&quot;/images/2017-06-06/4.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;where-do-web-components-live&quot;&gt;Where do web components live?&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;otter&quot; alt=&quot;in otter space!&quot; src=&quot;/images/2017-06-06/5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Web components tend to have dependencies on other web components, so you need a package manager to herd all them cats. Most of the web components out there use &lt;a href=&quot;https://bower.io/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower&lt;/code&gt;&lt;/a&gt;. Another popular one is &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; – you could think of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt; as a package manager for your server code and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower&lt;/code&gt; for your client, and it wouldn’t be entirely incorrect.&lt;/p&gt;

&lt;p&gt;The reason why you need a package manager and not just “download this element in a zip file” is that unless that element is really simple, it might have dependencies, and they’ll have dependencies, and that’s a thing for machines and not otters. If you really don’t want to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower&lt;/code&gt;, then you’ll have to sort out flattening your dependency tree on your own using something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webpack&lt;/code&gt;. This is not the tutorial for you.&lt;/p&gt;

&lt;p&gt;If you look up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower&lt;/code&gt; on the web you’ll hear things like “but bower is deprecated now” (which is true, but it’s also been unmaintained for like a year and it worked fine, so nothing is really new on that front) and “but why not npm” (because you can only have one version of the same web component in your app, and that’s hard if your dependency tree is not flat. You probably don’t actually care this).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;otter&quot; alt=&quot;attenshun attenshun installation instructions&quot; src=&quot;/images/2017-06-06/6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To &lt;a href=&quot;https://bower.io/#install-bower&quot;&gt;install&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower&lt;/code&gt;, a package manager, you must first install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt;, a package manager. Take a moment for a concerned sigh, but install it anyway. Upshot: I promise this is the only tool I will ask you to install.&lt;/p&gt;

&lt;p&gt;If you want to find otter web components, &lt;a href=&quot;https://www.webcomponents.org/&quot;&gt;WebComponents.org&lt;/a&gt; is a universal catalog of web components (but not a package manager, because that would be cray). Go check it out.&lt;/p&gt;

&lt;h2 id=&quot;polyfills-and-you&quot;&gt;Polyfills and you&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;otter&quot; alt=&quot;anotter digression&quot; src=&quot;/images/2017-06-06/7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Not all browsers implement features at the same rate, which means while you’re waiting for them to catch up, you need to care about polyfills. Fun fact: you know how when you have a hole in a wall, you have to put spackling paste in it to make the wall look like a wall again? Polyfilla is a brand of spackling, and that’s exactly what a polyfill is – it fills a hole in the browser, so that it looks even from the outside.&lt;/p&gt;

&lt;p&gt;You have two choices:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ignore polyfills for now and just use Chrome to test your app, but know it’s going to be hella broken on other browsers&lt;/li&gt;
  &lt;li&gt;Care about polyfills, and include the &lt;a href=&quot;https://github.com/webcomponents/webcomponentsjs&quot;&gt;polyfill&lt;/a&gt; in your app. Spoilers: it’s just a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script src=&quot;some-path/webcomponents-lite.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; include.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;in your applications’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag
&lt;img class=&quot;otter&quot; alt=&quot;whadya think? we otter get to the code!&quot; src=&quot;/images/2017-06-06/8.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-i-want-to-use-someone-elses-web-component-in-my-app&quot;&gt;1. I want to use someone else’s web component in my app&lt;/h2&gt;
&lt;p&gt;Ok cool, so here we are. You have a web site, and you want to use someone else’s web widget in it. Let’s say that thing is &lt;a href=&quot;https://www.webcomponents.org/element/PolymerElements/paper-button&quot;&gt;paper-button&lt;/a&gt; which is a super fancy looking Material Design button. It’s beauty and it’s grace, it’s Miss United States.&lt;/p&gt;

&lt;p&gt;Here is a &lt;a href=&quot;https://glitch.com/edit/#!/use-custom-element&quot;&gt;glitch app&lt;/a&gt; if you want to follow along at home. Glitch is an online code editor, where you can build apps and modify other people’s – which is why it’s great for this example!&lt;/p&gt;

&lt;p&gt;We need to do 3 things:&lt;/p&gt;

&lt;h3 id=&quot;1-install-the-web-component&quot;&gt;1. Install the web component&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We do this by adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependency&lt;/code&gt; to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower.json&lt;/code&gt; file. If you don’t already have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower.json&lt;/code&gt; file (who can blame you), create one by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower init&lt;/code&gt;, and answering the wizard’s questions. They kind of look like this, though, spoiler alert: there’s no actual wizard 😭
  &lt;img class=&quot;otter&quot; alt=&quot;screenshot of the bower init wizard&quot; src=&quot;/images/2017-06-06/9.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paper-button&lt;/code&gt; as a dependency, you can either run
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower install --save PolymerElements/paper-button#^2.0.0&lt;/code&gt;
 or by manually adding it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower.json&lt;/code&gt; file in its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; section:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;dependencies&quot;: {
  &quot;paper-button&quot;: &quot;PolymerElements/paper-button#^2.0.0&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Because I promised you no magic: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;^2.0.0&lt;/code&gt; just means “the latest version between 2.0.0 to 3.0.0”. The reason I picked that version is that it’s the latest one.&lt;/li&gt;
  &lt;li&gt;If you manually added the element to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower.json&lt;/code&gt;, you need to actually install it, so run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower install&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;status-check&quot;&gt;Status check&lt;/h3&gt;
&lt;p&gt;Right now you should have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower_components&lt;/code&gt; folder created, that contains a whole bunch of folders, one of which is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paper-button&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;2-import-it-in-the-app&quot;&gt;2. Import it in the app&lt;/h3&gt;
&lt;p&gt;This basically tells the browser where to find the definition for what this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paper-button&lt;/code&gt; tag is.&lt;/p&gt;

&lt;p&gt;Much like how you import a CSS stylesheet with&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/style.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You import a web component with an &lt;strong&gt;HTML import&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bower_components/paper-button/paper-button.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-insert-it-somewhere-in-the-app&quot;&gt;3. Insert it somewhere in the app&lt;/h3&gt;
&lt;p&gt;Drop a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;paper-button&amp;gt;Click me&amp;lt;/paper-button&amp;gt;&lt;/code&gt; somewhere in your html page.&lt;/p&gt;

&lt;h3 id=&quot;status-check-1&quot;&gt;Status check&lt;/h3&gt;
&lt;p&gt;Your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; should basically look like this:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Load the polyfill so that the demo works everywhere --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bower_components/webcomponentsjs/webcomponents-lite.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Import the custom element so that the browser knows what it means --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bower_components/paper-button/paper-button.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Oh, hi there&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Have you seen this fancy button?&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Use the custom element! --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;paper-button&amp;gt;&lt;/span&gt;Click me&lt;span class=&quot;nt&quot;&gt;&amp;lt;/paper-button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See that line about loading the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webcomponents-lite&lt;/code&gt; polyfill? That’s the bit
that makes the demo work in browsers that don’t have web components yet 😎.
If you want to see what your app looks like without the polyfill, just comment
out that line and open your app in something like Firefox! It’s a good thing
to try out.&lt;/p&gt;

&lt;p&gt;If we run that demo, it should look like this, plus or minus some
copy and styles that I’ve added:&lt;/p&gt;
&lt;iframe class=&quot;otter&quot; src=&quot;https://use-custom-element.glitch.me/&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now, say it together with the otters!
&lt;img class=&quot;otter&quot; alt=&quot;bower summary&quot; src=&quot;/images/2017-06-06/10.png&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You could, of course, add JavaScript to that custom element, like you would
with any other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. I could’ve added something like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;paper-button&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;you did a click!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-i-want-to-write-a-web-component-to-use-in-my-app&quot;&gt;2. I want to write a web component to use in my app&lt;/h2&gt;

&lt;p&gt;Now that we know how to import someone else’s custom element, let’s write our own! Up until now we haven’t actually talked about Polymer at all. You can totally write web components &lt;em&gt;without&lt;/em&gt; Polymer; you’ll just have to write a lot more boilerplate, and I don’t want that to turn you off web components.&lt;/p&gt;

&lt;p&gt;The Polymer site actually has an awesome &lt;a href=&quot;https://www.polymer-project.org/2.0/start/first-element/intro&quot;&gt;getting started&lt;/a&gt; tutorial, if you’d rather read that. But while I have you here, you’ll get the otter way.&lt;/p&gt;

&lt;p&gt;In Polymer, every custom element is like a taco (bear with me). There’s something called a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dom-module&lt;/code&gt; (which is actually a custom element itself) that holds 2 things in it:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt;, or what your element looks like (html and css). A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt; is an HTML element that’s inert – when the browser sees it, it skips it and doesn’t render it&lt;/li&gt;
  &lt;li&gt;a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, which is what your element does&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Sidebar&lt;/strong&gt;: This is one of the advantages of using Polymer – without
Polymer, you’d have to construct all your HTML and CSS in JavaScript, and somehow
add it to your custom element. Polymer makes it easier for you to point at
an implementation, and at a bunch of HTML/CSS and say “that look goes with that code”.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
We add all our code to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt; file (because remember: we’re going to do an HTML import to bring it in our app later). It ends up looking like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-element&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Any CSS your element needs for styling --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;/* This is a special selector that styles the element itself */&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;:host&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;/* Use the usual CSS selectors for its children */&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;tomato&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- that &amp;lt;p&amp;gt; style there applies here --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I should be a nice red!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Every custom element is an ES6 class.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This is the implementation of the element.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Every custom element needs to be registered.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This tells the browser that the &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;happy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// tag uses _this_ implementation.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;customElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I tend to put one element per &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt; file, and then name the file after the tag of the element,
so I can keep track of it. I would save that into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my-element.html&lt;/code&gt; file, and then import it in our app, just as before with:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-element.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
Now, what goes &lt;em&gt;inside&lt;/em&gt; your custom element is really up to you. The way I write elements is&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;by either knowing ahead of time what that element should do (“I need an emoji-picker, so
it should be a text field with a button and when you click on that button, you get a list of emoji”),&lt;/li&gt;
  &lt;li&gt;or I am working on the app, and at some point there’s just too much HTML/CSS in the same place that looks like it can just be modularized away (“oh, all this code just deals with writing a tweet, it should probably just go into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;new-tweet&amp;gt;&lt;/code&gt; element”)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a slightly more complicated example, I made a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;happy-thing&amp;gt;&lt;/code&gt; element in this
&lt;a href=&quot;https://glitch.com/edit/#!/polymer-custom-element&quot;&gt;glitch app&lt;/a&gt; (check out the
  &lt;a href=&quot;https://glitch.com/edit/#!/polymer-custom-element?path=public/happy-thing.html:1:0&quot;&gt;code&lt;/a&gt;). It basically takes whatever content you give to it, and when you hover over, it does a little shimmy animation:&lt;/p&gt;

&lt;iframe class=&quot;otter-two&quot; src=&quot;https://polymer-custom-element.glitch.me/&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;
I also made that element with &lt;a href=&quot;https://glitch.com/edit/#!/simple-custom-element&quot;&gt;plain JavaScript&lt;/a&gt;, without Polymer, if you want to compare it. You’ll notice the second example has a lot more boilerplate code,
which Polymer abstracted out for you.&lt;/p&gt;

&lt;h2 id=&quot;thats-all-there-is&quot;&gt;That’s all there is!&lt;/h2&gt;
&lt;p&gt;I hope this helped! I’m going to write another post in more detail about &lt;em&gt;actually&lt;/em&gt;
getting started with Polymer, and what kind of things you can do with it soon!
In the meantime, here’s some other links to get you going:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google developers &lt;a href=&quot;https://developers.google.com/web/fundamentals/getting-started/primers/customelements&quot;&gt;blog post&lt;/a&gt; on
custom elements&lt;/li&gt;
  &lt;li&gt;The Polymer &lt;a href=&quot;https://www.polymer-project.org/2.0/start/&quot;&gt;getting started&lt;/a&gt; tutorial&lt;/li&gt;
  &lt;li&gt;The Polymer &lt;a href=&quot;https://www.polymer-project.org/2.0/start/quick-tour&quot;&gt;quick tour&lt;/a&gt; of features&lt;/li&gt;
  &lt;li&gt;A Polymer &lt;a href=&quot;https://meowni.ca/posts/polymer-2-cheatsheet/&quot;&gt;cheat sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Polymer &lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/feature-overview&quot;&gt;docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&quot;otter&quot; alt=&quot;let me know if this was useful to you! cause i&apos;m otter here&quot; src=&quot;/images/2017-06-06/11.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-see-you-soon-new-web-component-friends&quot;&gt;👋 See you soon, new web component friends!&lt;/h3&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Polymer 2.x Cheat Sheet</title>
   <link href="https://meowni.ca/posts/polymer-2-cheatsheet/"/>
   <updated>2017-05-31T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/polymer-2-cheatsheet</id>
   <content type="html">&lt;style&gt;
.highlight .err {
  color: inherit;
  background-color: inherit;
}
.highlight .s1, .highlight .s {
  color: #336699;
  background: inherit;
}
pre {
  margin-bottom: 30px;
}
pre, code {
  background: #f4f6f8;
}
p &gt; code, li &gt; code {
  font-weight: bold;
}
pre {
  border-bottom: solid 1px #CFD8DC;
}
&lt;/style&gt;

&lt;p&gt;This is a cheat sheet for the &lt;a href=&quot;https://www.polymer-project.org/&quot;&gt;Polymer 2.x&lt;/a&gt; library.
If you’re looking for the Polymer 1.x cheat sheet, it is &lt;a href=&quot;../polymer-cheatsheet/&quot;&gt;here&lt;/a&gt;. If you think something
is missing from this page, &lt;a href=&quot;https://twitter.com/intent/tweet?original_referer=https%3A%2F%2Fmeowni.ca%2F&amp;amp;ref_src=twsrc%5Etfw&amp;amp;text=@notwaldorf%20Polymer%202%20cheat%20sheet%20feature%20request:&quot;&gt;tell me&lt;/a&gt; about it!&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#defining-an-element&quot; id=&quot;markdown-toc-defining-an-element&quot;&gt;Defining an element&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#extending-an-element&quot; id=&quot;markdown-toc-extending-an-element&quot;&gt;Extending an element&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#defining-a-mixin&quot; id=&quot;markdown-toc-defining-a-mixin&quot;&gt;Defining a mixin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lifecycle-methods&quot; id=&quot;markdown-toc-lifecycle-methods&quot;&gt;Lifecycle methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#data-binding&quot; id=&quot;markdown-toc-data-binding&quot;&gt;Data binding&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#observers&quot; id=&quot;markdown-toc-observers&quot;&gt;Observers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#listeners&quot; id=&quot;markdown-toc-listeners&quot;&gt;Listeners&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#properties-block&quot; id=&quot;markdown-toc-properties-block&quot;&gt;Properties block&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#observing-added-and-removed-children&quot; id=&quot;markdown-toc-observing-added-and-removed-children&quot;&gt;Observing added and removed children&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#style-modules&quot; id=&quot;markdown-toc-style-modules&quot;&gt;Style modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#styling-with-custom-properties-and-mixins&quot; id=&quot;markdown-toc-styling-with-custom-properties-and-mixins&quot;&gt;Styling with custom properties and mixins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#binding-helper-elements&quot; id=&quot;markdown-toc-binding-helper-elements&quot;&gt;Binding helper elements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;defining-an-element&quot;&gt;Defining an element&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/2.0/docs/upgrade&quot;&gt;1.x -&amp;gt; 2.x upgrade guide&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/registering-elements&quot;&gt;registering an element&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/style-shadow-dom#style-modules&quot;&gt;shared style modules&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bower_components/polymer/polymer-element.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;element-name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Use one of these style declarations, but not both --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Use this if you don’t want to include a shared style --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Use this if you want to include a shared style --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some-style-module-name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;element-name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// All of these are optional. Only keep the ones you need.&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Associate the new class with an element name&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;customElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To get the class definition for a particular custom tag, you can use
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;customElements.get(&apos;element-name&apos;)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;extending-an-element&quot;&gt;Extending an element&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/custom-elements#extending-other-elements&quot;&gt;extending elements&lt;/a&gt;, &lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/dom-template#inherited-templates&quot;&gt;inherited templates&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polymer.Element&lt;/code&gt;, a custom element can extend a different element):&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParentElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ChildElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParentElement&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To change or add to the parent’s template, override the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;template&lt;/code&gt; getter:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;child-element&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;bonus!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DomModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;child-element&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cloneNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Or however you want to assemble these.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;childTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ChildElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParentElement&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;child-element&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Note: the more work you do here, the slower your element is to&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// boot up. You should probably do the template assembling once, in a&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// static method outside your class (like above).&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;customElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ChildElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ChildElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you don’t know the parent class, you can also use:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ChildElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;parent-element&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;defining-a-mixin&quot;&gt;Defining a mixin&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/custom-elements#mixins&quot;&gt;mixins&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/hybrid-elements&quot;&gt;hybrid elements&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Defining a class expression mixin to share implementation between different elements:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;MyMixin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;superClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Code that you want common to elements.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// If you&apos;re going to override a lifecycle method, remember that a) you&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// might need to call super but b) it might not exist&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;connectedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connectedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connectedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using the mixin in an element definition:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;element-name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This could also be a sequence:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//class MyElement extends AnotherMixin(MyMixin(Polymer.Element)) { … }&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;element-name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;customElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using hybrid behaviors (defined in the 1.x syntax) as mixins:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;element-name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mixinBehaviors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyBehavior2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;element-name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;customElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;element-name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;lifecycle-methods&quot;&gt;Lifecycle methods&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/custom-elements#element-lifecycle&quot;&gt;lifecycle callbacks&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/custom-elements#one-time-initialization&quot;&gt;ready&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;connectedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connectedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;disconnectedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disconnectedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;attributeChangedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attributeChangedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;data-binding&quot;&gt;Data binding&lt;/h2&gt;
&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/data-binding&quot;&gt;data binding&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/data-binding#attribute-binding&quot;&gt;attribute binding&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/data-binding#bind-array-item&quot;&gt;binding to array items&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/data-binding#annotated-computed&quot;&gt;computed bindings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don’t forget: Polymer &lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/properties#property-name-mapping&quot;&gt;camel-cases&lt;/a&gt; properties, so if in JavaScript you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myProperty&lt;/code&gt;,
in HTML you would use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my-property&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One way&lt;/strong&gt; binding: when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myProperty&lt;/code&gt; changes, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;theirProperty&lt;/code&gt; gets updated:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;some-element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;their-property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[[myProperty]]&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/some-element&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Two way&lt;/strong&gt; binding: when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myProperty&lt;/code&gt; changes, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;theirProperty&lt;/code&gt; gets updated,
and vice versa:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;some-element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;their-property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{myProperty}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/some-element&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Attribute binding&lt;/strong&gt;: when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myProperty&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, the element is hidden; when it’s
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;, the element is visible. The difference between attribute and property
binding is that property binding is equivalent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;someElement.someProp = value&lt;/code&gt;,
whereas attribute binding is equivalent to: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;someElement.setAttribute(someProp, value)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;some-element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$=&quot;[[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myProperty&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]]&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/some-element&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Computed binding&lt;/strong&gt;: binding to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; attribute will recompile styles when
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myProperty&lt;/code&gt; changes:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;some-element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$=&quot;[[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_computeSomething&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myProperty&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)]]&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/some-element&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;_computeSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;a-class-name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;another-class-name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;observers&quot;&gt;Observers&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/observers&quot;&gt;observers&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/observers#multi-property-observers&quot;&gt;multi-property observers&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/observers#array-observation&quot;&gt;observing array mutations&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/observers#dynamic-observers&quot;&gt;adding observers dynamically&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Adding an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;observer&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties&lt;/code&gt; block lets you observe changes in the
value of a property:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;myProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_myPropertyChanged&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// The second argument is optional, and gives you the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// previous value of the property, before the update:&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;_myPropertyChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*oldValue */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;observers&lt;/code&gt; block:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_doSomething(myProperty)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_multiPropertyObserver(myProperty, anotherProperty)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_observerForASubProperty(user.name)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Below, items can be an array or an object:&apos;&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_observerForABunchOfSubPaths(items.*)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Adding an observer dynamically for a property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;otherProperty&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Define a method&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;_otherPropertyChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Call it when `otherPropety` changes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_createPropertyObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;otherProperty&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_otherPropertyChanged&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;listeners&quot;&gt;Listeners&lt;/h2&gt;
&lt;p&gt;In Polymer 2.0, we recommend that rather than using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;listeners&lt;/code&gt; block,
you #useThePlatform and define event listeners yourself:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;some-event&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://github.com/Polymer/polymer/pull/4632&quot;&gt;PR&lt;/a&gt; out to add a
declarative listener block as a mixin. Stay tuned!&lt;/p&gt;

&lt;h2 id=&quot;properties-block&quot;&gt;Properties block&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/properties&quot;&gt;declared properties&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/properties#configuring-object-and-array-properties&quot;&gt;object/array properties&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/properties#read-only&quot;&gt;read-only properties&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/observers#computed-properties&quot;&gt;computed properties&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/observers#add-a-computed-property-dynamically&quot;&gt;adding computed properties dynamically&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are all the possible things you can use in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties&lt;/code&gt;
block. Don’t just use all of them because you can; some (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reflectToAttribute&lt;/code&gt;
  and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notify&lt;/code&gt;) can have performance implications.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;basic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Default value of the property can be one of the types above, eg:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// For an Array or Object, you must return it from a function&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// (otherwise the array will be defined on the prototype&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// and not the instance):&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cheese&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pepperoni&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;more-cheese&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

      &lt;span class=&quot;na&quot;&gt;reflectToAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Computed properties are essentially read-only, and can only be&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// updated when their dependencies change.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;basicComputedProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_someFunction(myProperty, anotherProperty)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Adding a computed property dynamically:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_createComputedProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;newProperty&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_computeNewProperty(prop1,prop2)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;observing-added-and-removed-children&quot;&gt;Observing added and removed children&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/shadow-dom#shadow-dom-and-composition&quot;&gt;Shadow DOM distribution&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/upgrade#polymer-dom-apis&quot;&gt;observe nodes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have a content node for distribution:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And you want to be notified when nodes have been added/removed:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- You need to import the observer --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bower_components/polymer/lib/utils/flattened-nodes-observer.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;connectedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connectedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_observer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FlattenedNodesObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// info is {addedNodes: [...], removedNodes: [...]}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;disconnectedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disconnectedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;style-modules&quot;&gt;Style modules&lt;/h2&gt;
&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/style-shadow-dom#style-modules&quot;&gt;shared style modules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Defining styles that will be shared across different elements, in a file called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my-shared-styles.html&lt;/code&gt; (for example):&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-shared-styles&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;.red&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;/* Custom property defined in the global scope */&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;--the-best-red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#e91e63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Include the shared style in a custom element:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-shared-styles.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;element-name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-shared-styles&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;/* Other styles in here */&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Include the shared style in the main document:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Import the custom-style element --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;components/polymer/lib/elements/custom-style.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-shared-styles.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;custom-style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-shared-styles&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;/* Other styles in here */&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/custom-style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;styling-with-custom-properties-and-mixins&quot;&gt;Styling with custom properties and mixins&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/style-shadow-dom&quot;&gt;styling&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/custom-css-properties&quot;&gt;CSS properties&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/custom-css-properties#use-custom-css-mixins&quot;&gt;CSS mixins&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/custom-css-properties#custom-properties-shim-limitations&quot;&gt;shim limitations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that the examples below depend on browser support for custom properties and mixins.&lt;/p&gt;

&lt;p&gt;Defining a custom property:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* or :host etc. */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--my-custom-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using a custom property:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.my-image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--my-custom-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using a custom property with a fallback:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.my-image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--my-custom-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using a custom property with a custom property fallback:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.my-image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--my-custom-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--my-fallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to use mixins, you need to include the CSS mixins shim.
For how to use the shim and its limitations, check the docs linked at the
beginning of the section.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bower_components/shadycss/apply-shim.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Defining a mixin:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;some-custom-element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--my-custom-mixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using a mixin:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.my-image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;@apply&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;--my-custom-mixin;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;binding-helper-elements&quot;&gt;Binding helper elements&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/templates#dom-repeat&quot;&gt;dom-repeat&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/templates#dom-bind&quot;&gt;dom-bind&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/templates#dom-if&quot;&gt;dom-if&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are two ways to use the helper elements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;inside a Polymer element/Polymer managed template: just use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;template is=...&amp;gt;&lt;/code&gt;
syntax, without the wrapper, for example:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dom-repeat&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;outside of a Polymer managed template: use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;dom-...&amp;gt;&lt;/code&gt; wrapper element
around a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt;, for example:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-repeat&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-repeat&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dom-repeat&lt;/code&gt; stamps and binds a template for each item in an array:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;components/polymer/lib/elements/dom-repeat.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-repeat&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;items=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[[employees]]&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;First name: &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;[[item.first]]&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Last name: &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;[[item.last]]&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-repeat&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dom-bind&lt;/code&gt; stamps itself into the main document and adds a binding scope:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;components/polymer/lib/elements/dom-bind.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-bind&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;paper-input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{myText}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/paper-input&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;You typed: [[myText]]&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-bind&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dom-if&lt;/code&gt; stamps itself conditionally based on a property’s value:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;components/polymer/lib/elements/dom-if.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[[myProperty]]&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;This content will appear when myProperty is truthy.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-if&amp;gt;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>2016: another year in review</title>
   <link href="https://meowni.ca/posts/2016-in-review/"/>
   <updated>2016-12-21T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/2016-in-review</id>
   <content type="html">&lt;p&gt;This year was pretty shit, so I wasn’t very keen on doing
one of these posts. So many of my favourite musicians died, so many of my
favourite countries made mistakes, so many of my favourite people are worried and
sad, and I am worried and sad with them. But this year was not the worst year
we’ve ever had, or might ever have, so I will tell
you the good parts of my year. Maybe you’ll tell me the good parts of yours,
and then for 3 minutes we will be less worried and sad, together. ❤️&lt;/p&gt;

&lt;p&gt;Here’s life as GitHub saw it. Red text is dumb projects I’ve shipped (you can
  tell because the names don’t make sense), black text is
conferences I’ve spoken at:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;2016 contribution graph with project and conferences markers&quot; src=&quot;/images/2016-review/github.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I first looked at this graph I freaked out,
because it looks like I did very little until April. Then someone reminded me
that I have a job that isn’t writing emoji apps, so I probably
just you know, went to work and had normal evening hobbies like playing The Sims
and hanging out with my cat. It just takes 4 months before I get antsy.&lt;/p&gt;

&lt;p&gt;Here’s life as Instagram saw it. I’ve apparently started taking a lot more
selfies, which is either pretty vain or slightly more self confident, or let’s be
honest, neither. This is also the first year when I took a lot of photos with my nice camera
when traveling, but didn’t have the energy to process or post any of them. Shit
happens.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;2016 contribution graph&quot; src=&quot;/images/2016-review/instagram.png&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;🛫✨🛬&lt;/h2&gt;
&lt;p&gt;I love traveling almost as much as I love cheese (which is a lot),
and I’m so happy about all the places I got to go to this
year. I travelled every month that didn’t start with an A. I went to 17 cities
and 8 countries.
In July, I was at home for a total of 9 days. I am lucky that I work on a team
that still tolerates the fact that every couple of months I’ll just be in a
different timezone, and I’m worried about when this will end and I’ll have to stand still.
My favourite trip
was going to Taiwan, which was a country I didn’t expect to love as
much as I did.&lt;/p&gt;

&lt;h2 id=&quot;️&quot;&gt;✌️🐼&lt;/h2&gt;
&lt;p&gt;I drank over 500 cups of coffee. I learnt about 60 traditional Chinese characters.
I’m not trying to learn how to speak the language, I’m just fascinated by the radicals and the writing and
the calligraphy and how some words are like a story. I might write a blog post
about it one day when I’m less nervous about it. I drew a &lt;a href=&quot;https://dribbble.com/shots/3168680-Polymerosaurus&quot;&gt;dinosaur&lt;/a&gt;. I still love my job.
I still didn’t work on weekends. I still didn’t spoil Star Wars for anybody. I turned 31.&lt;/p&gt;

&lt;h3 id=&quot;️-1&quot;&gt;❤️&lt;/h3&gt;
&lt;p&gt;I hope your year was ok, Internet friends.&lt;/p&gt;

&lt;p&gt;(you can read the &lt;a href=&quot;../a-year-in-review&quot;&gt;2015&lt;/a&gt; year in review if
you’re all warm and cozy and don’t want to leave)&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Polymer 1.x Cheat Sheet</title>
   <link href="https://meowni.ca/posts/polymer-cheatsheet/"/>
   <updated>2016-12-13T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/polymer-cheatsheet</id>
   <content type="html">&lt;style&gt;
.highlight .err {
  color: inherit;
  background-color: inherit;
}
.highlight .s1, .highlight .s {
  color: #336699;
  background: inherit;
}
pre {
  margin-bottom: 30px;
}
pre, code {
  background: #f4f6f8;
}
p &gt; code, li &gt; code {
  font-weight: bold;
}
pre {
  border-bottom: solid 1px #CFD8DC;
}
&lt;/style&gt;

&lt;p&gt;This is a cheat sheet for the &lt;a href=&quot;https://www.polymer-project.org/1.0/&quot;&gt;Polymer 1.x&lt;/a&gt; library.
It helps you write Web Components, which are pretty 🔥🔥🔥. If you’re interested in the
Polymer 2.0 cheat sheet, it’s &lt;a href=&quot;https://meowni.ca/posts/polymer-2-cheatsheet/&quot;&gt;here&lt;/a&gt;. If you think something
is missing from this page, &lt;a href=&quot;https://twitter.com/intent/tweet?original_referer=https%3A%2F%2Fmeowni.ca%2F&amp;amp;ref_src=twsrc%5Etfw&amp;amp;text=@notwaldorf%20Polymer%20cheat%20sheet%20feature%20request:&quot;&gt;tell me&lt;/a&gt; about it!&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#defining-an-element&quot; id=&quot;markdown-toc-defining-an-element&quot;&gt;Defining an element&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#defining-a-behaviour&quot; id=&quot;markdown-toc-defining-a-behaviour&quot;&gt;Defining a behaviour&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lifecycle-methods&quot; id=&quot;markdown-toc-lifecycle-methods&quot;&gt;Lifecycle methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#data-binding&quot; id=&quot;markdown-toc-data-binding&quot;&gt;Data binding&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#observers&quot; id=&quot;markdown-toc-observers&quot;&gt;Observers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#listeners&quot; id=&quot;markdown-toc-listeners&quot;&gt;Listeners&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#properties-block&quot; id=&quot;markdown-toc-properties-block&quot;&gt;Properties block&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#observing-added-and-removed-children&quot; id=&quot;markdown-toc-observing-added-and-removed-children&quot;&gt;Observing added and removed children&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#style-modules&quot; id=&quot;markdown-toc-style-modules&quot;&gt;Style modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#styling-with-custom-properties-and-mixins&quot; id=&quot;markdown-toc-styling-with-custom-properties-and-mixins&quot;&gt;Styling with custom properties and mixins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#binding-helper-elements&quot; id=&quot;markdown-toc-binding-helper-elements&quot;&gt;Binding helper elements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;defining-an-element&quot;&gt;Defining an element&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/registering-elements&quot;&gt;registering an element&lt;/a&gt;, &lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/registering-elements#prototype-mixins&quot;&gt;behaviours&lt;/a&gt;, &lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/styling#style-modules&quot;&gt;shared style modules&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;element-name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Use one of these style declarations, but not both --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Use this if you don’t want to include a shared style --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Use this if you want to include a shared style --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some-style-module-name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;element-name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// All of these are optional. Only keep the ones you need.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;behaviors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;observers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;hostAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;defining-a-behaviour&quot;&gt;Defining a behaviour&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/behaviors&quot;&gt;behaviours&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Defining a behavior to share implementation between different elements:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;MyNamespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyFancyBehaviorImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Code that you want common to elements, such&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// as behaviours, methods, etc.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;MyNamespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyFancyBehavior&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;MyFancyBehaviorImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* You can add other behaviours here */&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using the behavior in an element:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;element-name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;element-name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;behaviors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyNamespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyCustomButtonBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;lifecycle-methods&quot;&gt;Lifecycle methods&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/registering-elements#lifecycle-callbacks&quot;&gt;lifecycle callbacks&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;registered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;attached&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;detached&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attributeChanged&lt;/code&gt; callback as well, but that’s very rarely used.&lt;/p&gt;

&lt;h2 id=&quot;data-binding&quot;&gt;Data binding&lt;/h2&gt;
&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/data-binding&quot;&gt;data binding&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/data-binding#attribute-binding&quot;&gt;attribute binding&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/data-binding#bind-array-item&quot;&gt;binding to array items&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/data-binding#annotated-computed&quot;&gt;computed bindings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don’t forget: Polymer &lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/properties#property-name-mapping&quot;&gt;camel-cases&lt;/a&gt; properties, so if in JavaScript you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myProperty&lt;/code&gt;,
in HTML you would use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my-property&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One way&lt;/strong&gt; binding: when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myProperty&lt;/code&gt; changes, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;theirProperty&lt;/code&gt; gets updated:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;some-element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;their-property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[[myProperty]]&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/some-element&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Two way&lt;/strong&gt; binding: when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myProperty&lt;/code&gt; changes, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;theirProperty&lt;/code&gt; gets updated,
and vice versa:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;some-element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;their-property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{myProperty}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/some-element&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Attribute binding&lt;/strong&gt;: when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myProperty&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, the element is hidden; when it’s
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;, the element is visible:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;some-element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$=&quot;[[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myProperty&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]]&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/some-element&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Computed binding&lt;/strong&gt;: binding to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; attribute will recompile styles when
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myProperty&lt;/code&gt; changes:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;some-element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$=&quot;[[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_computeSomething&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myProperty&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)]]&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/some-element&amp;gt;&lt;/span&gt;

_computeSomething: function(prop) {
  return prop ? &apos;a-class-name&apos; : &apos;another-class-name&apos;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;observers&quot;&gt;Observers&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/observers&quot;&gt;observers&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/observers#multi-property-observers&quot;&gt;multi-property observers&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/observers#array-observation&quot;&gt;observing array mutations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Adding an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;observer&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties&lt;/code&gt; block lets you observe changes in the
value of a property:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;myProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_myPropertyChanged&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// The second argument is optional, and gives you the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// previous value of the property, before the update:&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;_myPropertyChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*oldValue */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;observers&lt;/code&gt; block:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;observers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_doSomething(myProperty)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_multiPropertyObserver(myProperty, anotherProperty)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_observerForASubProperty(user.name)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Below, items can be an array or an object:&apos;&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_observerForABunchOfSubPaths(items.*)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;listeners&quot;&gt;Listeners&lt;/h2&gt;
&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/events#event-listeners&quot;&gt;event listeners&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/events#imperative-listeners&quot;&gt;imperative listeners&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_onClick&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_onInput&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;something-changed&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_onSomethingChanged&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;properties-block&quot;&gt;Properties block&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/properties&quot;&gt;declared properties&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/properties#configuring-object-and-array-properties&quot;&gt;object/array properties&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/properties#read-only&quot;&gt;read-only properties&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/observers#define-a-computed-property&quot;&gt;computed properties&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are all the possible things you can use in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties&lt;/code&gt;
block. Don’t just use all of them because you can; some (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reflectToAttribute&lt;/code&gt;
  and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notify&lt;/code&gt;) can have performance implications.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;basic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Value can be one of the types above, eg:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// For an Array or Object, you must return it from a function&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// (otherwise the array will be defined on the prototype&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// and not the instance):&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cheese&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pepperoni&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;more-cheese&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;reflectToAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Computed properties are essentially read-only, and can only be&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// updated when their dependencies change.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;basicComputedProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_someFunction(myProperty, anotherProperty)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;observing-added-and-removed-children&quot;&gt;Observing added and removed children&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/local-dom#dom-distribution&quot;&gt;DOM distribution&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/local-dom#observe-nodes&quot;&gt;observe nodes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have a content node for distribution:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;slot&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;distributed&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And you want to be notified when nodes have been added/removed:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;attached&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_observer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;distributed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observeNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// info is {addedNodes: [...], removedNodes: [...]}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;detached&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;distributed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unobserveNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;style-modules&quot;&gt;Style modules&lt;/h2&gt;
&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/styling#style-modules&quot;&gt;shared style modules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Defining styles that will be shared across different elements, in a file called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my-shared-styles.html&lt;/code&gt; (for example):&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-shared-styles&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;.red&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;/* Custom property defined in the global scope */&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;--the-best-red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#e91e63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Include the shared style in a custom element:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-shared-styles.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;element-name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-shared-styles&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;/* Other styles in here */&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;element-name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Include the shared style in the main document:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-shared-styles.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;custom-style&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-shared-styles&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/* Other styles in here */&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;styling-with-custom-properties-and-mixins&quot;&gt;Styling with custom properties and mixins&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/styling&quot;&gt;styling&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/styling#custom-css-properties&quot;&gt;CSS properties&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/styling#custom-css-mixins&quot;&gt;CSS mixins&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/styling#custom-properties-shim-limitations&quot;&gt;shim limitations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that the examples below depend on browser support for custom properties.
For how to use the shim (spoilers: it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;style is=&quot;custom-style&quot;&amp;gt;&lt;/code&gt;) and its limitations,
check the docs linked above.&lt;/p&gt;

&lt;p&gt;Defining a custom property:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* or :host, or :root etc. */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--my-custom-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using a custom property:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.my-image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--my-custom-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using a custom property with a fallback:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.my-image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--my-custom-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using a custom property with a custom property fallback:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.my-image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--my-custom-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--my-fallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Defining a mixin:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;some-custom-element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--my-custom-mixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using a mixin:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.my-image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;@apply&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;--my-custom-mixin;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;binding-helper-elements&quot;&gt;Binding helper elements&lt;/h2&gt;

&lt;p&gt;Docs: &lt;a href=&quot;https://www.polymer-project.org/1.0/docs/api/dom-repeat&quot;&gt;dom-repeat&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/api/dom-bind&quot;&gt;dom-bind&lt;/a&gt;,
&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/api/dom-if&quot;&gt;dom-if&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dom-repeat&lt;/code&gt; stamps and binds a template for each item in an array:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dom-repeat&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;items=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{employees}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;First name: &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{item.first}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Last name: &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{item.last}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dom-bind&lt;/code&gt; stamps itself into the main document and adds a binding scope:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dom-bind&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;paper-input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{myText}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/paper-input&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;You typed: [[myText]]&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dom-if&lt;/code&gt; stamps itself conditionally based on a property’s value:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dom-if&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{myProperty}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;This content will appear when myProperty is truthy.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Web fonts, boy, I don't know</title>
   <link href="https://meowni.ca/posts/web-fonts/"/>
   <updated>2016-11-01T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/web-fonts</id>
   <content type="html">&lt;ul&gt;
&lt;li&gt;
  &lt;span style=&quot;color: white;&quot;&gt;phantom
  &lt;span style=&quot;border-bottom:1px solid black;&quot;&gt;underlines&lt;/span&gt;. isn&apos;t this
  &lt;span style=&quot;border-bottom:1px solid black;&quot;&gt;amaaaaaazing.&lt;/span&gt;
  &lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color: white;&quot;&gt;i love waiting for 8 seconds and seeing this.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
  &lt;span style=&quot;color: white;&quot;&gt;look at it. srsly.
  &lt;span style=&quot;border-bottom:1px solid black;&quot;&gt;looooook&lt;/span&gt;at it.
  &lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I spent a week traveling around Taiwan, on my awesome free roaming 2G data plan, and friends,
we need to talk about your web fonts. Also cats. They really love cats there.
Anyway, the thing about 2G is that I fully understand
that it will take me 10 seconds to load a page. What sucks is the fresh rage of
the following 4 seconds
where instead of content I get phantom underlines, waiting for
a slightly-different-sans-serif to download.&lt;/p&gt;

&lt;p&gt;Listen: it doesn’t have to be this way. You can lazy load your font. It’s 4 lines
of JavaScript. 7 if you’re being ambitious.&lt;/p&gt;

&lt;h2 id=&quot;why-should-you-care&quot;&gt;Why should you care&lt;/h2&gt;
&lt;p&gt;I’ve been brainwashed to &lt;em&gt;really&lt;/em&gt; care about first paint performance (thanks Chrome Dev Rel 😘),
and I’ve become a big fan of the “do less &amp;amp; be lazy” approach to building things.
What this means is that if something is not on your critical path, it probably doesn’t
need to be the first thing you paint on a page.&lt;/p&gt;

&lt;p&gt;Now think about fonts: is the critical path &lt;em&gt;showing&lt;/em&gt; text, or &lt;em&gt;styling&lt;/em&gt; it? I’d
argue that unless your app is in the 1% it’s-all-a-magical-visual-experience bucket (in which case
  this post is not for you), or we’re just talking about the fancy title on your site (which fine, can 
  be slow to paint or whatever), 
it’s probably trying to communicate some content, and ugly content (that you prettify after) is better than no content.&lt;/p&gt;

&lt;p&gt;(Real talk: if you don’t think rendering text is a critical path, you’re whack and we need to have a chat.)&lt;/p&gt;

&lt;p&gt;There are two things you can run into when loading a web font:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;FOIC&lt;/strong&gt; (“flash of invisible content”) – when your browser sees that
you’re trying to use a font it doesn’t have it paints all the text in
invisible ink, waits, and when it finally gets the font, it re-paints and re-layouts the text correctly.
&lt;a href=&quot;https://cloud.githubusercontent.com/assets/1369170/19876828/0aa7d0d6-9f97-11e6-86c8-b7e2c80a9986.gif&quot;&gt;[see a gif of this]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hate this with the fire of a thousand suns, because instead of looking at actual content,
I’m looking at bullets and underlines and random text you forgot to style. Neat-o.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;FOUC&lt;/strong&gt; (“flash of unstyled content”) – Chrome stops waiting for a web font after 3 seconds (and, recently, after 0 seconds on 2G). What this means is instead of showing you invisible ink, it paints the text in your fallback
font. When your web font is finally downloaded, it then re-paints the already displayed text with the new font.
&lt;a href=&quot;https://cloud.githubusercontent.com/assets/1369170/19876827/0aa5c8d6-9f97-11e6-81a2-13fa35f6bbc9.gif&quot;&gt;[see a gif of this]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Side note&lt;/strong&gt;: on iPhones, this timeout doesn’t exist, so you basically only get a FOIC – you wait the entire
time to get from “no text” to “all the text”, with no intermediate bail out state.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;http://output.jsbin.com/felocuh&quot;&gt;Here&lt;/a&gt; is the code that I used for these demos,
with GPRS and 2G throttling respectively in Chrome. This demo will look super snappy
on LTE. Everything is super snappy on LTE.)&lt;/p&gt;

&lt;h2 id=&quot;reading-material&quot;&gt;Reading material&lt;/h2&gt;
&lt;p&gt;A lot of people have written about web fonts, and I’m not trying to re-write their
posts. Chrome in particularly has been working a lot on improving this, by
decreasing the web font download timeout to 0s on 2G, and working on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;font-display&lt;/code&gt; spec.&lt;/p&gt;

&lt;p&gt;Here are some links I like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/webfont-optimization&quot;&gt;anatomy of a web font&lt;/a&gt; and the
&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/webfont-optimization#webfonts_and_the_critical_rendering_path&quot;&gt;dance&lt;/a&gt; that a browser does to use a web font&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2016/02/font-display&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;font-display&lt;/code&gt;&lt;/a&gt;
options, and how it affects how fonts load&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://groups.google.com/a/chromium.org/forum/m/#!msg/blink-dev/7s4-eQTAxqs/SoahsGpMAQAJ&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;font-display: optional&lt;/code&gt;&lt;/a&gt; and why it’s awesome (tl; dr: if you can’t do it fast, don’t do it at all)&lt;/li&gt;
  &lt;li&gt;minimizing &lt;a href=&quot;https://jakearchibald.com/2014/minimising-font-downloads/&quot;&gt;font downloads&lt;/a&gt; by limiting
the range of characters you’re loading&lt;/li&gt;
  &lt;li&gt;why we should care about web fonts and how to minimize FOIT using JavaScript and a library called &lt;a href=&quot;http://helenvholmes.com/writing/type-is-your-right&quot;&gt;Font Face Observer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;voltron solution &lt;a href=&quot;https://jeremenichelli.github.io/2016/05/font-loading-strategy-static-generated-sites/&quot;&gt;combining&lt;/a&gt; FontFaceObserver, async loading a font bundle and web storage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lazy-loading-a-font&quot;&gt;Lazy loading a font&lt;/h2&gt;
&lt;p&gt;Personally, I would use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;font-display: optional&lt;/code&gt; everywhere, but that doesn’t really work anywhere yet.
In the meantime, here are 2 super simple ways to lazy load a web font.
Again, I don’t really mind having a FOUC, since it feels like progressive enhancement to me:
display the content as soon as you can, and progressively style it after.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&apos;Arima Madurai&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Do this only after we&apos;ve displayed the initial text.&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://fonts.googleapis.com/css?family=Arima+Madurai:300,400,500&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;loadFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// hold tight, i tell you below.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s basically two ways in which you can implement that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadFont&lt;/code&gt;:&lt;/p&gt;

&lt;h3 id=&quot;load-the-stylesheet-blocking&quot;&gt;Load the stylesheet (blocking)&lt;/h3&gt;
&lt;p&gt;This is the simplest way and works great for a simple page. But! Since loading/parsing
a stylesheet blocks parsing/painting, this doesn’t play nicely if you’re loading a bunch
of other modules after the document has loaded, since they will be delayed. [&lt;a href=&quot;http://output.jsbin.com/cijokog&quot;&gt;demo&lt;/a&gt;]&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;stylesheet&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;xhr-the-stylesheet-asynchronous&quot;&gt;XHR the stylesheet (asynchronous)&lt;/h3&gt;
&lt;p&gt;If you care about synchronicity (and tbh you probably should), you can do an async
XMLHttpRequest and create a style node with the result. [&lt;a href=&quot;http://output.jsbin.com/veqiyuy&quot;&gt;demo&lt;/a&gt;]&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readyState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For bonus points, you can take this &lt;a href=&quot;https://github.com/GoogleChrome/devsummit/blob/master/scripts/utils.js#L34&quot;&gt;one step further&lt;/a&gt; and
rather than creating an inline &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt;,
append a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;link&amp;gt;&lt;/code&gt; like in the previous method, since the browser cache is already
primed. If you trust your browser cache. I trust no one.&lt;/p&gt;

&lt;p&gt;This is obviously not perfect. It will give you a FOUC on a fast LTE connection,
even though if you did nothing, like in the first demo, it wouldn’t. The point is that
not all of your audience is on an LTE connection, and I want you to think about them
when you’re working on a site. If you want to
minimize this FOUC, &lt;a href=&quot;https://twitter.com/helenvholmes&quot;&gt;Helen Holmes&lt;/a&gt; gave an AMAZING &lt;a href=&quot;https://www.youtube.com/watch?v=emLfXChvVPQ&quot;&gt;talk&lt;/a&gt; recently about web typography and performance, where she mentions how you
can try to match the x-heights of your fallback font to your target font, so that the FOUC is gentler.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: I’ve built a &lt;a href=&quot;https://meowni.ca/font-style-matcher/&quot;&gt;font-style-matcher&lt;/a&gt; that lets you do this matching of the x-heights and widths of the web font and fallback font! Go check it out, it’s preeeeetty sweet.&lt;/p&gt;

&lt;h2 id=&quot;tl-dr&quot;&gt;TL; DR&lt;/h2&gt;
&lt;p&gt;Web fonts are okay. They make your blog prettier. They’re also slow and kind of an
annoying experience, but if you need to use them, use them. Just remember that it’s
also your responsibility to make your site load super fast, and if you don’t,
it’s totes fair game for people (me) to whine about it on Twitter.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(🍹 to &lt;a href=&quot;https://twitter.com/aerotwist&quot;&gt;Paul Lewis&lt;/a&gt; who had to sit through all
my questions and explain basic browser things to me. Again.)&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>I made a 2001-era emoji font! That you can use!</title>
   <link href="https://meowni.ca/posts/og-emoji-font/"/>
   <updated>2016-10-04T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/og-emoji-font</id>
   <content type="html">&lt;p&gt;You know the scenes in Friends when Ross starts talking about dinosaurs
and he’s SUPER excited but everyone else is losing the will to live?
This is basically that, only instead of dinosaurs, it’s emoji, and unlike Ross,
I have never successfully befriended a monkey.&lt;/p&gt;

&lt;p&gt;Last month, my coworker casually told me he still has a 2001 era DoCoMo phone, which is
one of the first phones to have emoji (🤓🤓🤓: emoji first appeared in 1999, on DoCoMo phones,
and DoCoMo phones alone). So I got ahold of this phone. Which charged, turned on
and most importantly, TOTALLY had OG emoji:&lt;/p&gt;

&lt;div style=&quot;width:100%&quot;&gt;
&lt;img src=&quot;/images/2016-09-28/all-1.jpg&quot; width=&quot;30%&quot; style=&quot;display:inline&quot; /&gt;
&lt;img src=&quot;/images/2016-09-28/all-2.jpg&quot; width=&quot;30%&quot; style=&quot;display:inline&quot; /&gt;
&lt;img src=&quot;/images/2016-09-28/all-3.jpg&quot; width=&quot;30%&quot; style=&quot;display:inline&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;/div&gt;

&lt;p&gt;I spent the whole day being unproductive and sending emoji messages to people:&lt;/p&gt;

&lt;div style=&quot;width:100%&quot;&gt;
&lt;img src=&quot;/images/2016-09-28/msg-1.jpg&quot; width=&quot;30%&quot; style=&quot;display:inline&quot; /&gt;
&lt;img src=&quot;/images/2016-09-28/msg-2.jpg&quot; width=&quot;30%&quot; style=&quot;display:inline&quot; /&gt;
&lt;img src=&quot;/images/2016-09-28/msg-3.jpg&quot; width=&quot;30%&quot; style=&quot;display:inline&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;svgs&quot;&gt;SVGs&lt;/h2&gt;

&lt;p&gt;I then took a 10 hour flight to Europe and, for lack of better things to do
while watching every movie that came out this year, I drew every one of those emoji as a sprite.
166 emoji in total, 12x12px each, in one of six colors. This was my first time doing pixels
sprites, so I obviously fucked it up: I ended up with a bunch of random sprite sheets,
each with a random number of sprites in it, which was a bit of a mess. Thankfully,
&lt;a href=&quot;https://twitter.com/amandaglosson&quot;&gt;Amanda Glosson&lt;/a&gt;, reigning queen of pixels, wrote me a script to transmogrify my mess into
individual svgs. &lt;strong&gt;These&lt;/strong&gt; individual SVGs, to be exact:&lt;/p&gt;

&lt;iframe src=&quot;/images/2016-09-28/svgs.html&quot; width=&quot;100%&quot; onload=&quot;this.height=this.contentDocument.body.getBoundingClientRect().height + 20&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;LOOK HOW PRETTY THEY ARE! &lt;span class=&quot;og&quot;&gt;💓&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-wild-font-appears&quot;&gt;A wild font appears&lt;/h2&gt;
&lt;p&gt;The reason why I made those SVGs was partly because Captain America: Civil War is unbearably
boring, but partly because I wanted to make a font and use it everywhere like
an emoji hipster.&lt;/p&gt;

&lt;p&gt;So then I did. I used &lt;a href=&quot;http://app.fontastic.me/&quot;&gt;Fontastic&lt;/a&gt; to make the font – it’s black and white, because at 
the time of writing this, colour fonts weren’t supported on the web (tbh, even a year later, when colour 
fonts &lt;em&gt;are&lt;/em&gt; supported, I still couldn’t tell you how to make on). I
also mapped the original emoji glyph to one of the current existing emoji code points,
based on &lt;a href=&quot;http://unicode.org/emoji/charts/full-emoji-list.html&quot;&gt;this&lt;/a&gt; list, because let’s be honest, some of them were mysterious.
Do you know what &lt;span class=&quot;og&quot;&gt;💥&lt;/span&gt; means? It’s 💥. And
&lt;span class=&quot;og&quot;&gt;💦&lt;/span&gt; is 💦. 12 pixels ain’t a lot of pixels, friends.&lt;/p&gt;

&lt;style&gt;
.emoji-sample {
  font-size: 24px;
  letter-spacing: 6px;
  line-height: 30px !important;
  word-wrap: break-word;
}
&lt;/style&gt;

&lt;p&gt;Here the 166 emoji as they look today:&lt;/p&gt;
&lt;div&gt;
&lt;p class=&quot;emoji-sample&quot;&gt;❤💔💓💕😃😖😞😵😠🎵♨💠💋✨💡💢👊💣🎶💤❗⁉‼💥💦💧💨〰️➰⤴⤵↗↘↖↙☀️☁️☔️⛄⚡️🌀🌁🌂♈️♉️♊️♋️♌️♍️♎️♏️♐️♑️♒️♓️🎽⚾️⛳🎾⚽️🎿🏀🏁📟🚃Ⓜ🚄🚗🚙🚌🚢✈️🏠🏢🏣🏥🏦🏧🏨🏪⛽🅿🚥🚻🍴☕🍸🍺🍔👠✂️🎤🎥🎠🎧🎨🎩🎪🎫🚬🚭📷👜📖🎀🎁🎂☎︎📱📝📺🎮💿♥♠♦♣👀👂✊✌️✋👣👟👓🌑🌔🌓🌙🌕🐶🐱⛵🎄📲📩📠✉︎💴🆓🆔↩🆑🔍🆕🚩➿#️⃣0️⃣1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🆗&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;And here’s the same list, using the DoCoMo emoji font:&lt;/p&gt;
&lt;div&gt;
&lt;p class=&quot;og emoji-sample&quot;&gt;❤💔💓💕😃😖😞😵😠🎵♨💠💋✨💡💢👊💣🎶💤❗⁉‼💥💦💧💨〰️➰⤴⤵↗↘↖↙☀☁︎☔︎⛄⚡︎🌀🌁🌂♈︎♉︎♊︎♋︎♌︎♍︎♎︎♏︎♐︎♑︎♒︎♓︎🎽⚾︎⛳🎾⚽︎🎿🏀🏁📟🚃Ⓜ🚄🚗🚙🚌🚢✈️🏠🏢🏣🏥🏦🏧🏨🏪⛽🅿🚥🚻🍴☕🍸🍺🍔👠✂︎🎤🎥🎠🎧🎨🎩🎪🎫🚬🚭📷👜📖🎀🎁🎂☎︎📱📝📺🎮💿♥♠♦♣👀👂✊✌︎✋👣👟👓🌑🌔🌓🌙🌕🐶🐱⛵🎄📲📩📠✉︎💴🆓🆔↩🆑🔍🆕🚩➿#0123456789🆗&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;There’s some OG emoji that don’t even exist today!:&lt;/p&gt;
&lt;p class=&quot;og emoji-sample&quot;&gt;abcde&lt;/p&gt;

&lt;h2&gt;Boom! &lt;span class=&quot;og&quot; style=&quot;font-weight:normal;&quot;&gt;💣&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;If you want to use it, you can download the font &lt;a href=&quot;/fonts/og-dcm-emoji.ttf&quot;&gt;here&lt;/a&gt;, and use
it as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;font-face&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@font-face {
  font-family: og-emoji;
  src: url(/fonts/og-dcm-emoji.ttf);
}
.og {
  font-family: og-emoji, sans-serif;
}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;og&apos;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;💥&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re going to use it, maybe give me some credit, because I spent an unhealthy
amount of time on it. Also, if you’re
DoCoMo, please don’t sue me. Emojineering comes only from the &lt;span class=&quot;og&quot;&gt;❤&lt;/span&gt;.&lt;/p&gt;

&lt;h1 class=&quot;og&quot; style=&quot;font-weight:normal;&quot;&gt;✌︎ ✨ 🐱 💋 🆗&lt;/h1&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Emoji: how do you get from U+1F355 to 🍕?</title>
   <link href="https://meowni.ca/posts/emoji-emoji-emoji/"/>
   <updated>2016-04-04T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/emoji-emoji-emoji</id>
   <content type="html">&lt;p&gt;You know that scene in The Rock where Nicolas Cage is super dreamy (like he is)
and decides his life mission is to look for VX poison gas and save San Francisco (like he would)?
That’s baaaasically me, if by “look for VX poison gas” you mean “nerd out on emoji”, and
by “save San Francisco” you mean “and tell everyone about it”.
I mean, you clicked on this link, what did you think was going to happen?&lt;/p&gt;

&lt;h2&gt;🍿 How did we get so lucky?&lt;/h2&gt;

&lt;p&gt;An &lt;a href=&quot;https://en.wikipedia.org/wiki/Emoji&quot;&gt;emoji&lt;/a&gt; is a coloured &lt;a href=&quot;https://en.wikipedia.org/wiki/Glyph&quot;&gt;glyph&lt;/a&gt;. They appeared around 1999 in Japan, where each mobile carrier implemented their own variants, and people
were sending them around in text messages. This was a bit of a mess, as
you can imagine proprietary formats interacting with other proprietary formats to be, so in 2000
there was a proposal to standardize them. It wasn’t until 2009, though, that emoji got specced
in Unicode 5.2 &lt;span style=&quot;color:#7ccdea;&quot;&gt;#blessed&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://unicode.org/reports/tr51/&quot;&gt;Spec&lt;/a&gt; trivia: each emoji has a &lt;a href=&quot;http://unicode.org/reports/tr51/#Design_Guidelines&quot;&gt;design guideline&lt;/a&gt;
and name, which is a description/suggestion of what the
emoji should look like. This is why 💁,for example, often gets in trouble for being
labelled as &lt;em&gt;Information Desk Person&lt;/em&gt;, but is actually just a sassy lady: it’s the
implementation of the emoji that doesn’t match its original description, not the
other way around. If you take sassy lady away from me though, there will be words.&lt;/p&gt;

&lt;p&gt;My favourite description is
&lt;em&gt;Clockwise Rightwards and Leftwards
Open Circle Arrows With Circled One Overlay&lt;/em&gt; (or 🔂 for short), which shows true dedication to typing.&lt;/p&gt;

&lt;p&gt;Emoji does not have a plural in Japanese, so stop trying to make &lt;em&gt;emojis&lt;/em&gt; happen.&lt;/p&gt;

&lt;h2 style=&quot;border-left-color:#fbcd46;&quot;&gt;🙀 What is an emoji even&lt;/h2&gt;

&lt;p&gt;Every emoji is represented by a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code point&lt;/code&gt; (a hexadecimal number, zero-padded up to at least four digits, like U+26C4).
Because all JavaScript strings are internally (i.e. in browsers) represented in UTF-16, this means that each &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_point&quot;&gt;code point&lt;/a&gt;, in turn, can be represented by one or more 16-bit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code unit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some emoji are boring (or in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Plane_(Unicode)#Basic_Multilingual_Plane&quot;&gt;basic&lt;/a&gt; unicode plane), which means one glyph is represented by one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code unit&lt;/code&gt;.
 ☃ for example is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U+2603&lt;/code&gt; (you’d write this as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\u2603&lt;/code&gt; in the codes). In JavaScript, to find out how many code units represent an emoji, you can query its length:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;☃&quot;.length    // returns 1
&quot;🐼&quot;.length    // returns 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To find out what the code units actually are, you can look them up:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;☃&quot;.charCodeAt(0).toString(16)    // returns 2603.
&quot;🐼&quot;.charCodeAt(0).toString(16)    // returns d83d
&quot;🐼&quot;.charCodeAt(1).toString(16)    // returns dc3c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s talk about panda! 🐼 lives in the “astral” plane (it’s officially
called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Plane_(Unicode)#Supplementary_Multilingual_Plane&quot;&gt;supplementary&lt;/a&gt; plane, but that’s boring), which means its
code point has more than four digits, and is represented by &lt;em&gt;two&lt;/em&gt; code units. This
is called a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;surrogate pair&lt;/code&gt;. As we saw above, 🐼 is made up of two
surrogates, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U+D83D&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U+DC3C&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My favourite emoji (thank you for asking!) is the dancer from the Android set. Look
at this blob. Look at all the shits it doesn’t give. It’s so happy. We should all be like this blob.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;60&quot; alt=&quot;the dancer as implemented on android, a beautiful blob with a rose in its teeth&quot; src=&quot;https://cloud.githubusercontent.com/assets/1369170/14198590/c07a7d14-f790-11e5-9d95-499731513ab3.png&quot; /&gt;&lt;/p&gt;

&lt;h2 style=&quot;border-left-color:#f19fd9;&quot;&gt;🙋 What about emoji modifiers?&lt;/h2&gt;

&lt;p&gt;🇨🇦 and 👍🏿 and 👨‍👨‍👧‍👧 are also
“astral” plane emojis, only they’re made out of 2+ surrogate pairs:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;👍🏿&quot;.length    // returns 4
&quot;🇨🇦&quot;.length    // returns 4
&quot;👨‍👨‍👧‍👧&quot;.length    // lol returns 11 (2*4 for each person + 3 connectors)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you type this (in April 2016) in something like Atom (or even Atom’s dev tools) though,
you’ll notice something weird. Instead of getting a black thumbs up, or the Canadian flag, you get this (I had to highlight the Canadian flag bit, because the glyphs are white):&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;129&quot; alt=&quot;a yellow thumbs up with a dark brown square; two boxes, each with the letters C and A; 4 separate heads in a line&quot; src=&quot;https://cloud.githubusercontent.com/assets/1369170/14193347/def54478-f758-11e5-95ca-bc8b5988874c.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Whoaaaa, what’s going on there? (This is a trick question. I’ma tell you what’s going on there.)&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://unicode.org/reports/tr51/#Flags&quot;&gt;flags&lt;/a&gt; are built around a weird (and annoying to implement) rule: the
surrogate pairs (called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;regional indicators&lt;/code&gt;) spell out the country code (so
🇨🇦 is actually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[C][A]&lt;/code&gt;). Skin colours are similar, but a little simpler:
they’re made out a special emoji &lt;a href=&quot;http://unicode.org/reports/tr51/#Subject_Emoji_Modifiers&quot;&gt;base&lt;/a&gt; + one of the 6 special colour &lt;a href=&quot;http://unicode.org/reports/tr51/#Emoji_Modifiers_Table&quot;&gt;modifiers&lt;/a&gt;. The couples/multi
families are a &lt;a href=&quot;http://www.unicode.org/emoji/charts/emoji-zwj-sequences.html&quot;&gt;sequence&lt;/a&gt; of characters, that together make one emoji.&lt;/p&gt;

&lt;h2 style=&quot;border-left-color:#a77be3;&quot;&gt;👾 So what does Chrome do?&lt;/h2&gt;
&lt;p&gt;Okay, cool! We figured out what code units we need for 🇨🇦, now, let’s figure
out how to render them!&lt;/p&gt;

&lt;p&gt;First, Chrome uses a text shaper called &lt;a href=&quot;http://harfbuzz.org/&quot;&gt;Harfbuzz&lt;/a&gt;. Text shapers
take Unicode code points and convert them to glyph indices (basically saying “you’re going to 
have to draw glyphs 23 and 74”) – and guess what we have! Unicode
code points! The text shaper is the one that knows how to look at this stream
of code units and surrogate pairs and figure out which are standalone, which
are weirdo flags, and which are modifiers. Once it’s done with it, it comes
up with the glyph and the position where to draw it. If you think about a couple,
👩‍❤️‍👩, all surrogate pairs need to be drawn on
top of each other, so that the spacing around the final glyph adds up.&lt;/p&gt;

&lt;p&gt;This glyph and its size/position eventually goes to &lt;a href=&quot;https://en.wikipedia.org/wiki/Skia_Graphics_Engine&quot;&gt;Skia&lt;/a&gt;,
Chrome’s graphics engine. It is the one that paints the right thing on the screen (&lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/third_party/skia/src/ports/SkFontHost_mac.cpp&amp;amp;l=1257&quot;&gt;here&lt;/a&gt; is that code).&lt;/p&gt;

&lt;h2 style=&quot;border-left-color:#5b86f7;&quot;&gt;🖌 What about fonts?&lt;/h2&gt;

&lt;p&gt;Fonts, boy, them’s a pickle. There’s basically one font per platform that
actually knows how to draw emoji (unless you went out of your way to
install extra ones). All the other fonts just rent the emoji from it.
These fonts are AppleColorEmoji (OS X), Segoe UI Symbol/Emoji (Windows),
NotoColorEmoji (Android) and I don’t know what Linux does, but it’s probably
black and white and who cares, I hear you can run bash on Windows now. I’m going to keep talking about the Apple font, because that’s
the code path I worked on in Chrome, but Windows works very similarly.&lt;/p&gt;

&lt;p&gt;So let’s say you have this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;font-family: &apos;Comic Sans MS&apos;, sans-serif;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;😻&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Chrome (specifically &lt;a href=&quot;https://en.wikipedia.org/wiki/Blink_(web_engine)&quot;&gt;Blink&lt;/a&gt;) will first look up the glyph corresponding to 😻 in the Comic Sans font.
It won’t find it, so it will first try the web &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fallback&lt;/code&gt; font, the default
platform sans-serif (I think on OS X this is Helvetica, and it’s probably
Arial on Windows). That also doesn’t have the glyph (remember, only one font
knows how to draw cats with heart eyes), so Chrome knows to fallback to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppleColorEmoji&lt;/code&gt; by looking at the glyph: it’s 32 bits and it has an emoji presentation,
so it must be an emoji. &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/platform/fonts/mac/FontCacheMac.mm&amp;amp;q=fontcachemac&amp;amp;sq=package:chromium&amp;amp;type=cs&amp;amp;l=91&quot;&gt;Here&lt;/a&gt;’s the code
where that happens (the real work is done &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/platform/fonts/SymbolsIterator.cpp&amp;amp;q=FontFallbackPriority::EmojiEmoji&amp;amp;sq=package:chromium&amp;amp;type=cs&amp;amp;l=23&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/platform/text/CharacterEmoji.cpp&amp;amp;q=characteremoji.cpp&amp;amp;sq=package:chromium&amp;amp;type=cs&amp;amp;l=95&quot;&gt;here&lt;/a&gt;. This entire last file is pretty glorious and useful if you ever need to know if a thing is an emoji or not).&lt;/p&gt;

&lt;p&gt;Cool, so now Chrome knows to ask AppleColorEmoji for the cat, takes that glyph,
passes it to Skia, and paints it
in the right position, and everything is fine. Cool cool cool.&lt;/p&gt;

&lt;p&gt;Remember though how in Atom, you see &lt;img width=&quot;53&quot; alt=&quot;a yellow thumbs up with a dark brown square&quot; style=&quot;display:inline-block;&quot; src=&quot;https://cloud.githubusercontent.com/assets/1369170/14195194/5704b2a2-f76b-11e5-922c-d4753861d55f.png&quot; /&gt;
 instead? What’s up with that?
Atom is built on Chromium soooo it should work, right?&lt;/p&gt;

&lt;p&gt;Well as we know, software. This fallback logic I just mentioned was a bit
broken pre Chrome 50 for flags and modifiers and complicated emoji like that.
So Chrome got as far as figuring out that there were two different glyphs,
“thumbs up” and “skin colour”, but not how to fallback to the correct font 
and draw the compound “black thumbs up” glyph. So that’s why you got them separately. That’s
been fixed now! Yay!&lt;/p&gt;

&lt;h2 style=&quot;border-left-color:#ed2f20;&quot;&gt;💥🙌✨💝&lt;/h2&gt;

&lt;p&gt;Congratulations! Now you too can be Nicolas Cage and shout at people about
emoji trivia! Wasn’t this fun?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/RrVzUOXldFe8M/giphy.gif&quot; alt=&quot;nicolas cage y&apos;all&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>I fixed a pair of headphones with some soldering, and you can too!</title>
   <link href="https://meowni.ca/posts/how-i-fixed-headphones/"/>
   <updated>2016-01-26T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/how-i-fixed-headphones</id>
   <content type="html">&lt;p&gt;Here’s the thing: I have this &lt;a href=&quot;http://s3-us-west-2.amazonaws.com/hypebeast-wordpress/image/2008/07/ed-banger-wesc-headphones.jpg&quot;&gt;sweet pair of headphones&lt;/a&gt; that I got from a
friend a gazillion years ago. I’ve always liked them because they were
free and they look super quirky but it turns out they were a limited
edition done for Ed Banger Records, which is the label that produces
Justice and Mr. Oizo. It also turns out the wire on the side is getting
a little fuckety, and is probably going to break soon, and my sweet, free, limited
edition headphones are going to be busted. 🎧&lt;/p&gt;

&lt;p&gt;Here’s this other thing you need to know: I am clumsy, and pretty shit at “fixing things”.
If I could do it, you could do it, and I’m gonna tell you how.&lt;/p&gt;

&lt;h2 id=&quot;step-0-you-should-figure-out-whats-wrong&quot;&gt;Step 0: you should figure out what’s wrong&lt;/h2&gt;
&lt;p&gt;I think about 4 things can go wrong with headphones:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;one of the cables attached to the headphones speakers is broken&lt;/li&gt;
  &lt;li&gt;the jack is broken&lt;/li&gt;
  &lt;li&gt;there’s a hole somewhere in the middle of the cable, most likely because your asshole cat went to town on it&lt;/li&gt;
  &lt;li&gt;the speakers are completely busted&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;№ 4 is A Hard Problem™, and it requires a level of skill I
don’t have. № 1 involves re-attaching wires to speakers, and
that’s what this post is about. № 2 and 3 are basically a combination of buying
a new cable and re-attaching it to the speakers, which is № 1 again. Which
means you can basically fix 3/4 problems with headphones 💖.&lt;/p&gt;

&lt;h2 id=&quot;step-1-pop-the-trunk&quot;&gt;Step 1: pop the trunk&lt;/h2&gt;
&lt;p&gt;After you’ve figured out which side of your headphones is broken, take the squishy earpad off and figure out how to get inside. Some headphones have little lever
things you need to pop. Mine have 3 little screws. Unscrew them, and place them somewhere where your asshole cat can’t eat them.&lt;/p&gt;

&lt;p&gt;This is what it looked like inside:
&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1369170/12541832/958b0672-c2d0-11e5-80f7-1526fa395c72.jpg&quot; alt=&quot;inside of the headphones&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;step-2-the-wires&quot;&gt;Step 2: the wires&lt;/h2&gt;

&lt;p&gt;Hopefully just one of the wires came loose, so that you don’t have to
guess about which wire goes where. If it’s just the one, move to the next step.
If, like me, you have to cut the whole cable and resolder all of them, you probably (definitely) should write down what order the wires came in, because you’ll forget.
I had this (if you look at the post-soldering photo, this might even make sense):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// i had a thicker and thinner cables.
// thick-orange means the orange wire of the thick cable.
// thin-orange is the orange wire of the thinner cable.
    ------------- speaker ---------
    [ ]         [ ]       [ ]    [ ]         soldered together
     |           |         |      |              |        |
     |           |         |      |              |        |
thick-orange thin-orange   Ø thick-red     thick-blue thin-blue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I also took a picture. It ended up being blurry and useless, so the written bit was 👌.&lt;/p&gt;

&lt;h2 id=&quot;step-3-cut-some-wires&quot;&gt;Step 3: cut some wires&lt;/h2&gt;

&lt;p&gt;If the cable you’re trying to solder is too frayed, you might have to shorten it.
You might also have to &lt;a href=&quot;http://www.instructables.com/id/Use-scissors-to-strip-wires!/&quot;&gt;strip&lt;/a&gt; the cable if there isn’t enough available.&lt;/p&gt;

&lt;p&gt;After you’re done, you should have a bunch of wires fairly similar to the
ones already attached to the speaker. I stripped mine with a kitchen knife because
I don’t own any tools, and it looked like this [read: pretty pro]:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1369170/12541647/804d4b14-c2ce-11e5-9d98-ed2b5923e87c.jpg&quot; alt=&quot;stripped wire&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-4-they-see-me-solderin-they-hatin&quot;&gt;Step 4: they see me solderin’, they hatin’&lt;/h2&gt;

&lt;p&gt;And that’s because I’m hilariously bad at it.&lt;/p&gt;

&lt;p&gt;Anyway, here’s a super verbose &lt;a href=&quot;https://www.youtube.com/watch?v=BLfXXRfRIzY&quot;&gt;video&lt;/a&gt;
on soldering. It basically involves heating the iron, melting some
copper into a liquid ball (if there isn’t already enough on there), and using it to attach your wire to the
speaker end it needs to be in. While it’s hard to be really good at soldering,
it’s surprisingly easy to be averagely bad at it.&lt;/p&gt;

&lt;p&gt;The good news is that if
you fuck it up, you can just unsolder the bit you just did with more heat,
and start again. Just practice a little on some spare wires before you go full out on your headphones, and don’t burn yourself.&lt;/p&gt;

&lt;p&gt;You’re going to first unsolder the old wires off the speaker, and re-solder
your new wires on. Here’s what mine looked like post soldering. You’ll notice
it’s messy and that nobody cares, because it’s all hidden inside the headphones
anyway. All you care about is your wire making contact with the speaker.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1369170/12542003/6ee0c410-c2d2-11e5-9858-e801279b3ee7.jpg&quot; alt=&quot;photo of speaker after soldering&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-5-the-reckoning&quot;&gt;Step 5: the reckoning&lt;/h2&gt;
&lt;p&gt;You should plug in your headphones. If everything went great, then sound
should come out of them!&lt;/p&gt;

&lt;p&gt;If sound isn’t coming out of them, it could be that
your connection is loose and you need to debug your soldering (which means repeating step 4), or that
it wasn’t the wires after all 😓&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important bit I missed the first time:&lt;/strong&gt; The cable sits in a little rubber casing
at the edge of the headphone like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1369170/12625281/f4b8189c-c4e7-11e5-898e-ac9d8ed5011c.jpg&quot; alt=&quot;cable rubber casing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I first took apart the headphones, I thought it was annoying the cable was glued to this rubber casing, because it meant I couldn’t use it, and had to find a new one (hoarding broken headphones helps with this). Spoilers: this was
intentional. You should ALSO super glue your cable inside the
rubber casing, or else when you invariably tug on the cable, it will totally
break the soldering you just did. Possibly just before you’re about to demo
your amazing new fixed headphones to your friends.&lt;/p&gt;

&lt;p&gt;To be honest, the most annoying thing was putting the little earpads back. After serious
struggling, I discovered there’s a little wedge on the headphones base, where you can slip a bit of the earpad in,
and then slide it all the way across. Yours might have this too!&lt;/p&gt;

&lt;h2 id=&quot;you-did-it-yay&quot;&gt;You did it! Yay!&lt;/h2&gt;
&lt;p&gt;If everything went right, you’ve just fixed a pair of headphones.
High five, you hardware hacker you! I’m so proud! 👍💖&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>2015: a year in review</title>
   <link href="https://meowni.ca/posts/a-year-in-review/"/>
   <updated>2015-12-22T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/a-year-in-review</id>
   <content type="html">&lt;p&gt;I’ve never really done a year in review. One day, I’d like to &lt;a href=&quot;https://github.com/una/personal-goals&quot;&gt;open source&lt;/a&gt;
my goals, but since I’m still a chicken, this is a baby step towards that. Plus, this is
one of the first years I’m really proud of, and things that you’re proud of tend
to live on the Internet, for posterity.&lt;/p&gt;

&lt;p&gt;Here’s what my GitHub contributions say about it:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;2015 contribution graph&quot; src=&quot;https://cloud.githubusercontent.com/assets/1369170/12084003/d0f4558a-b261-11e5-84f4-d28e947dd75d.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;burning-out&quot;&gt;Burning out&lt;/h2&gt;
&lt;p&gt;The year started off really poorly. My team had just shipped the new Profiles
UI in Chrome, after a year and a half of hard work, and it was met with a looooot
of Internet anger. On one side we had data to prove that the change we did was right, which made
the powers that be want to stick by it; on the other side I had Twitter,
who was calling me names and wanting me fired. Kind of ironic, since
I was just the person who implemented the feature and had no power
to change it.&lt;/p&gt;

&lt;p&gt;I think what burnt me out wasn’t waking up to a stream of negative
emails and tweets, it was knowing that there was absolutely nothing I could do about
it other than wait.&lt;/p&gt;

&lt;p&gt;So I started working on dumb side projects to feel better. I made a
&lt;a href=&quot;http://meowni.ca/meowto/&quot;&gt;link aliaser&lt;/a&gt;. I bought &lt;a href=&quot;http://canihaveapony.com/&quot;&gt;dumb&lt;/a&gt;
domains. I wrote &lt;a href=&quot;http://meowni.ca/posts/chromium-101/&quot;&gt;blog&lt;/a&gt; &lt;a href=&quot;http://meowni.ca/posts/chromium-owners&quot;&gt;posts&lt;/a&gt;
about the only thing that I knew, which was working on Chromium.
I noticed that not working on Chromium made me happy.&lt;/p&gt;

&lt;p&gt;So I bit the bullet, left Chromium, and joined Polymer.&lt;/p&gt;

&lt;h2 id=&quot;joining-polymer&quot;&gt;Joining Polymer&lt;/h2&gt;
&lt;p&gt;Looking back, I picked Polymer for a bunch of silly reasons that ended up working out
spectacularly well. I wanted to leave Montreal. I wanted to work on JavaScript,
since it was the only thing keeping me going. I didn’t want to commute to Mountain View,
which reduced my options by like a billion percent, and I wanted to ship things.
Polymer had all of that. So on April 15, I packed my cat and my books
and moved to San Francisco.&lt;/p&gt;

&lt;p&gt;Polymer is my dream job. I get to write code
that I’m genuinely passionate about. I get to try to change the web platform, and talk
about why I think we’re doing the right thing. Most importantly, I get to ship
something everyday. It turns out that’s a thing that matters to me a lot.&lt;/p&gt;

&lt;p&gt;I miss working on Chromium. I miss C++ and the big-ness and complicated-ness
that is working on a browser. It taught me that if I could find my way around
the 7 million lines of code and actually do something useful, there’s basically
nothing that I can’t do or learn. That’s one of the best feelings.&lt;/p&gt;

&lt;h2 id=&quot;tl-dr&quot;&gt;TL; DR.&lt;/h2&gt;

&lt;p&gt;I shipped 5 projects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://meowni.ca/meowto/&quot;&gt;meowto&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://meowni.ca/emoji-translate/&quot;&gt;emoji-translate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://caturday-post.herokuapp.com/&quot;&gt;caturday post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://meowni.ca/emoji-rain/&quot;&gt;emoji-rain&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://meowni.ca/muster/#6&amp;amp;23&quot;&gt;muster&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://meowni.ca/is-ie10-dead/&quot;&gt;is IE10 dead&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
I gave 5 different talks at 3 conferences and 2 meetups:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Contributing to Chromium, &lt;a href=&quot;https://speakerdeck.com/notwaldorf/contributing-to-chromium&quot;&gt;slides&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Push notifications for fun and profit, &lt;a href=&quot;https://speakerdeck.com/notwaldorf/push-notifications-for-fun-and-profit-if-by-profit-you-mean-cats&quot;&gt;slides&lt;/a&gt;, &lt;a href=&quot;https://vimeo.com/137771040&quot;&gt;video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Styling the Shadow DOM without dragons, &lt;a href=&quot;https://speakerdeck.com/notwaldorf/styling-the-shadow-dom-without-dragons&quot;&gt;slides&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=IbOaJwqLgog&quot;&gt;video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Input I &amp;lt;3 you but you’re bringing me down, &lt;a href=&quot;https://speakerdeck.com/notwaldorf/input-i-3-you-but-youre-bringing-me-down&quot;&gt;slides&lt;/a&gt;, &lt;a href=&quot;https://vimeo.com/144980655&quot;&gt;video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;How I didn’t fix emoji in Chrome, &lt;a href=&quot;https://speakerdeck.com/notwaldorf/or-how-i-didnt-fix-emoji-in-chrome&quot;&gt;slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
I wrote a blog post that a lot of people liked. Most importantly, this happened (#humblebrag):&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I think &lt;a href=&quot;https://t.co/eAoYZGWieP&quot;&gt;https://t.co/eAoYZGWieP&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/notwaldorf&quot;&gt;@notwaldorf&lt;/a&gt; may be the best thing I have ever read&lt;/p&gt;&amp;mdash; Jeff Atwood (@codinghorror) &lt;a href=&quot;https://twitter.com/codinghorror/status/657371215800086529&quot;&gt;October 23, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
I had my first ever interview, on &lt;a href=&quot;https://usesthis.com/interviews/monica.dinculescu/&quot;&gt;The Setup&lt;/a&gt;. I spoke on my
first ever podcast, &lt;a href=&quot;http://hanselminutes.com/499/understanding-web-components-and-polymer-with-monica-dinculescu&quot;&gt;Hanselminutes&lt;/a&gt;.
I discovered &lt;a href=&quot;https://www.instagram.com/p/9aW5ZxIrBu&quot;&gt;#nailconf&lt;/a&gt;, which reassures me I can be both a giant nerd and have pretty nails. I kept
3 succulents alive, accidentally killed one, and resurrected a fig leaf tree. I saw my first live
baseball and basketball games. I bought a second
&lt;a href=&quot;https://www.instagram.com/p/-VIJ05orDH&quot;&gt;ukulele&lt;/a&gt;. I didn’t work on weekends. I didn’t spoil Star Wars for
anybody. I turned 30.&lt;/p&gt;

&lt;h2&gt;🎉&lt;/h2&gt;
&lt;p&gt;See y’all next year, internet friends!&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>&lt;input&gt; I ♡ you, but you're bringing me down</title>
   <link href="https://meowni.ca/posts/a-story-about-input/"/>
   <updated>2015-10-22T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/a-story-about-input</id>
   <content type="html">&lt;p&gt;Some people build furniture. Some people knit. Some people have hobbies that
don’t involve HTML specs from the 90s. I am not those people. So here’s a story
about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, how it got to be the jerk that it is, and why it needs to die in a fire.&lt;/p&gt;

&lt;h2 id=&quot;the-early-years&quot;&gt;The early years&lt;/h2&gt;
&lt;p&gt;1995 was a good year. Friends, ER, Xena were all on TV. TLC had dominated the
charts with “Waterfalls”. Browsers were ok, because HTML was pretty ok. We had
Mosaic, Netscape and IE1, and the &lt;a href=&quot;http://tools.ietf.org/html/rfc1866&quot;&gt;HTML2&lt;/a&gt;
spec was finally getting around to standardizing forms. 1995 was the year
when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; was born, and now that it’s about old enough to drink, we need to have a talk.&lt;/p&gt;

&lt;p&gt;Input initially came along with 8 types: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkbox&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radio&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;image&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hidden&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;submit&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reset&lt;/code&gt;, and in a separate &lt;a href=&quot;https://www.ietf.org/rfc/rfc1867.txt&quot;&gt;RFC&lt;/a&gt; that followed, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Wait, did you say &lt;em&gt;image&lt;/em&gt;? Yeah, let’s talk about it.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;image&quot; src=&quot;cat.png&quot;&amp;gt;&lt;/code&gt; looks like an image, but it’s actually an image
button that also submits the (x,y) coordinates of where you clicked on the image. Unless you don’t specify
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; file, in which case it’s an “image button” that says “Submit”.
Unless you’re in Firefox, in which case it says “Submit Query” and looks like
a label. Unless you’re in
IE in which case it doesn’t say anything at all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-10-22/type-image.png&quot; alt=&quot;input type=image with no source&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also, for your local pub trivia night, the message that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type=file&lt;/code&gt; input to
indicate you haven’t done anything is “No file chosen”, “no file selected”,
“No file selected”, and just an empty textbox on Chrome, Safari, Firefox and IE respectively.&lt;/p&gt;

&lt;p&gt;Right, ok.&lt;/p&gt;

&lt;h2 id=&quot;and-now-a-textarea-rant&quot;&gt;And now, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; rant&lt;/h2&gt;
&lt;p&gt;I always thought &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;textarea&lt;/code&gt; came at later dates, and that explained
why they’re kind of insanely different. This is kind of true, since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input&lt;/code&gt; was
around in Mosaic since at least 1993, and it was a fixed-up implementation of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISINDEX&lt;/code&gt;. However, on the record, they were both children of the HTML2 spec,
which decided that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; is a self closing tag and uses a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; attribute,
while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; needs a closing tag and uses its contents, even though they
both just hold text that someone else has entered:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;batman&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rows=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;batman&lt;span class=&quot;nt&quot;&gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Update: someone pointed out that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; needs to support multilines,
and newlines aren’t allowed inside attributes values, which is why it needed
to use its contents. Makes sense!&lt;/p&gt;

&lt;h2 id=&quot;1995-2011-the-slow-years&quot;&gt;1995-2011, the slow years&lt;/h2&gt;
&lt;p&gt;In 1999, &lt;a href=&quot;http://www.w3.org/TR/html401/&quot;&gt;HTML4&lt;/a&gt; only added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type=&quot;button&quot;&lt;/code&gt;. My favourite part about
it is that with no custom styles, an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;button&quot;&amp;gt;&lt;/code&gt; and an
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;button&quot; value=&quot;Submit&quot;&amp;gt;&lt;/code&gt; on the same line, do not align vertically
on Chrome/Safari/Edge.&lt;/p&gt;

&lt;p&gt;&lt;img height=&quot;40px&quot; alt=&quot;input type=button misalignment&quot; src=&quot;/images/2015-10-22/button-align.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;then-everything-got-worse&quot;&gt;Then everything got worse&lt;/h2&gt;
&lt;p&gt;Later, in 2011, the &lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/Overview.html&quot;&gt;HTML5&lt;/a&gt; spec added a billion new input types. It’s now 2015, and
most are not implemented. The TL; DR of the missing features is: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type=color&lt;/code&gt; only
&lt;a href=&quot;http://caniuse.com/#feat=input-color&quot;&gt;works&lt;/a&gt; on Firefox/Chrome, date/time
inputs only &lt;a href=&quot;http://caniuse.com/#feat=input-datetime&quot;&gt;work&lt;/a&gt; on Chrome/Edge/iOS, and
everything that works on Chrome works on Opera. Here’s a
&lt;a href=&quot;http://output.jsbin.com/mimuko&quot;&gt;demo&lt;/a&gt; of all of the different input types to date,
so that you can compare and sob by yourself.&lt;/p&gt;

&lt;p&gt;Let’s talk about some interesting ones.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;search&quot;&amp;gt;&lt;/code&gt; has some arbitrary text padding, borders,
and badass mid-2000s-style rounded corners, all of which are inconsistent across all browsers, and almost
impossible to get &lt;a href=&quot;http://tjvantoll.com/2013/04/15/list-of-pseudo-elements-to-style-form-controls/&quot;&gt;rid&lt;/a&gt; of.&lt;/p&gt;

&lt;p&gt;&lt;img height=&quot;130px&quot; alt=&quot;input type=search weird default styles&quot; src=&quot;/images/2015-10-22/type-search.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’re on a lucky browser that does support &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type=&quot;date&quot;&lt;/code&gt;, don’t worry about
styling the date picker — there are 8 weirdo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::webkit&lt;/code&gt; pseudo-selectors out there,
but they’ll only let you &lt;a href=&quot;http://tjvantoll.com/2013/04/15/list-of-pseudo-elements-to-style-form-controls/&quot;&gt;style&lt;/a&gt;
the input textbox, and not the actual date dropdown. CSS is bad for your health anyway.&lt;/p&gt;

&lt;h2 id=&quot;just-when-you-thought-it-couldnt-get-any-worse-javascript&quot;&gt;Just when you thought it couldn’t get any worse, JavaScript&lt;/h2&gt;
&lt;p&gt;You see, I can justify CSS quirks. I worked on Chrome for 2 years,
I work next to the Blink team now, I understand we’re all writing different
renderers and they all have their own CSS bugs. However, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; API isn’t
quirky — it’s literally just a jar of spiders, and the moment you open the jar,
it’s too late. You’re covered in spiders. Even your cat is a spider now. Better find
some fire.&lt;/p&gt;

&lt;p&gt;Since 1995, inputs with type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radio&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkbox&lt;/code&gt; have
had an extra attribute, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checked&lt;/code&gt;, to determine their checked status. Since an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTMLInputElement&lt;/code&gt;
is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTMLInputElement&lt;/code&gt; is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTMLInputElement&lt;/code&gt;, this also means that all other
input types have this property; it just gets ignored. So even though it doesn’t
make sense, this is perfectly fine:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;input[type=&quot;text&quot;]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// prints false.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;textInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// prints true.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// did not open the hellmouth.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool. Cool cool cool.&lt;/p&gt;

&lt;p&gt;Inputs also have text, and text can be selected, so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTMLInputElement&lt;/code&gt;
prototype also defines two properties,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;selectionStart&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;selectionEnd&lt;/code&gt; which are two numbers defining your selection
range. So you can do:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectionStart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And advance the beginning of the text selection by 2 characters. Super pedestrian, except for
the fact that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;selectionStart&lt;/code&gt; — and brethren — attribute is only &lt;a href=&quot;https://html.spec.whatwg.org/multipage/forms.html#do-not-apply&quot;&gt;available&lt;/a&gt; for inputs
of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt; and just accessing it (not even setting it)
throws an exception for all other types:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Uncaught DOMException: Failed to read the &apos;selectionStart&apos;
property from &apos;HTMLInputElement&apos;: The input element&apos;s type (&apos;number&apos;)
does not support selection.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Even though manually I can totally select that text:&lt;/p&gt;

&lt;p&gt;&lt;img height=&quot;35px&quot; alt=&quot;input type=number with selected text&quot; src=&quot;/images/2015-10-22/type-number.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So in some cases, irrelevant properties can be interacted with, but in
other cases they open the hellmouth. Neat-o. That’s just the kind of consistency
I look for in an API.&lt;/p&gt;

&lt;h2&gt;🙈&lt;/h2&gt;
&lt;p&gt;There’s more. I’m sure there’s more. The thing is, browsers have had &lt;a href=&quot;http://www.martinrinehart.com/frontend-engineering/engineers/html/html-tag-history.html&quot;&gt;21 years&lt;/a&gt;
to sort out inputs, and they haven’t even managed to agree on how to communicate
“you haven’t picked a file”.&lt;/p&gt;

&lt;p&gt;Now imagine the future where Web Components are supported
natively, and someone else is allowed to write a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;better-input&amp;gt;&lt;/code&gt;, an element
that is a real, encapsulated DOM element, and not just a div soup. Imagine using this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;better-input&amp;gt;&lt;/code&gt;
that isn’t implemented differently in each browser, that looks the same everywhere, and that
probably also knows how to bake you a cherry pie. IMAGINE. ✨&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Styling the Shadow DOM or: a metaphor gone too far</title>
   <link href="https://meowni.ca/posts/styling-the-dome/"/>
   <updated>2015-09-29T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/styling-the-dome</id>
   <content type="html">&lt;p&gt;One of the beefs (and there aren’t many) that I have with CSS is that it has a very weak
opinion about style encapsulation. That opinion is basically “well, name your classes well” or else bad
things happen. Know this: I come from C++, land of rules and disappointed compilers; this hand waviness drives me crazy.&lt;/p&gt;

&lt;p&gt;This matters because now you have to trust the people that write your css libraries
to have common sense. If my website needs two kinds of fancy buttons, which live in  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shiny-button.css&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bouncy-button.css&lt;/code&gt;, which are both libraries
written by silly people who want me to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.button&lt;/code&gt; class to get their style,
I’m hosed.&lt;/p&gt;

&lt;h2 id=&quot;enter-the-shadow-dom&quot;&gt;Enter the Shadow DOM&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/&quot;&gt;Shadow DOM&lt;/a&gt; fixes this problem by building a little castle (a dome, get it?) around each custom element, locking in its implementation and styles. This is a proper castle, with a proper moat, so now styles can’t get in and out of it. This means that if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;shiny-button&amp;gt;&lt;/code&gt; was a custom element instead of a pile of CSS, its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.button&lt;/code&gt; class was scoped to the element itself, and wouldn’t stomp over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;bouncy-button&amp;gt;&lt;/code&gt;’s similarly creatively named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.button&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;This shouldn’t surprise you too much, as native elements have been doing this in secret for yeaaaaars. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input type=date&amp;gt;&lt;/code&gt; styles the date picker somehow, but you’ve never worried what class names it might use to do so. You know why? Because you can’t get to its castle, that’s why.&lt;/p&gt;

&lt;h2 id=&quot;the-struggle-is-real&quot;&gt;The struggle is real&lt;/h2&gt;
&lt;p&gt;So what happens if you &lt;em&gt;do&lt;/em&gt; want to style &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;shiny-button&amp;gt;&lt;/code&gt;? What if it’s a perfectly
respectable button, but it uses Helvetica as its font and you really need it to be Comic Sans because Helvetica is &lt;em&gt;so&lt;/em&gt; 2014?&lt;/p&gt;

&lt;p&gt;You can always style the &lt;em&gt;host&lt;/em&gt; of the element. Think of the host as the castle walls; it’s the thing that holds all the actual contents of the custom element. It still plays by CSS rules, so some of the styles you set on the &lt;em&gt;host&lt;/em&gt; could
actually trickle down to some child elements. For example:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;shiny-button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;tomato&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* this will apply to any text in the button,
   * unless a specific child overrides it */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;14px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What you don’t get to do is peek at the implementation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;shiny-button&amp;gt;&lt;/code&gt; and decide you don’t need one of the nested
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;div&lt;/code&gt;s it uses. Again, these are the same rules that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input type=date&amp;gt;&lt;/code&gt; plays by: you can change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input&lt;/code&gt;’s text to be red, but that date picker is what it is (hella ugly).&lt;/p&gt;

&lt;p&gt;When the Shadow DOM was first introduced, people anticipated this styling problem and took the “bring an AK-47 to a knife fight” approach by giving every developer &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/#toc-style-cat-hat&quot;&gt;dragons&lt;/a&gt;. These dragons are called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/deep/&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::shadow&lt;/code&gt;, and let you cross the moat and tear the shit out of any castle. You
could style anything you wanted in your custom element, because ain’t nobody stopping
dragons. It’s like that moat isn’t even there:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;shiny-button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;deep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;fancy-div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.fancy-class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, as we know from Game of Thrones, you eventually discover that if you have a dragon, it’s going to start eating all your goats and people will regret giving you a dragon.&lt;/p&gt;

&lt;p&gt;So we deprecated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/deep/&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::shadow&lt;/code&gt; and web developers around the world panicked.&lt;/p&gt;

&lt;h2 id=&quot;bridges-instead-of-dragons&quot;&gt;Bridges instead of dragons&lt;/h2&gt;
&lt;p&gt;The correct answer to “say, how do I cross this moat?” isn’t “lol a dragon”.
It’s a bridge. We’ve been using bridges to cross waters for like 3000 years. Dragons aren’t even real, man.&lt;/p&gt;

&lt;p&gt;CSS variables (aka custom properties) do exactly that. They’re hooks that the developer of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;shiny-button&amp;gt;&lt;/code&gt; has left all over the code,
so that you can change that particular style. Now you, as the user of a custom element no
longer need to know &lt;em&gt;how&lt;/em&gt; that element is implemented. You are given the list of things you can style, and you’re set.&lt;/p&gt;

&lt;p&gt;The code examples use Polymer, which is what I work on, and what I use to write custom elements. The full code, if you want to play along, is &lt;a href=&quot;http://jsbin.com/qubila/edit?html,output&quot;&gt;here&lt;/a&gt; (there’s an embedded JSBin at the bottom of this post, but you know, spoilers).&lt;/p&gt;

&lt;h2 id=&quot;first-a-shiny-button&quot;&gt;First, a shiny button&lt;/h2&gt;
&lt;p&gt;So, here’s our button. It has a bunch of nested silly things, because why not. Who knows how the native &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; actually looks like. Maybe it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;divs&lt;/code&gt; all the way down. Maybe it’s spiders. It’s probably spiders.&lt;/p&gt;

&lt;p&gt;Everything inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.container&lt;/code&gt;, including &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.container&lt;/code&gt; itself is inside the Shadow Castle, so it can’t be reached:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shiny-button&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;:host&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;cornflowerblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;.icon&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;.text-in-the-shadow-dom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;♡&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user-text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;content&amp;gt;&amp;lt;/content&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text-in-the-shadow-dom&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;!!!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;shiny-button&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- somewhere in an index.html, you&apos;d use it like so: --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;shiny-button&amp;gt;&lt;/span&gt;hallo hai&lt;span class=&quot;nt&quot;&gt;&amp;lt;/shiny-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;shiny-button&lt;/code&gt;&amp;gt; looks like the thing on the left. Pretty meh. We’ll do better. We’ll style it
to be the thing on the right, without any 🐲🐲🐲.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;312&quot; alt=&quot;screen shot 2015-08-11 at 3 34 51 pm&quot; src=&quot;https://cloud.githubusercontent.com/assets/1369170/9212530/97d07e7c-403e-11e5-867e-656ee1fd3cb7.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-can-you-style-right-now&quot;&gt;What can you style right now?&lt;/h2&gt;
&lt;p&gt;We can only style the &lt;em&gt;host&lt;/em&gt; of the element – this is everything outside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.container&lt;/code&gt; class, but inside
the shiny button. You know, the walls of the castle.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;shiny-button&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.fancy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;Lato&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To see the difference between the host and the container, we can give the button itself a different
background than the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.container&lt;/code&gt;. The red corners you see are part of the host; the blue parts are
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.container&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;142&quot; alt=&quot;screen shot 2015-08-11 at 3 23 20 pm&quot; src=&quot;https://cloud.githubusercontent.com/assets/1369170/9212326/ed035506-403c-11e5-848a-9b35bbdc8fce.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, none of these styles will work, because these &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;divs&lt;/code&gt; are well inside the castle:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;shiny-button&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.fancy&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;pink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;shiny-button&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.fancy&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.text-in-the-shadow-dom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;and-now-some-bridges&quot;&gt;And now: some bridges&lt;/h2&gt;
&lt;p&gt;We probably want to change the button’s background color, so we’ll create a variable for it, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--shiny-button-background&lt;/code&gt;. Some things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;every Polymer custom property needs to start with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt;, so that Polymer knows you’re not just typing gibberish.&lt;/li&gt;
  &lt;li&gt;I like to include the element name as a prefix to the custom property; I find it useful to remind me what I’m actually styling.&lt;/li&gt;
  &lt;li&gt;I also like documenting these somewhere in a giant docs blurb, so that the element’s users know what to expect. Polymer’s &lt;a href=&quot;https://github.com/PolymerElements/paper-checkbox/blob/master/paper-checkbox.html#L34&quot;&gt;paper-checkbox&lt;/a&gt; is a nice example of this (because I wrote it, obvs).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we know a custom property is available, this is how we would use it, inside the custom element:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* cornflowerblue is a default colour, in case the user doesn&apos;t
   * provide one. You could omit it if it&apos;s being inherited from above */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--shiny-button-background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;cornflowerblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can think of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt; like an eval, which says “apply the value of this custom property, whatever that value is”. And this is how you, the user of the element would actually give it a value:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;shiny-button&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.fancy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* see how much this looks like a normal css property? i.e.
  background: #E91E63; */&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--shiny-button-background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#E91E63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You can add all sorts of hooks for these kinds of “one-off” custom properties. Eventually you will realize that if the thing that should be styled is too generic (the background container of the button) there’s waaaaay too many CSS properties to expose one by one. In that case, you can use a &lt;em&gt;mixin&lt;/em&gt;, which is like a bag of properties that should all be applied at once. By default this bag is empty, so nothing gets applied when defining the custom element:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.icon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;@apply(--shiny-button-icon);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But the user of the element could start adding things to the bag like this:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;shiny-button&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.fancy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;Lato&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--shiny-button-background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#E91E63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;/* this is the mixin! the colon and the semicolon are both important */&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--shiny-button-icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;text-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#880E4F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Some tips:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the mixin is only relevant to the selector it’s being applied to (modulo CSS inheritance rules). As an element author
  it’s your responsability to name this mixin in a way that conveys this. In the example above, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--shiny-button-icon&lt;/code&gt;
  implies you’re styling the icon of the button. If instead you’re applying that style to the text, for example,
  you’re being a bad element author, and your users will shame you on social media.&lt;/li&gt;
  &lt;li&gt;mixins aren’t a panacea. If you look at the &lt;a href=&quot;https://github.com/PolymerElements/paper-checkbox/blob/master/paper-checkbox.html#L34&quot;&gt;paper-checkbox&lt;/a&gt;
  example I mentioned before, you’ll notice no mixins at all! This is because the element is fairly restricting, and
  there’s only so many things you can possibly care about styling. That’s when I tend to prefer individual custom properties vs a mixin.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it, that’s all! We can style ALL the things now, AND get style encapsulation,
and not sacrifice any goats to dragons. Aren’t web components amazing? (Yes they are).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Here’s the JSBin if you want to play with it:
&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/qubila/embed?html,output&quot;&gt;JS Bin on jsbin.com&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.min.js?3.34.2&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&quot;hear-me-talk-about-this&quot;&gt;Hear me talk about this&lt;/h1&gt;
&lt;p&gt;I gave this talk at the Polymer &lt;a href=&quot;https://www.polymer-project.org/summit&quot;&gt;summit&lt;/a&gt;. Hurray, the metaphor is spreading!&lt;/p&gt;

&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/IbOaJwqLgog&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;9c0e7a1b528a4293b63e09f1e3c04044&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Keypress is bananas</title>
   <link href="https://meowni.ca/posts/keypress-is-bananas/"/>
   <updated>2015-06-02T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/keypress-is-bananas</id>
   <content type="html">&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keypress&lt;/code&gt; event works maddeningly differently in Chrome/Safari and Firefox, and this is the story of how I spent two hours discovering that, so that hopefully you don’t have to.&lt;/p&gt;

&lt;h2 id=&quot;keypress-what&quot;&gt;Keypress what?&lt;/h2&gt;
&lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keypress&lt;/code&gt; event is one of the events you get when you mash on the keyboard. It’s special because according to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keypress&quot;&gt;spec&lt;/a&gt;, you should only get a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keypress&lt;/code&gt; event for keystrokes that produce printable characters. So you’ll get it for things like letters and symbols, but not for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;backspace&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;left arrow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s a great event to have if you want to write some as-you-type validation on an input, and you want to be able to dismiss the non-printable characters (which will still generate key events, but are uninteresting to the validation bit).&lt;/p&gt;

&lt;p&gt;Chrome, Safari and IE10 agree with this interpretation, which is great news.&lt;/p&gt;

&lt;p&gt;To be contrarian, Firefox (38; I don’t know about Aurora) &lt;em&gt;always&lt;/em&gt; sends a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keypress&lt;/code&gt; event for anything you type. It’s basically a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keydown&lt;/code&gt; event from what I see. Now you have to get rid of control characters yourself and you get write code that doesn’t make sense on the other platforms! Yay! (not yay)&lt;/p&gt;

&lt;p&gt;I call shenanigans.&lt;/p&gt;

&lt;h2 id=&quot;mind-your-keycodes-and-charcodes&quot;&gt;Mind your keyCodes and charCodes&lt;/h2&gt;
&lt;p&gt;From looking at the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keypress&quot;&gt;spec&lt;/a&gt;, we expect a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keypress&lt;/code&gt; event to have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyCode&lt;/code&gt;, a number code that represents the key you’ve pressed. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;q&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;113&lt;/code&gt;. This is allegedly deprecated, but don’t worry, both Firefox and Chrome implement it, but differently.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;charCode&lt;/code&gt;, the unicode number of the key. This code only exists for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keypress&lt;/code&gt;. Like before, it’s deprecated, but like before, it’s implemented by both browsers. Differently.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt;, the value of the key represented by the event. According to that spec, this one is unimplemented. Worry not, Firefox implements it just fine (Chrome doesn’t). It is the hero we deserve, but not the one we get right now.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;😭&lt;/h2&gt;
&lt;p&gt;What you get out of this is spectacularly annoying. I wrote some &lt;a href=&quot;http://output.jsbin.com/tuboguyido/1/&quot;&gt;code&lt;/a&gt; that basically prints out what the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keypress&lt;/code&gt; event looks like, and found:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As promised, in Chrome/Safari/IE10, we only get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keypress&lt;/code&gt; event for printable things. The event always has the same values for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyCode&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;charCode&lt;/code&gt;, and doesn’t have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/keypress/chrome.gif&quot; alt=&quot;Chrome keypress events&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In Firefox, you get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keypress&lt;/code&gt; event for ALL the things, BUT:
    &lt;ul&gt;
      &lt;li&gt;for printable characters, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyCode = 0&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;charCode&lt;/code&gt; has a sane value.&lt;/li&gt;
      &lt;li&gt;for control characters, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;charCode = 0&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyCode&lt;/code&gt; has a sane value.&lt;/li&gt;
      &lt;li&gt;this is super because if you’ve been testing on the other browsers and have been using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String.fromCharCode()&lt;/code&gt;, you’re going to get hilariously bad results if you use the wrong code. Like how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrow left&lt;/code&gt; could actually be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;see how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt; is kind of nice though? One day, at a browser near you.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/keypress/firefox.gif&quot; alt=&quot;Chrome keypress events&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There, now you know. And knowing is half the battle.&lt;/p&gt;

&lt;h2 id=&quot;ps&quot;&gt;P.S.&lt;/h2&gt;
&lt;p&gt;If you read this in the future and the future doesn’t work like I said it does, either I was wrong (highly likely), or someone fixed something. Let me know and I can make updates.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Why Chromium has code owners</title>
   <link href="https://meowni.ca/posts/chromium-owners/"/>
   <updated>2015-03-24T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/chromium-owners</id>
   <content type="html">&lt;p&gt;My favourite thing about the Chromium code is this &lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/d413b2dcb54d523811d386f1ff4084f677a6d089/chrome/browser/chrome_browser_main_mac.mm#37&quot;&gt;enum&lt;/a&gt; of cats and all the comments in that file. My second favourite thing is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OWNER&lt;/code&gt; files. Guess what this post is about (hint: it’s not about cats NOT EVERYTHING IS ABOUT CATS, OK?)&lt;/p&gt;

&lt;p&gt;Edit: In a clear and deliberate conspiracy, the cats have been removed from Chromium. The old new cool thing is &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/base/pickle.h&amp;amp;q=pickle&amp;amp;sq=package:chromium&amp;amp;type=cs&amp;amp;l=138&quot;&gt;pickles&lt;/a&gt;, and the new new cool thing is &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/base/mac/objc_property_releaser_unittest.mm&amp;amp;l=16&quot;&gt;Count Von Counts&lt;/a&gt;. Bonus points to @thakis for finding that last one. 💁&lt;/p&gt;

&lt;h2 id=&quot;why-should-you-care&quot;&gt;Why should you care?&lt;/h2&gt;
&lt;p&gt;Owners in Chromium are people who own an area of code. This can be a small feature (the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chrome://settings&lt;/code&gt; page) or a giant area (all of the Cocoa UI). You don’t &lt;em&gt;have&lt;/em&gt; to be an owner to be successful – you get to be an owner because you &lt;em&gt;want&lt;/em&gt; to. This usually means that you have contributed a lot to that particular nugget of code, have acquired a slightly unhealthy obsession for it (symptoms: if you’ve whispered “my precious” to a line of code in the last hour, you will make a great code owner one day), and generally care about its well being. I have been trying (unsuccessfully) for years to be an owner of pizza; hit me up if you have any leads.&lt;/p&gt;

&lt;p&gt;Owners are gatekeepers of code, and their main responsibility is making sure the code doesn’t go to shit. Comments that make sense. No copy pasting, no hacks, no soup for you. None of that “I don’t really know how to make this code better so I’m going to merge it and run” nonsense. They are the very model of a modern Major-General, they know the kings of England, and they quote the fights historical.&lt;/p&gt;

&lt;p&gt;TL; DR: owners won’t let you merge crappy code. Imagine if each of the 2000 Chromium commiters merged a random hack in one of the 7 million lines of code we have. IMAGINE. 🔥🔥🔥&lt;/p&gt;

&lt;h2 id=&quot;what-it-means-for-owners&quot;&gt;What it means for owners&lt;/h2&gt;
&lt;p&gt;Realtalk: being an owner means that people will send you a lot of code to review, because your blessing (or “LGTM”) is required for that code to be committed. &lt;a href=&quot;https://codereview.chromium.org/search?closed=1&amp;amp;owner=&amp;amp;reviewer=sky%40chromium.org&amp;amp;cc=&amp;amp;repo_guid=&amp;amp;base=&amp;amp;project=&amp;amp;private=1&amp;amp;commit=1&amp;amp;created_before=&amp;amp;created_after=&amp;amp;modified_before=&amp;amp;modified_after=&amp;amp;order=&amp;amp;format=html&amp;amp;keys_only=False&amp;amp;with_messages=False&amp;amp;cursor=&amp;amp;limit=30&quot;&gt;@sky&lt;/a&gt; is an owner of the Windows UI code, and he does something like 500+ reviews a quarter. And also writes code. And helps me out when I (invariably) break the UI. He’s pretty much the best.&lt;/p&gt;

&lt;p&gt;Basically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;People will ask you general questions when they’re stuck. It’s totally fine not to know the answer – you’ll probably at least know who to point them at.&lt;/li&gt;
  &lt;li&gt;Whenever shit hits the fan and it’s on your turf of code, if no obvious culprit is to be found, you win the lottery and get to fix it. Spoilers: this sometimes means fixing things that you didn’t actually break. Currently, I’m on day 6 of this giant yak shave that I won by fixing a random crash. Regrets, I am them.&lt;/li&gt;
  &lt;li&gt;You get to live the dream and be picky about code. Don’t like a method’s name? A particular comment? Think that there’s a bit of a refactor needed to make this better? You get to ask for it, and guess what: people usually have to listen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;👉 Developers trust owners to not be insane. Owners trust developers not to try to commit stuff behind their back. This is why it works. 👈&lt;/p&gt;

&lt;h2 id=&quot;what-it-means-for-developers&quot;&gt;What it means for developers&lt;/h2&gt;
&lt;p&gt;First, when you’re stuck, you know who to ask questions (an owner!). Second, in order for you to commit any code, you need to get the owners’ approval for your changes.&lt;/p&gt;

&lt;p&gt;Here’s an &lt;a href=&quot;https://codereview.chromium.org/861053004&quot;&gt;example&lt;/a&gt; of a code review. I like to explicitly &lt;a href=&quot;https://codereview.chromium.org/861053004/#msg11&quot;&gt;mention&lt;/a&gt; which owner should review which file, because one person might own multiple files/areas in a given CL (if you’re a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chrome/browser&lt;/code&gt; owner, you own ALL of the things), but might not be required to review all of them.&lt;/p&gt;

&lt;p&gt;So, who owns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;profile_info_cache.cc&lt;/code&gt;? Everyone named in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chrome/browser/profiles/OWNERS&lt;/code&gt; file. On top of that, everyone up the directory tree (so in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chrome/browser/OWNERS&lt;/code&gt;) is also an owner. If you stumble on a directory that doesn’t have an owners file (for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chrome/browser/ui/cocoa/profiles&lt;/code&gt;), just crawl on up until you find the closest one (in this case, you would add an owner from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chrome/browser/ui/cocoa/OWNERS&lt;/code&gt;. This is also useful if you do a fairly innocent refactor that touches a lot of files, like renaming a method. In that case, rather than adding 17 different owners, you can just get one, root owner and run with that.&lt;/p&gt;

&lt;h2 id=&quot;how-you-can-get-owner-files-in-your-project&quot;&gt;How YOU can get owner files in your project&lt;/h2&gt;
&lt;p&gt;If you want to implement owner files for your projects (YAY!), you need to do a couple of things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add some sort of presubmit check so that people can’t commit code without getting all their ducks in a row. If you give people a chance to merge code under the radar, they will. So, don’t.&lt;/li&gt;
  &lt;li&gt;Here’s the Chromium &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/PRESUBMIT.py&amp;amp;l=996&quot;&gt;script&lt;/a&gt;. It will probably most likely not work out of the box, but it could be a useful starting point.&lt;/li&gt;
  &lt;li&gt;Create OWNER files in all the directories that makes sense. Format them in a way that scripts can read them. Here are &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#search/&amp;amp;q=OWNERS&amp;amp;type=cs&amp;amp;sq=package:chromium&quot;&gt;all&lt;/a&gt; the Chromium ones.&lt;/li&gt;
  &lt;li&gt;Owner files can have rules &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/chrome/browser/profiles/OWNERS&amp;amp;l=1&quot;&gt;per subdirectory&lt;/a&gt; but also &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/chrome/browser/profiles/OWNERS&amp;amp;l=15&quot;&gt;per file&lt;/a&gt;. For really tedious file changes (like build files), any committer can be an owner using &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/chrome/common/OWNERS&amp;amp;l=4&quot;&gt;wildcards&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Make sure the owner files are up to date: when people leave teams, remove them. When people start becoming friendly with an area of code, let them know that ownership is an option.&lt;/li&gt;
  &lt;li&gt;Watch how your code gets better over time.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Contributing to Chromium: an illustrated guide</title>
   <link href="https://meowni.ca/posts/chromium-101/"/>
   <updated>2015-02-10T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/chromium-101</id>
   <content type="html">&lt;p&gt;I gave a talk about how to get started contributing to Chromium, but it wasn’t recorded,
and my &lt;a href=&quot;https://speakerdeck.com/notwaldorf/contributing-to-chromium&quot;&gt;slides&lt;/a&gt; by themselves look like cold-medicine induced hallucinations
(which, to be fair, they were). So instead, here is a giant blog post that will take you
through every step from “checking out the code” to “landing the code in the Chromium repo”. It will also come in super handy for mild to moderate cases of insomnia.&lt;/p&gt;

&lt;p&gt;If you just want a TL;DR or a refresher of the commands you might need, check out the &lt;a href=&quot;https://speakerdeck.com/notwaldorf/contributing-to-chromium&quot;&gt;slides&lt;/a&gt;. They’re basically bullet points without the running commentary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: this is a long post. The bug we’re fixing is silly, but will get
us writing actual Chromium code. If you want a
real good-first-bug to fix after this, &lt;a href=&quot;https://code.google.com/p/chromium/issues/list?q=Hotlist:GoodFirstBug&quot;&gt;here&lt;/a&gt; is a nice list. Usually unassigned bugs (with no owner) are free for the taking, but it can also happen that a bug will be assigned to a human who is not actually working on it. Check the activity on it – if there haven’t been any activities in a while, leave a message on the bug or ping the owner and tell them you’d like to work on it!&lt;/p&gt;

&lt;h2 id=&quot;get-your-computer-ready&quot;&gt;Get your computer ready&lt;/h2&gt;

&lt;p&gt;Chrome is giant. It needs a beefy machine (we recommend a 64-bit OS, with at least 8GB of RAM. A separate SSD to hold/build your code will make your life infinitely more pleasant), and a couple dozen goat sacrifices. Even then, building Chromium from scratch is slow. Snails run the half mile faster (fact). This is something you might as well get used to.&lt;/p&gt;

&lt;p&gt;We have a pretty solid set of &lt;a href=&quot;http://www.chromium.org/developers/how-tos/get-the-code&quot;&gt;instructions&lt;/a&gt; on
how to get everything set up. I promise you this page has been used and reviewed a billion times, it’s up to date,
and every step in it is important. Don’t skip steps because you think you don’t need them. You do.&lt;/p&gt;

&lt;p&gt;However, I’ll tell you about the custom &lt;a href=&quot;https://github.com/notwaldorf/.not-quite-dotfiles/blob/master/zsh/chrome&quot;&gt;things&lt;/a&gt; that I use that &lt;em&gt;aren’t&lt;/em&gt; on that page, which I’m pretty proud of.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I always build &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Release&lt;/code&gt; builds, because they’re faster. This means I don’t get as many debug symbols as I would like. That’s fine for me, because I’m a chicken
 and pretty scared of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lldb&lt;/code&gt;, and I debug with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printfs&lt;/code&gt; like this is the 80s anyway&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;I’ve added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;component=shared_library&lt;/code&gt; (so that incremental builds are super fast) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dcheck_always_on=1&lt;/code&gt; (so that even though I have
 a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Release&lt;/code&gt; build, debug asserts still get hit) to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GYP_DEFINES&lt;/code&gt;.  &lt;a href=&quot;http://www.chromium.org/developers/gyp-environment-variables&quot;&gt;Here&lt;/a&gt; are all the ways in which you can set up your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GYP_DEFINES&lt;/code&gt;. I use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chromium.gyp_env&lt;/code&gt; way on Windows (because I don’t understand &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variables) and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment Variable&lt;/code&gt; way on Mac/Linux, because I sort of understand &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exports&lt;/code&gt;. Realtalk, I really don’t know any Windows, and I’m ok with that&lt;/del&gt;. Chromium switched to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gn&lt;/code&gt;; check &lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/mac_build_instructions.md#Faster-builds&quot;&gt;this&lt;/a&gt; out for how to enable the component build with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gn&lt;/code&gt;. The bit about me not knowing any Windows is still true, though.&lt;/li&gt;
  &lt;li&gt;I have a fancy set of &lt;a href=&quot;https://github.com/notwaldorf/.not-quite-dotfiles/blob/master/zsh/chrome#L15&quot;&gt;aliases&lt;/a&gt; like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go_&lt;/code&gt;, so that I don’t have to
 remember about which flags I want to run Chrome with. They come in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doskey&lt;/code&gt; variants on Windows&lt;/li&gt;
  &lt;li&gt;Don’t use cygwin on Windows. It doesn’t play nice with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;depot_tools&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;I use Atom, and have used Sublime as an editor. Last time I checked, XCode beach balled, huffing and puffing, when trying to load the code. Visual Studio works pretty well if you can stand Windows and its insane command prompt. You can use ctags if you want; I don’t. I use a dumb editor, and find code through
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git grep&lt;/code&gt; and the Chromium &lt;a href=&quot;https://code.google.com/p/chromium/codesearch&quot;&gt;codesearch&lt;/a&gt;, because I’m metal like that. You can use anything you want. Literally nobody cares.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt; (Aug 9, 2016): Chromium just switched to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gn&lt;/code&gt;, which means some of the comments below don’t apply. Check these &lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/mac_build_instructions.md&quot;&gt;mac build instructions&lt;/a&gt; for how to make your build fast again, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gn&lt;/code&gt;.
&lt;strong&gt;Edit&lt;/strong&gt; (Feb 17, 2016): I wrote a detailed &lt;a href=&quot;https://github.com/notwaldorf/ama/issues/34#issuecomment-185038702&quot;&gt;answer&lt;/a&gt; that contains a whole bunch of extra tricks to make builds faster.&lt;/p&gt;

&lt;h2 id=&quot;get-your-body-ready&quot;&gt;Get your body ready&lt;/h2&gt;
&lt;p&gt;Chromium has a &lt;a href=&quot;http://www.chromium.org/developers/coding-style&quot;&gt;code style&lt;/a&gt;. Do
not panic if your first review will have 20 comments that are code style nits. It’s
absolutely normal, and nobody thinks less of you. On the contrary, we try to be
extra picky with new people, so that they learn everything as quickly as possible.&lt;/p&gt;

&lt;p&gt;Chromium is hard. I’ve been working on it for two years, and it’s still hard.
There’s a loooot of code, and you’ll spend a fair bit of time looking for the right
bit of code you care about. Don’t be afraid to ask questions if you’re stuck. It took me &lt;em&gt;forever&lt;/em&gt; not to be scared of asking questions, but it turns out all the
people that told me that everyone is nice and helpful were right: everyone IS nice
and helpful, because at some point they were you, the code was as scary then as it is now, and the compiler has never stopped barfing errors since the day it was born.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IRC: there’s a &lt;a href=&quot;http://echelog.com/logs/browse/chromium&quot;&gt;#chromium&lt;/a&gt; room for dev-related questions. It’s a bit of a zombieland outside of PST hours&lt;/li&gt;
  &lt;li&gt;mailing list: &lt;a href=&quot;https://groups.google.com/a/chromium.org/forum/#!forum/chromium-dev&quot;&gt;chromium-dev@google.com&lt;/a&gt;. I strongly recommend to search the archives before you ask a new question. A lot of common things have been asked, and people tend to get a bit grumpy if you ask “how do I get infinite quota  translate API keys” for literally the thousandth time&lt;/li&gt;
  &lt;li&gt;if you’re still stuck and panicked, email &lt;a href=&quot;mailto:noms@chromium.org&quot;&gt;me&lt;/a&gt;. I might not know the answer, and I might be super busy, but I promise to be nice and help in whichever way I can. Gifs of animals doing silly things are encouraged&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;omg-lets-write-some-code&quot;&gt;OMG let’s write some code!&lt;/h2&gt;

&lt;p&gt;We’re going to add a button to Chrome. It’s going to be the best thing ever (second to a freshly opened can of Pringles). For realsies. It will be in this bubble here, and it will open [redacted] (2019 update: I let that URL expire and now it apparently points to nsfw things so uhhhh don’t click it.) in a new tab. This is the before and after:&lt;/p&gt;

&lt;p&gt;&lt;img tabindex=&quot;0&quot; width=&quot;656&quot; src=&quot;/images/chromium/before_after.png&quot; alt=&quot;The before image has 2 buttons in the Chrome profile menu, &apos;switch person&apos; and &apos;go incognito&apos;. The after image has a third button, &apos;Can I have a pony?&apos;, with a star icon, that has been inserted above the other 2 buttons.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(side note: if you don’t see that button in your dev build of Chromium, launch it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--enable-new-avatar-menu&lt;/code&gt;. The UI is enabled by default on all of the released Chromes through a server side flag, but that bit of magic doesn’t run on dev builds, so you need to turn it on yourself)&lt;/p&gt;

&lt;p&gt;I chose this dialog because the easiest way to find your way through code is for there to be a searchable string in there like “Switch Person”. Also I wrote this bubble, so it’s Pretty Clutch™.&lt;/p&gt;

&lt;h4 id=&quot;0-make-a-branch&quot;&gt;0. Make a branch&lt;/h4&gt;
&lt;p&gt;First things first: &lt;em&gt;always&lt;/em&gt; create a new branch for every bug/feature/bit of code you’re working on. Working directly
on the master branch is bad news bears: 1) it’s very unlikely you’re working on one thing at a time, 2) pulling new code from the remote master to your local repo becomes an adventure. .&lt;strong&gt;TL; DR&lt;/strong&gt;: don’t work on master evar. So,&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(´ ▽｀).。ｏ♡ src on master ❥ git checkout -b add-pony-button origin/master
Branch add-pony-button set up to track remote branch master from origin by rebasing.
Switched to a new branch &apos;add-pony-button&apos;
(´ ▽｀).。ｏ♡ src on add-pony-button ❥
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;1-find-the-code&quot;&gt;1. Find the code&lt;/h4&gt;
&lt;p&gt;Hooman, meet &lt;a href=&quot;https://code.google.com/p/chromium/codesearch&quot;&gt;codesearch&lt;/a&gt;. It’s your best friend in Chromium. It knows where all the codes are and who they’re called by, and where interfaces get implemented. I spend so much time with it, I’ll probably send it a Valentine’s Day card this year. Anyway, search for “Switch Person” in there, and get these results&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://code.google.com/p/chromium/codesearch#search/&amp;amp;q=%22switch%20person%22&amp;amp;sq=package:chromium&amp;amp;type=cs&quot;&gt;&lt;img width=&quot;656&quot; src=&quot;/images/chromium/codesearch_1.png&quot; alt=&quot;The search gives two results, described below&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generated_resources.grd&lt;/code&gt; is where most of the
strings in Chrome live. A giant file makes
internationalization sooper easy – you hand out the file to translators, they
give you back the same file in a different language, and at startup, Chrome
decides which file to load based on its locale. Bingo bango, localized UI.&lt;/p&gt;

&lt;p&gt;Some of the results have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACCESSIBLE_NAME&lt;/code&gt; in them, which means that they’re accessibility strings (hint: they’re read out loud by VoiceOver apps). &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IDS_PROFILES_SWITCH_USERS_BUTTON&lt;/code&gt; looks promising though, so let’s see where it’s used.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://code.google.com/p/chromium/codesearch#search/&amp;amp;q=IDS_PROFILES_SWITCH_USERS_BUTTON&amp;amp;sq=package:chromium&amp;amp;type=cs&quot;&gt;&lt;img width=&quot;656&quot; src=&quot;/images/chromium/codesearch_2.png&quot; alt=&quot;The files that are relevant and appear in the search are &apos;profile_chooser_view.cc&apos; and &apos;profile_chooser_controller.mm&apos;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aside from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generated_resources.grd&lt;/code&gt; results from before, we have &lt;em&gt;two&lt;/em&gt; new files!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chrome/browser/ui/views/profiles/profile_chooser_view.cc&lt;/code&gt; – This is in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ui&lt;/code&gt;
  subfolder, which means it’s a UI related file (good sign), so probably a dialog or a bubble. On
  top of that, it’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cc&lt;/code&gt; file in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;views&lt;/code&gt; folder, which means it’s Windows/Linux code&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chrome/browser/ui/cocoa/profiles/profile_chooser_controller.mm&lt;/code&gt; – The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mm&lt;/code&gt; is
  a dead give-away this is a Mac UI file. On OSX we write our UI in Objective-C and drink a lot of wine to forget&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m doing this demo on the Mac, so let’s look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;profile_chooser_controller.mm&lt;/code&gt;. I’ve
written both of these files, so I promise you they’re SUPER similar.&lt;/p&gt;

&lt;h4 id=&quot;2-adding-a-button&quot;&gt;2. Adding a button&lt;/h4&gt;

&lt;p&gt;Ok, so now I’m looking at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;profile_chooser_controller.mm&lt;/code&gt; and here’s how my brain would start nomming this code: that string ID is used in a button that
lives in a method called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-createOptionsViewWithRect:&lt;/code&gt;. This method is called by
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-buildProfileChooserView:&lt;/code&gt;, which in turn is called by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-initMenuContentsWithView:&lt;/code&gt;. You
can go down this rabbit hole for days, but the basic idea is that this is clearly the place where we draw buttons in this bubble.&lt;/p&gt;

&lt;p&gt;If we look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-createOptionsViewWithRect:&lt;/code&gt; in particular, it
does the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;creates a drawing rectangle that’s of a fixed width and fixed height. This is the
  size of each of those buttons. If you’re not familiar with Cocoa (who can blame you),
  the way this works is that we draw everything in
  relative coordinates. We’re basically going to keep this rectangle fixed, and just
  change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; coordinate at which we’re drawing. Also: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y=0&lt;/code&gt; is the bottom of the screen,
  and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y=a billion&lt;/code&gt; is the top of the screen, and we always draw bottom to top.
  Say it with me, “because Cocoa”.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-hoverButtonWithRect:&lt;/code&gt; is a utility function that draws a fancy button with a text,
  an image, and an action selector (that’s Cocoa-speak for “click handler”)&lt;/li&gt;
  &lt;li&gt;If we’re allowed to display the lock button, it creates and draws &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lockButton&lt;/code&gt;.
  Spoilers: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayLock&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; unless you do some Chrome gymnastics I honestly don’t recommend, because they’re way less fun than they sound&lt;/li&gt;
  &lt;li&gt;If we’re allowed to display the incognito button (we are), create and draw it&lt;/li&gt;
  &lt;li&gt;Finally, create and draw a button whose string is “Exit Guest” if we’re a Guest session, or “Switch person” otherwise&lt;/li&gt;
  &lt;li&gt;Did you see how we drew everything bottom to top? Yeah. That’s a thing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hey! We should do the same thing! Let’s add our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ponyButton&lt;/code&gt; right below the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switchUsersButton&lt;/code&gt; (which, again, means it’s being drawn above it ARE YOU HAVING FUN YET???). The highlighted bits are the new code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/notwaldorf/9dda1a00709cc24a5b02#file-1-creating-a-pony-button-mm&quot;&gt;&lt;img width=&quot;656&quot; src=&quot;/images/chromium/code_button.png&quot; alt=&quot;Code showing how to instantiate a pony button&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code we just wrote says that when you click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ponyButton&lt;/code&gt;, we call a method called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-goPoniesGo:&lt;/code&gt;. We should probably write it, so that we can actually test our code. It will only log something to the console for now, because logging code is the best code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/notwaldorf/9dda1a00709cc24a5b02#file-2-adding-the-go-ponies-go-handler-mm&quot;&gt;&lt;img width=&quot;656&quot; src=&quot;/images/chromium/pony_code_1.png&quot; alt=&quot;Code showing how to create the click handler, and add a logging statement to it&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you build and run this, your bubble should look like the “after” image described before,
and clicking the button should spew things on the console.&lt;/p&gt;

&lt;h4 id=&quot;3-making-the-button-go&quot;&gt;3. Making the button go&lt;/h4&gt;
&lt;p&gt;This bit is a leap of faith. We want to open a URL in a new tab, but we don’t
really know how. If you search for things like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open in new tab&lt;/code&gt;, you can hope
to hit some comments, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tabs&lt;/code&gt; are kind of like the prom queen of the browser so you’re going to get a crap load of useless results. Unfortunately for us, I know that we’re looking for a method called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chrome::ShowSingletonTab&lt;/code&gt; (in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chrome/browser/ui/singleton_tabs.cc&lt;/code&gt;). Had I not known this, I think I would have found it, for example, by checking how the
“Settings” item in the hot dog menu (or hamburger menu, call it whatever food you wish) opens the “chrome://settings” tab. It will take some digging.&lt;/p&gt;

&lt;p&gt;If you don’t know how to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShowSingletonTab()&lt;/code&gt;, I would &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;codesearch&lt;/code&gt; again for different
uses of the function. This time, just by looking at the method signature, we
can figure out we should write:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/notwaldorf/9dda1a00709cc24a5b02#file-3-implementing-the-go-ponies-go-handler-mm&quot;&gt;&lt;img width=&quot;656&quot; src=&quot;/images/chromium/pony_code_2.png&quot; alt=&quot;Code showing how to add a line to the click handler to open a new tab&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because the stars aligned and Mercury wasn’t in retrograde, we had all
of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.h&lt;/code&gt; header files already included for this to work. Compile it, run it, and get a pony!&lt;/p&gt;

&lt;h2 id=&quot;send-your-code-for-review&quot;&gt;Send your code for review&lt;/h2&gt;
&lt;p&gt;I don’t know about you, but I’m preeeeeeetty proud of this feature, so I feel we’re ready to send it for review!
Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -am &quot;added pony button&quot;&lt;/code&gt; to commit this file, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git cl upload&lt;/code&gt; to upload it to &lt;a href=&quot;https://codereview.chromium.org/&quot;&gt;codereview&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git cl upload&lt;/code&gt; message, write a meaningful description, a crbug ID, and a blurb about how to
test this. This is what I would write:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/notwaldorf/9dda1a00709cc24a5b02#file-4-sample-cl-description-text&quot;&gt;&lt;img width=&quot;656&quot; src=&quot;/images/chromium/cl_description.png&quot; alt=&quot;Sample CL description. It has a title which is less than 72 characters, a summary, a crbug id, and detailed testing instructions&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if that goes well, this is what your CL (stands for change-list. Comes from the dark days of Perforce) should look like on the site! (that CL doesn’t exist anymore, but here’s a &lt;a href=&quot;https://codereview.chromium.org/1042923003/&quot;&gt;random&lt;/a&gt; CL as an example)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codereview.chromium.org/1042923003/&quot;&gt;&lt;img width=&quot;656&quot; src=&quot;/images/chromium/codereview_1.png&quot; alt=&quot;Sample CL as it renders on codereview&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to test that your CL didn’t break anything, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git cl try&lt;/code&gt;. This will look at what your code touches and run a whole bunch of tests on a whole bunch of platforms.&lt;/p&gt;

&lt;p&gt;In Chromium, code lands only after it’s been &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LGTM-ed&lt;/code&gt;, which means that someone has reviewed it and gave you the thumbs up. If you don’t know to whom to send it for review, pick someone
from your file’s OWNERS. In this case, look at the OWNERS file in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chrome/browser/ui/cocoa&lt;/code&gt;. Owners are people who are responsible for the code,
so they tend to know it best. If they’re too busy for a review or aren’t
entirely familiar with your particular part of the code, they can direct you to
a better reviewer.&lt;/p&gt;

&lt;p&gt;(Side note: please don’t &lt;em&gt;actually&lt;/em&gt; send this pony code out for review. People will be very confused, and not necessarily amused.)&lt;/p&gt;

&lt;h2 id=&quot;ship-it-squirrel-&quot;&gt;Ship it, squirrel! &lt;img class=&quot;emoji&quot; title=&quot;:shipit:&quot; alt=&quot;:shipit:&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/shipit.png&quot; height=&quot;30&quot; width=&quot;30&quot; /&gt;&lt;/h2&gt;
&lt;p&gt;When your CL is reviewed and ready to go, all you have to do is check the “Commit” checkbox, and the commit-queue bots will take care of it. This means that they will run a whole bunch of unit tests again, and if they all pass (or “come up green”), merge your code into the current master branch.&lt;/p&gt;

&lt;h4 id=&quot;oh-noes-trouble&quot;&gt;Oh noes, TROUBLE&lt;/h4&gt;
&lt;p&gt;Sometimes, something goes wrong (or even better, horribly wrong). Your bots could come up red, and then you’ll
get an email from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit-bot&lt;/code&gt; telling you your CL couldn’t land, because you done bungled some tests. This is totally fine – you didn’t break anything yet, because your code wasn’t merged.
Either your tests are actually broken, or some code got committed before you
and you need to rebase, or maybe you’ve just encountered a flaky test and don’t need to do anything. You can go back to your CL, fix your tests, and re-check the
“Commit” box.&lt;/p&gt;

&lt;p&gt;Sometimes you’ll even get to break the tree. I recently tried to land a change
where all my bots were green and as soon as the change landed, it broke 165 tests on each bot. Suuuup.&lt;/p&gt;

&lt;p&gt;It happens. You can revert your CL if you realize this in time, or that day’s sheriff might do it for you (especially if you’re an external committer, aren’t on IRC, etc). In this case, be nice to the sheriff and apologize a bit. Maybe send them a gif. Remember: if you’re stuck, ask for help!&lt;/p&gt;

&lt;h2 id=&quot;good-first-bugs&quot;&gt;Good first bugs&lt;/h2&gt;
&lt;p&gt;We have a &lt;a href=&quot;https://code.google.com/p/chromium/issues/list?can=2&amp;amp;q=Hotlist%3DGoodFirstBug+&amp;amp;colspec=ID+Pri+M+Cr+Status+Owner+Summary+OS+Modified&amp;amp;x=m&amp;amp;y=releaseblock&amp;amp;cells=tiles&quot;&gt;list&lt;/a&gt; of bugs deemed as “good starter bugs”. Sometimes they’re more complicated that we thought, so don’t panic if that’s the case. It’s not you, it’s Chrome :). Protip: in the statuses, “Assigned” with a name in the owner means someone is actually looking at that issue, so it’s probably not a great one to pick.&lt;/p&gt;

&lt;h2 id=&quot;your-turn&quot;&gt;Your turn!&lt;/h2&gt;
&lt;p&gt;That’s it! That’s how you commit code to Chromium! Good luck, and if you do end up landing a CL, send me an &lt;a href=&quot;mailto:noms@chromium.org&quot;&gt;email&lt;/a&gt; or a &lt;a href=&quot;https://twitter.com/notwaldorf&quot;&gt;tweet&lt;/a&gt;. I’d love to see it!&lt;/p&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;e0aa6a0aee1a4a20bd8962ae1d05fa81&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Cat-DNS: learning about DNS with cats</title>
   <link href="https://meowni.ca/posts/cat-dns-cascadia/"/>
   <updated>2014-08-11T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/cat-dns-cascadia</id>
   <content type="html">&lt;p&gt;I talked about &lt;a href=&quot;https://github.com/notwaldorf/cat-dns&quot;&gt;Cat-DNS&lt;/a&gt; at &lt;a href=&quot;http://2014.cascadiajs.com/&quot;&gt;Cascadia.js&lt;/a&gt;, and it wasn’t terrible! There is a video. Of me talking! On the internet! What a future we live in.&lt;/p&gt;

&lt;h2&gt;=^..^=&lt;/h2&gt;
&lt;p&gt;The internet needs more cats. DNS servers are the authority on all things internet.
Therefore, the best DNS server is the one that resolves everything to cats. This talk is about that.&lt;/p&gt;

&lt;p&gt;We’re going to walk through the basics and find out how DNS servers work, how you can talk to a
DNS server if you’re a browser, and how to talk back to a browser if you are a DNS server. I’ll show you how you
can write your own DNS server in less than 200 lines of JavaScript, but perhaps most importantly, why you probably
shouldn’t.&lt;/p&gt;

&lt;p&gt;And have I mentioned the cats? There are definitely cats.&lt;/p&gt;

&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;//www.youtube.com/embed/qDPhW9P44fI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;0a9dcc20fbdc013102b94a47441122ce&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>I don't really want to learn lldb, I just want to fix a crash</title>
   <link href="https://meowni.ca/posts/unscary-lldb/"/>
   <updated>2014-06-23T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/unscary-lldb</id>
   <content type="html">&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lldb&lt;/code&gt; stands for Llama-DB, and is a database of llamas you can use to debug programs
compiled with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang&lt;/code&gt; (lldb is to clang like gdb is to gcc). If you already know how to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gdb&lt;/code&gt;, then
here’s a &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-command-examples.html&quot;&gt;translation&lt;/a&gt; of the common commands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: There is a &lt;em&gt;ton&lt;/em&gt; of tutorials and pages about all of the
awesome features and commands of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lldb&lt;/code&gt;, and how to become a debugging pro.
This is not that. This is the smallest set of things you need to read
to answer the question “what’s making this shit crash”. That’s it.&lt;/p&gt;

&lt;h2 id=&quot;step-1-make-it-go&quot;&gt;Step 1. Make it go&lt;/h2&gt;

&lt;p&gt;If you want to pass a bunch of arguments to your executable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moose&lt;/code&gt;, use&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;´ ▽｀&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.。ｏ♡ src on fix/moose-crash ☀ ❥ lldb &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; moose arg1 arg2
Current executable &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;to &lt;span class=&quot;s1&quot;&gt;&apos;moose&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x86_64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you don’t have arguments, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lldb foo&lt;/code&gt; is enough. This just tells &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lldb&lt;/code&gt;
which executable to care about, but it won’t actually start the process for you.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; run    &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Start or re-start your process
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;   &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Stop your process.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;step-2-make-it-crash&quot;&gt;Step 2. Make it crash&lt;/h2&gt;
&lt;p&gt;Since we (me) are investigating a crash, the first thing you need is a stack trace that
tells you where the crash is. So, start your process in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lldb&lt;/code&gt;, make it crash, and we’ll take it
from there.&lt;/p&gt;

&lt;p&gt;Side bar: I literally typed this blog out while sorting out a crash in the
sign-in bits of Chromium, so all my screenshots are Chromium code. Do not panic.
Your code can crash just as well if you give it enough time and attention.&lt;/p&gt;

&lt;p&gt;Once you hit your crash, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lldb&lt;/code&gt; tells you something like this.
&lt;img src=&quot;/images/2014-06-23/crash.png&quot; alt=&quot;lldb crash&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I can’t tell you how excited I am at that little arrow. It &lt;em&gt;almost&lt;/em&gt; looks non-intimidating. Almost.&lt;/p&gt;

&lt;h2 id=&quot;step-3-breakpoints-its-hammer-time&quot;&gt;Step 3. Breakpoints! It’s hammer time&lt;/h2&gt;
&lt;p&gt;The first thing I did was set a breakpoint at that line to figure out
what’s going on right before things got crashy (because I’m sure you’re dying to
know, my crash was happening because we hit that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DCHECK&lt;/code&gt; which reads
“the item should always be signed in” and, spoilers, it isn’t)&lt;/p&gt;

&lt;p&gt;To set a breakpoint in a file at a specific line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; breakpoint &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--file&lt;/span&gt; profile_chooser_controller.mm &lt;span class=&quot;nt&quot;&gt;--line&lt;/span&gt; 1509&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Awesome discovery: you don’t have to give the full path to the file (which in
Chromium is a nightmare). Also, there’s autocomplete, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;profile_&amp;lt;tab&amp;gt;&lt;/code&gt; gives you
suggestions and happy feelings.&lt;/p&gt;

&lt;p&gt;At this point, I pressed enter a bunch of times (as you do), which ended up
setting that breakpoint 4 times (as it does). So don’t do that. If you ignored that
bit of advice, here’s some helpful breakpoint-related things you can talk to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lldb&lt;/code&gt; about:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; breakpoint list     &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; numbered list of all dem breakpoints
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; breakpoint &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; this is surprisingly not scary!
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; breakpoint delete 4 &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; deletes the 4th breakpoint
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; breakpoint delete   &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; deletes ALL the things. but warns you first.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you don’t like typing, all these commands have super l33t
shortcuts like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br s -f moose.c -l 12&lt;/code&gt;. This intimidates me seven ways to Sunday,
since I’ve &lt;em&gt;just&lt;/em&gt; learnt how to set a breakpoint, and I had to do it on the command
line and I like UIs, but if that’s your jam,
&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-command-examples.html&quot;&gt;here&lt;/a&gt; is that list.
Go forth and conquer.&lt;/p&gt;

&lt;p&gt;If you’ve already started your executable and forgot to set a breakpoint, it’s OK!
Just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+C&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lldb&lt;/code&gt; to pause your program and clean up your room before
your friends come over. When you’re done, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;continue&lt;/code&gt; to resume your process. Amazing!&lt;/p&gt;

&lt;h2 id=&quot;intermission-playing-with-stack-traces&quot;&gt;Intermission: Playing with stack traces&lt;/h2&gt;
&lt;p&gt;Current status: we’ve run our code, we’ve hit the breakpoint. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lldb&lt;/code&gt; rewards you
with a snippet of code around that point. Dat arrow. ❤︎&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-06-23/breakpoint.png&quot; alt=&quot;lldb breakpoint&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More things that you can probably want to do here:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; thread backtrace    &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; stack trace of how we got here
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; up                  &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; move up the stack trace to your parent callee&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;step-4-poke-at-things&quot;&gt;Step 4: Poke at things&lt;/h2&gt;
&lt;p&gt;Once you’re paused, you can inspect the value of a variable in that scope. You
probably want to do that because 90% of the time a thing that shouldn’t be null
is null, because C++.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; frame variable viewMode_&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To step through things, get in the llama car, close the door, and start navimagating:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; step   &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; step into the call at this line. Alias &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;thread step-inst&apos;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; next   &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; skip to the next line. Alias &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;thread step-in&apos;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; finish &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; step out of this call. Terrible &lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;thread step-out&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If at any point you want to restart your process, just type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; again. Don’t worry,
it’s not destructive – you’ll be asked to confirm if you really want to blow
away the frame you’re in. Bam!&lt;/p&gt;

&lt;h3 id=&quot;thats-it&quot;&gt;That’s it!&lt;/h3&gt;
&lt;p&gt;For realsies! You and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lldb&lt;/code&gt; should probably get friendship bracelets now.&lt;/p&gt;
&lt;pre&gt;
  　∩∩
　（ﾟωﾟ）  .。ｏ♡
　　│ │
　　│ └─┐○
　　 ヽ　　　丿
　　　∥￣∥
&lt;/pre&gt;
&lt;p&gt;　　　&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Presenter notes that don't suck</title>
   <link href="https://meowni.ca/posts/presenter-notes-that-dont-suck/"/>
   <updated>2014-05-17T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/presenter-notes-that-dont-suck</id>
   <content type="html">&lt;p&gt;You’ve given a talk. It went great, and now everyone wants to see the slides. Hurray! Before we do anything else: give yourself a high-five. Giving a talk is hard, and you did it! This is something to be proud about.&lt;/p&gt;

&lt;p&gt;Here’s the thing about slides, though: if you did them right, your slides should be pretty sparse. They’ll have very few words, probably in a big font, and some slides will only make sense if you’re talking along. This is extra sad if your presentation wasn’t recorded, or you didn’t record your voice: you’ll give your slides to the Internets and the Internets will be confused.&lt;/p&gt;

&lt;p&gt;At this point, you could be tempted to just add a ton of content to your slides. Please don’t. Fewer words on a slide will force people to listen to &lt;em&gt;you&lt;/em&gt; and not your slide. And that’s where the gems are.&lt;/p&gt;

&lt;h2 id=&quot;starting-point&quot;&gt;Starting point&lt;/h2&gt;
&lt;p&gt;This is the slide I’ll be using as an example. It’s part of &lt;a href=&quot;https://speakerdeck.com/notwaldorf/how-chrome-keeps-users-happy-six-truths-and-a-lie&quot;&gt;this&lt;/a&gt; presentation I just gave about keeping users happy. On its own, it’s a fine looking slide, but unfortunately, it lacks some context. 1% of what? Am I talking about 1% of users? Am I saying I have 1% of all the users? Noooobody knows.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-05-17/original-slide.png&quot; alt=&quot;original slide&quot; style=&quot;width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;attempt-the-first-presenter-notes&quot;&gt;Attempt the first: presenter notes&lt;/h2&gt;
&lt;p&gt;The first thing anyone will tell you (I know this because I &lt;a href=&quot;https://twitter.com/notwaldorf/status/467382129828311040&quot;&gt;asked&lt;/a&gt; Twitter, and this is the first thing it told me) is “export your speaker notes”. I’m making the crazy assumption here you have some presenter notes. If you’re anything like me, you probably have to clean them up a little because the world isn’t ready for how your brain actually works.&lt;/p&gt;

&lt;p&gt;So you export your presentation with presenter notes out of Keynote and into a PDF, and the result is pretty much the worst:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-05-17/exported-presenter-notes.png&quot; alt=&quot;exported presenter notes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Look at all that whitespace! Look how tiny your slide is! Look how that text spans the entire page but it’s in the tiniest font ever. LOOK AT IT. It’s a good time to stop looking at it when your eyes are bleeding. If you upload this presentation into something like Speakerdeck, it will look absolutely ridiculous. Are you angry yet?&lt;/p&gt;

&lt;h2 id=&quot;attempt-the-second-in-slide-presenter-notes&quot;&gt;Attempt the second: in-slide presenter notes.&lt;/h2&gt;
&lt;p&gt;Well, if Keynote can’t be civilized about it, you can take the presenter notes and just paste them at the bottom of the slide. If you set a white background, it even ends up looking like whatever Keynote is attempting, but failing, to achieve. Look! Free consulting for Keynote.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-05-17/white-plain-text.png&quot; alt=&quot;plain text&quot; style=&quot;width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;attempt-the-next-fancy-text&quot;&gt;Attempt the next: fancy text&lt;/h2&gt;
&lt;p&gt;That was ok, but you might run into some problems if your slide background is white, in which case the text will look like it’s part of the slide, rather than a helpful note. So if the problem is that the text is unstyled, let’s style it and make it look like a note! This is the next thing I came up with:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-05-17/fancy-note.png&quot; alt=&quot;fancy text&quot; style=&quot;width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s a little better, but I think this can still end up looking weird if your slide design isn’t a title-subtitle sort of slide. You might have to spend some time and figure out where to best place that text box.&lt;/p&gt;

&lt;h2 id=&quot;alternative-post-it-notes&quot;&gt;Alternative: post-it notes&lt;/h2&gt;
&lt;p&gt;You can also go for a classic post-it, and slap it wherever you have space. The good news is: everyone knows what a post-it is and they won’t think you designed your slide like that. Whew.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-05-17/post-it.png&quot; alt=&quot;post-it note&quot; style=&quot;width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;I don’t know which way is better; I think it will depend a lot on your slide deck design. I just wanted you to know that you don’t have to let Keynote terrorize you with its horribly exported presenter notes. There are alternatives.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Static initializers will murder your family</title>
   <link href="https://meowni.ca/posts/static-initializers/"/>
   <updated>2014-04-22T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/static-initializers</id>
   <content type="html">&lt;p&gt;But only if your family is code.&lt;/p&gt;

&lt;p&gt;So this is a bit of a terrible blog post because a) it’s about a really obscure atrocity that happens in C++ (as opposed to the common atrocities that happen in C++ on the regs) and b) there are not enough funnies in the world to make up for it. I recommend skipping it if you’ve just eaten, are feeling light-headed, or don’t want to make eye contact with C++. As a general policy, you should probably never make eye contact with C++. It can smell fear.&lt;/p&gt;

&lt;h2 id=&quot;programmer-meet-static-initializers&quot;&gt;Programmer, meet static initializers&lt;/h2&gt;
&lt;p&gt;We’re going to be talking about static class objects, or objects defined in a global/unnamed namespace, such as these fellas:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kSquirrel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sad squirrel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Superhero&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// or&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panda_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;also a sad panda&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Static initialization&lt;/em&gt; is the dance we do when creating these objects. This is not a dance we do when we initialize things with &lt;em&gt;constant&lt;/em&gt; data (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static int x = 42&lt;/code&gt;); the compiler sees that the thing after the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt; is constant and can’t change, so it can inline it. However, if you try to initialize a variable by running code (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static int x = foo()&lt;/code&gt;), then this is not a constant anymore, and it will result in a static initializer. In C++11, I think &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; will let you hint to the compiler that the thing after the equal is a constant expression, if it is that, so it can compute it at compile-time. I don’t get to use a lot of C++11, so this is still about nightmares of C++ past, and I don’t think &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; will do away with all of the murders anyway. Finally, the compiler promises you to run all the static initializers before the body of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt; is executed. That, unfortunately, doesn’t mean much.&lt;/p&gt;

&lt;h2 id=&quot;why-static-initializers-are-bad-news-bears&quot;&gt;Why static initializers are bad news bears&lt;/h2&gt;
&lt;p&gt;As Douglas Adams, the inventor of C++ said, static initializers have “made a lot of people very angry and been widely regarded as a bad move”. Apart from being hard to spell, they tend to throw up on your shoes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Static variables in the same &lt;em&gt;compilation unit&lt;/em&gt; (or the same file) will be constructed in the order they are defined. This means that this code is predictable, and always does exactly what you think it does. This is also the last of the good news:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Superhero&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Superhero&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;robin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSidekick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Static variables in &lt;em&gt;different&lt;/em&gt; translation units are constructed in an undefined order. This is so terrible it has its own name: the &lt;a href=&quot;http://www.parashift.com/c++-faq/static-init-order.html&quot;&gt;static initialization order fiasco&lt;/a&gt;. It goes like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;// In x.cpp:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Superhero&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// In y.cpp:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Superhero&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;robin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSidekick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// If that wasn&apos;t believable, imagine it was something like:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// static Superhero robin(BestSuperhero::batman);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// where BestSuperhero is a namespace or a static class and&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// you call batman.getSidekick() in robin&apos;s constructor.&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yup. That’s it. Whether &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x.cpp&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y.cpp&lt;/code&gt; gets compiled first is not defined (because C++), which means if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y.cpp&lt;/code&gt; gets compiled first, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batman&lt;/code&gt; hasn’t been constructed. You know what happens when you call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getSidekick()&lt;/code&gt; on an uninitialized object? Regrets happen.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We’re not done yet. Why have insanely terrible code when you can have insanely terrible EXPENSIVE code! Evan Martin has a really, really good &lt;a href=&quot;http://neugierig.org/software/chromium/notes/2011/08/static-initializers.html&quot;&gt;post&lt;/a&gt; about this, but the tl;dr is that because the static initializers need to happen before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt;, that code needs to be paged, which leads to disk seeks, which leads to awful startup performance. Seriously, read Evan’s post because it’s amazing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;spotting-static-initializers-in-the-wild-an-incomplete-manual&quot;&gt;Spotting static initializers in the wild: an incomplete manual&lt;/h2&gt;
&lt;p&gt;Here are some examples of things that are and aren’t static initializers, so
that at least we know what we’re looking for before we try to fix them.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Both of these are ok, because 0 is a compile time constant, so it can&apos;t&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// change. The const doesn&apos;t make a difference; it&apos;s the thing after&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// the = sign that makes the difference.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Below, both the pointer and the chars in the string are const, so the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// compiler will treat this as a compile-time constant. So this is ok&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// because both the thing before and after the = sign are constant.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;happy panda&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This, however, calls a constructor, so it&apos;s not ok.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sad_panda&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sad panda&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;c1&quot;&gt;// This is not ok, because the thing after the = sign isn&apos;t a const,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// so it can change before b is initialized.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  

&lt;span class=&quot;c1&quot;&gt;// This has to call the Muppet() constructor, and who knows what that&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// does, so it&apos;s definitely not a const, and a case of the static initializers.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Muppet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waldorf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;thems-the-breaks&quot;&gt;Them’s the breaks&lt;/h2&gt;
&lt;p&gt;There’s a couple of ways in which you can fix this, some better than others:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The best static initializer is no static initializer, so try const-ing all your things away. This will take you as far as defining an array of strings, for which you can’t pray the initializer away. (Trivia: Praying The Const Away™ is what I call a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const_cast&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Place all your globals in the same compilation unit (i.e. a massive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;constants.cpp&lt;/code&gt; file). You can certainly try this, but if your project is the giant Snuffleupagus that Chrome is, you might be laughed at&lt;/li&gt;
  &lt;li&gt;Place the static globals inside the function that needs them (or, if they’re the village bicycle, make a getter for them), and define them as function-static variables. Then you know they will be initialized only once, the first time that function is called. Whenever it is called&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That last bullet sounds like black magic, so here’s an example. This is the static initializer that we are trying to fix. Convince yourself that this code is no good:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apples&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pears&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;meerkats&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetBucketThing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can fix it by moving &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bucket&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetBucketThing()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetBucketThing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Sure, it&apos;s a non-trivial constructor, but it will get called once,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// the first time GetBucketThing() gets called, which will be at runtime&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// and therefore a-ok.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apples&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pears&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;meerkats&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yup. That’s pretty much it. If you want more reading on the topic, here’s a neat chromium-dev &lt;a href=&quot;https://groups.google.com/a/chromium.org/forum/#!topic/chromium-dev/p6h3HC8Wro4&quot;&gt;thread&lt;/a&gt; discussing this in more details (and talking about when these static globals are actually cleaned up).&lt;/p&gt;

&lt;h2 id=&quot;mmmmkay&quot;&gt;Mmmmkay.&lt;/h2&gt;
&lt;p&gt;I don’t know why you’ve made it this far. Maybe you thought there was going to be a joke or a prize at the end. There isn’t. There’s just this gif, and you could’ve just scrolled down for it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/3boPPdHk2ueo8/giphy.gif&quot; alt=&quot;puppy&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Presentation slides and writer's block</title>
   <link href="https://meowni.ca/posts/slides-writers-block/"/>
   <updated>2014-04-09T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/slides-writers-block</id>
   <content type="html">&lt;p&gt;I am the poster child for writer’s block. I can’t write the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#ifdef&lt;/code&gt; header guard correctly for a brand new C++ class, I don’t remember the order of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public static void main args&lt;/code&gt; incantation in Java, and for the life of me, I can’t start working on an empty presentation. Not even if you promise me pizza. (Please promise me pizza though.)&lt;/p&gt;

&lt;h2 id=&quot;start-with-an-outline&quot;&gt;Start with an outline&lt;/h2&gt;
&lt;p&gt;There’s already an amazing &lt;a href=&quot;http://speaking.io/plan/an-outline/&quot;&gt;speaking.io post&lt;/a&gt; about writing outlines which you should read. The tl;dr is that you start with the top-level things that you want to talk about (feel free to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s/2Pac/Biggie/g&lt;/code&gt; in that example if a) you have good taste or b) you’re from the East Coast because c) yolo), and then slowly, but with gumption, start developing dem ideas.&lt;/p&gt;

&lt;p&gt;I personally take that post literally and write my outline as a markdown gist. The top-level ideas are ## headers, the supporting points are sub-bullets, and there’s a lot of “???. Profit!” and notes to future-Monica, because present-Monica is usually a jerk.&lt;/p&gt;

&lt;h2 id=&quot;time-to-procrastinate&quot;&gt;Time to procrastinate&lt;/h2&gt;
&lt;p&gt;This is great! You have an outline! You deserve a break. No, really; take a break.&lt;/p&gt;

&lt;p&gt;I let this baby stew for a couple of days, so that it gets nice and tender. Nobody likes an undercooked outline. It’s also not a terrible idea at this point to ask some of your friends to read your outline and tell you if this would be a talk they wouldn’t hate listening to.&lt;/p&gt;

&lt;h2 id=&quot;time-for-skeletor&quot;&gt;Time for Skeletor™&lt;/h2&gt;
&lt;p&gt;Once you think you’ve procrastinated enough and it’s time to actually work on your presentation, you’ll be tempted to start thinking about slide design, typefaces, and the kind of cat gifs you’ll include for bonus points.&lt;/p&gt;

&lt;p&gt;Don’t.&lt;/p&gt;

&lt;p&gt;I mean, definitely include cat gifs, but that time isn’t now. I’m pretty sure “being OCD about typography” is correlated with “being really good at writer’s block”, so I can promise that you’ll waste many evenings choosing drop shadows before you realize how screwed you are for content.&lt;/p&gt;

&lt;p&gt;I’ve sorted this out by having a &lt;em&gt;really&lt;/em&gt; basic presentation &lt;a href=&quot;/includes/skeletor.pdf&quot;&gt;template&lt;/a&gt;, affectionately named Skeletor, that I only use when I work on the content. It’s got a font that doesn’t make me angry, a really basic colour scheme, and I can distinguish between title and filler slides.&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;37416630a2e901311a744eb53c3a6292&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Then, I dump the stewed outline into this presentation – the titles, the bullets, the question marks – and do a dry-run. So that the rehearsal is actually useful, you should probably make sure your (entirely empty) presenter’s notes are visible and editable. If you don’t use presenter’s notes, I don’t even know how you exist. Get some paper.&lt;/p&gt;

&lt;h2 id=&quot;the-forced-rehearsal&quot;&gt;The forced rehearsal&lt;/h2&gt;
&lt;p&gt;“But Monica”, you’ll say, “you barely have any content, what are you even rehearsing?”. And my answer to that is: don’t start sentences with “but”. Also, it turns out that even if you haven’t thought about it before, when you have to start speaking about a slide that says “2Pac &amp;lt;3s the Bay Area”, your first instinct will be to panic and explain why that’s true. There’s the content! You’ll make up some facts, some funnies, some things you should have researched but didn’t because you probably watched House of Cards instead, and you will promptly type these out in your presenter’s notes. Then go back, change your slides/notes, and rehearse again. Bingo-bango, sugar in the gas tank, you’re pretty much done.&lt;/p&gt;

&lt;p&gt;Guess who has a non-empty presentation now, with slides and content? GUESS. (Hint: it’s you).&lt;/p&gt;

&lt;p&gt;Now go fix them fonts.&lt;/p&gt;

&lt;h3 id=&quot;-ヾﾉ-&quot;&gt;♬♪♫ ヾ(*・。・)ﾉ ♬♪♫&lt;/h3&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Code reviews for fun and profit</title>
   <link href="https://meowni.ca/posts/code-reviews/"/>
   <updated>2014-03-31T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/code-reviews</id>
   <content type="html">&lt;h2 id=&quot;stats-a-preamble&quot;&gt;Stats: a preamble&lt;/h2&gt;
&lt;p&gt;I’ve been reading too much about March Madness brackets, so I thought I had to run some numbers around here like the cool kids do. Get your umbrella out, it’s about to rain cold facts.&lt;/p&gt;

&lt;p&gt;In the history of time, &lt;a href=&quot;http://www.ohloh.net/p/chrome&quot;&gt;Chromium&lt;/a&gt; has had 205,095 commits made by 1,943 contributors representing 7,431,088 lines of code. In the last 30 days, there have been 5021 commits, by 637 contributors, including 53 new hoomans.&lt;/p&gt;

&lt;p&gt;I did some advanced Nate Silver analysis here for you, and that’s at least 167 commits and 1+ new committers a day. On average, that’s at least 7 commits an hour. Every hour. All of the hours.&lt;/p&gt;

&lt;p&gt;That’s an imperial ton of new code being added, by what it seems like new people. Imagine if everyone could commit code willy-nilly. Are you imagining a minefield? You should.&lt;/p&gt;

&lt;h2 id=&quot;code-reviews-ftw&quot;&gt;Code reviews ftw&lt;/h2&gt;
&lt;p&gt;Good news for our browser using audience! Chromium isn’t a minefield, and on top of it, has pretty awesome looking code. This comes from the fact that any code changes need to be reviewed and blessed before they can land on the master branch. More eyes means less bugs means you’re less likely to commit broken code and break the internet. And you really don’t want to break the internet.&lt;/p&gt;

&lt;p&gt;Even if you have tests, and everything is going your way, you can write correct, but genuinely shitty code. 7 million lines of kinda-shitty code is not something anyone wants to work with, and are worth investing a little time in fixing.&lt;/p&gt;

&lt;p&gt;Code reviews also bring up the bus factor, which is my favourite sinister nerd metaphor. You know, the &lt;em&gt;buuuuuus&lt;/em&gt; factor. The number of people that can get run over by a bus on a team before that team is royally and epically screwed. If all the code that you write has been closely read by a different person, then you’re probably ok getting run over by a bus every once in a while. But still, you probably shouldn’t. Who would feed your cat?&lt;/p&gt;

&lt;h2 id=&quot;consistent-code-is-the-best-code&quot;&gt;Consistent code is the best code&lt;/h2&gt;
&lt;p&gt;Code &lt;a href=&quot;http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml&quot;&gt;style guides&lt;/a&gt; are sooper neat, and are a huge part of code reviews, because ain’t nobody got time to argue about braces. You can spend that time arguing about imperative vs. functional languages, which is a much better use of everyone’s time. Having a strict and detailed style guide means that, even though it’s probably going to piss off some very opinionated people, all of the code will look the same, all the time, regardless of who wrote it. You can jump into any area of Chromium and feel at home, because nobody went crazy with the whitespace.&lt;/p&gt;

&lt;p&gt;And trust me, it only takes a week to get over the wrong kind of braces.&lt;/p&gt;

&lt;h2 id=&quot;dont-be-scared&quot;&gt;Don’t be scared&lt;/h2&gt;
&lt;p&gt;We’ve reached the point in the blog post where I confess I am a terrible code reviewer. I am incredibly scared of reviewing code I haven’t written. Guess what: in the case of Chromium, that’s most of it.&lt;/p&gt;

&lt;p&gt;Reviewers are usually picked from a list of &lt;a href=&quot;http://dev.chromium.org/developers/owners-files&quot;&gt;owners&lt;/a&gt;, which is a group of people that is intimate enough with that area of code that they’ve taken it out to dinner a couple of times. They’re the ones that have the final say on whether the code is ok, and who make sure that little neighbourhood of code isn’t a minefield. Even if you’re not an owner, your team mates will probably ask you for a first review of their code, to make the owners’ lives easier. You will be tempted to panic and not want to take responsibility for it. You will be tempted to run away from confrontation and agree with all of their changes.&lt;/p&gt;

&lt;p&gt;Don’t. It doesn’t help anyone, and it will be like you’re not even there. You were asked for a review because people trust your judgement and value your opinion. So give it. The worst thing that can happen is that they will disagree, and you will have a polite conversation about it. The best thing that can happen is amazingly awesome code. So, have a little courage, and be the little reviewer that could.&lt;/p&gt;

&lt;h2 id=&quot;dont-be-a-jerk&quot;&gt;Don’t be a jerk&lt;/h2&gt;
&lt;p&gt;Jerks are the worst code reviewers. Generally, people tend to get very defensive when faced with criticism, and they’ll get exponentially more defensive if that criticism comes in a harsh, patronizing voice. Defensive people aren’t open to discussions, and it will make the review experience painful for everyone.&lt;/p&gt;

&lt;p&gt;Don’t be a control freak either. You might disagree with the names of variables and functions, but unless you have good suggestions, you might want to consider conceding those points.&lt;/p&gt;

&lt;p&gt;The moral here is: the code you’re reviewing was written by a smart human. Treat them like one.&lt;/p&gt;

&lt;h2 id=&quot;what-makes-a-great-code-reviewer&quot;&gt;What makes a &lt;em&gt;great&lt;/em&gt; code reviewer&lt;/h2&gt;
&lt;p&gt;Good code reviewers are diligent: they enforce the style guide, they make sure you’ve documented the new code, and they aren’t scared of  making you shave a yak or four if that’s needed (this includes both yaks that you have conjured and the ones you’ve accidentally stumbled upon).&lt;/p&gt;

&lt;p&gt;Even better reviewers will try to help the author of the code learn. This is a very hard stack of plates to balance: on one hand you don’t want to be lazy and offer really vague advice that will waste the programmer’s time, and on the other hand you don’t want to spoon-feed them every single character of code. I don’t think there’s a magic formula here: this comes with experience, and with your knowledge of the person you’re reviewing.&lt;/p&gt;

&lt;p&gt;The best code reviewers are usually right, and always humble. They’ll always admit when they’re wrong and they’ll back away from points that are too annoying (“yes, the way I suggested is better, but I see your point that it’s way, way too much effort, and I agree it’s not worth it”).&lt;/p&gt;

&lt;h2 id=&quot;code-reviews-are-kind-of-social&quot;&gt;Code reviews are kind of social&lt;/h2&gt;
&lt;p&gt;A neat/fun thing that happens even in a project as big as Chromium is that programmers and reviewers will form specific reviewing relationships.&lt;/p&gt;

&lt;p&gt;My favourite reviewer used to leave pretty vague comments when the general approach of one of my patches was bad. At first the comments didn’t make any sense, but because I didn’t want to look dumb, I’d spend four hours trying to figure out what they meant. Somebody who isn’t me would probably just go back and ask for a clarification, and that would define their reviewing relationship. However, I kind of really enjoy this sort of code sherlocking, because by the time I figured out what they meant, I would have learned a whole bunch of new things, fixed my code, replaced it with badass code, and would be genuinely excited. And that’s why they’re &lt;em&gt;my&lt;/em&gt; favourite reviewer, but not necessarily the best reviewer. Our styles just match really well.&lt;/p&gt;

&lt;h2 id=&quot;how-to-level-up-as-a-code-reviewer&quot;&gt;How to level up as a code reviewer&lt;/h2&gt;
&lt;p&gt;First, become comfortable with the style guide. The first thing you should do for every review is go through all of the new code, and find all the nits. Is the indentation ok? Do the variable names follow the naming convention? Have new functions or parameters been documented correctly?&lt;/p&gt;

&lt;p&gt;Once you’re done with that, ask yourself if you understand what the code does. If you can’t, the next person won’t either. It’s easy to think you’re dumb and the code is great, but that’s almost never true. Does the new code make sense where it is? Should it be in a different class? Should it be a class or a helper function? Is this code duplicated anywhere else?&lt;/p&gt;

&lt;p&gt;Make sure that if the code can be tested (this, sadly, isn’t always true), it is tested. Don’t be afraid to ask for tests if they’re not there.&lt;/p&gt;

&lt;p&gt;Finally, ask yourself if tomorrow you’d be comfortable fixing a bug in the code. If it looks scary or confusing to you, it will probably look scary or confusing to everybody else. Remember: only you can prevent forest fires!&lt;/p&gt;
</content>
 </entry>
 
 
 
 
 
 <entry>
   <title>When pull requests get tricky</title>
   <link href="https://meowni.ca/posts/tricky-pull-requests/"/>
   <updated>2014-02-25T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/tricky-pull-requests</id>
   <content type="html">&lt;p&gt;Imagine this: you have forked a repo a long time ago and have since been in a happily committed relationship with the master branch, modifying files and committing from the hip.&lt;/p&gt;

&lt;p&gt;In case you have doubts about the likelihood of this scenario, we’re talking about my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notwaldorf.github.com&lt;/code&gt; blog branch, which I forked from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;holman/left&lt;/code&gt;. All my changes are on the master branch so that GitHub can do its magic gh-pages trick and just Make Things Work™. This could also happen for repos you’ve forked and mucked around with, but never thought you’d ever contribute to.&lt;/p&gt;

&lt;p&gt;Because you’re a good open sorcerer, you might, at some point, want to send a pull request to fix a thing in the original repo. If you’re anything like I am, you are now in a bit of a terrible situation because your fork’s tip of tree has advanced and diverged quite a bit from the upstream repo, so any pull requests you send out will be polluted with code that doesn’t belong in them.&lt;/p&gt;

&lt;p&gt;At this point, you probably have some regrets. Let’s not dwell on them. Here’s the set of steps that will help you navigate this minefield you find yourself in. They’re not special; I just couldn’t find them all in one place, and wanted a summary for the future. &lt;a href=&quot;https://twitter.com/kmrhb&quot;&gt;Kamal&lt;/a&gt; figured most of this out, because he is a git wizard, while I am, most definitely, not.&lt;/p&gt;

&lt;h2 id=&quot;set-up-your-upstream&quot;&gt;Set up your upstream&lt;/h2&gt;
&lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote&lt;/code&gt; doesn’t show you a branch called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upstream&lt;/code&gt;, you need to add one:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add upstream https://github.com/user/repo_you_forked.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;set-up-a-clean-branch-for-your-fix&quot;&gt;Set up a clean branch for your fix&lt;/h2&gt;
&lt;p&gt;Step into your tardis and branch from when you were last in sync with the upstream. In my case, this was when I initially created my fork.
A dull perusing of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reflog&lt;/code&gt; should point you to the right sha. Then,&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout -b pr_branch
git reset --hard sha_from_the_past
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;get-your-changes-in&quot;&gt;Get your changes in&lt;/h2&gt;
&lt;p&gt;Here you have two options. If your changes are tiny, or you know exactly what they are, you can just manually reapply them. And by that I mean copy paste the changes into the right files, like a barbarian. For the record, this is my preferred approach. I am a barbarian. I live in the git stone age.&lt;/p&gt;

&lt;p&gt;Alternatively, you can go the fancy route with&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout -p master file_to_modify
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will look at the diff between master (which is in the future), and your working copy (we are in the past) and let you pick and choose individual hunks. Having taken a moment and appreciated how amazing this last sentence was, you can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hit &lt;em&gt;s&lt;/em&gt; to split the hunks into smaller hunks&lt;/li&gt;
  &lt;li&gt;hit &lt;em&gt;y&lt;/em&gt; or &lt;em&gt;n&lt;/em&gt; to pick or skip a hunk.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’ve touched any files, it would be a good time to do your familiar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add/git commit&lt;/code&gt; dance.&lt;/p&gt;

&lt;h2 id=&quot;merge-the-upstream-changes-in&quot;&gt;Merge the upstream changes in&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git fetch upstream  # You won&apos;t see any changes in git log. Don&apos;t panic yet.
git merge upstream/master  # Some wild upstream changes appear in git log.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;--t-t-t-test-your-cha-an-ges--&quot;&gt;♫ ♪ T-t-t-test your cha-an-ges ♫ ♪&lt;/h2&gt;

&lt;h2 id=&quot;upload-your-branch&quot;&gt;Upload your branch&lt;/h2&gt;
&lt;p&gt;This is the last step. If you want, you can rename your branch before uploading it. I usually do, because my original branch names tend to be silly. After this, you can go and look at your branch in GitHub and be delighted with the progress you’ve made. Time to send out that pull request!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push origin pr_branch:possibly_new_branch_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
Hope this helped!&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Ruby for Canadians: an instruction manual</title>
   <link href="https://meowni.ca/posts/ruby-eh/"/>
   <updated>2014-02-25T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/ruby-eh</id>
   <content type="html">&lt;p&gt;One of the hardships about being Canadian is that most programming languages are quite simply, rude. Descriptions like ‘imperative’ and ‘declarative’ are enough to fill even the most impolite of Canadians with a vague sense of discomfort. Fear no more! Ruby is the sort of language that addresses all these concerns, and adds a familiar, maple-syrupy feel to your code. &lt;a href=&quot;https://github.com/notwaldorf/ruby-eh&quot;&gt;Here&lt;/a&gt; are the codes, for your perusal.&lt;/p&gt;

&lt;h2 id=&quot;theres-no-such-thing-as-too-polite&quot;&gt;There’s no such thing as ‘too polite’&lt;/h2&gt;
&lt;p&gt;Ruby lets you open your classes and teach your fellow programmers some basic manners:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;please&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:eh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:please&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:eh?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:please&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:pardon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:please&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:pardon?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:please&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Kernel&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sane_puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:puts&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:giver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:puts&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sane_puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;If you don&apos;t mind, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can write correct and civilized code like you’ve always wanted:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;giver&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;maple syrup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;please&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eh?&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# If you don&apos;t mind, purys elpam&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dont-forget-about-quebec&quot;&gt;Don’t forget about Quebec&lt;/h2&gt;
&lt;p&gt;Ruby is the first language to pioneer French as the one true language. We have translated all the methods in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&lt;/code&gt; and stored them in a dictionary called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translations&lt;/code&gt;, that contains entries of the form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:english_foo =&amp;gt; :french_foo&lt;/code&gt;. A small iteration,&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we can write glorious code that would make Quebec proud&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;articles_aleatoires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;matrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;echantillon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;articles_aleatoires&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;canadian-slang&quot;&gt;Canadian slang&lt;/h2&gt;
&lt;p&gt;Fans of &lt;a href=&quot;http://en.wikipedia.org/wiki/Bob_and_Doug_McKenzie&quot;&gt;Bob and Doug McKenzie&lt;/a&gt; can breathe a sigh of relief to know that Ruby speaks the language of the Great White North, eh?&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sane_to_s&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:to_s&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sane_to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;. Take off, hoser.&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; raise ArgumentError&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ArgumentError: uncaught throw ArgumentError. Take off, hoser.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;digression-for-non-canadians&quot;&gt;Digression for non-Canadians&lt;/h2&gt;
&lt;p&gt;Of course, you can use this idea of open classes for truly magical features. Good code is nothing if not mildly interesting.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fixnum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sane_equals&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:==&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sane_equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; 4 == 4&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; 4 == 5&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;unicode&quot;&gt;Unicode&lt;/h2&gt;
&lt;p&gt;This is where this post starts being less Canadian and more flat out crazy.&lt;/p&gt;

&lt;p&gt;Ruby is down with Unicode in identifiers. That’s because Ruby is down with pretty much everything. The only thing I have yet to convince Ruby to do is to let me alias keywords, and I’m pretty sure that’s just because I haven’t tried hard enough.&lt;/p&gt;

&lt;p&gt;If you add a comment to gently nudge at an encoding, you too can write this production ready code:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# encoding: utf-8&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;☢&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sane_puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;BOOM&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Guess what calling ☢ will do. GUESS.&lt;/p&gt;

&lt;p&gt;Unicode can fill your boring, profesh code with whimsy:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;☆&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;☂&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;☎&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our advanced readers can also define a function named U+00A0, the non-breaking space, as seen &lt;a href=&quot;http://www.rubyinside.com/the-split-is-not-enough-whitespace-shenigans-for-rubyists-5980.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;bare-words&quot;&gt;Bare words&lt;/h2&gt;
&lt;p&gt;We all know that Ruby has bare words from Gary Bernhardt’s &lt;a href=&quot;https://www.destroyallsoftware.com/talks/wat&quot;&gt;Wat&lt;/a&gt; talk, but did you know Ruby also allows you to have bare words as function names? Because that’s totally a thing you’d want. Thanks to &lt;a href=&quot;http://99designs.com/tech-blog/blog/2012/10/30/abusing-ruby-for-fun-and-profit/&quot;&gt;Richo Healey&lt;/a&gt; for the example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_exec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method_missing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Splat args if passed in from a parent call&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NameError&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;method_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NameError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NameError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Defining such a function doesn’t even look that improper, which is why I recommend moving the above code into a separate .rb file, deep at the bottom of a folder barrel.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:&quot;take off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;♫ ♪ Coo loo coo coo, coo coo coo coo ♬ ♪&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This leads to the most excellent of results, and a job well done:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; If you don&apos;t mind, ♫ ♪ Coo loo coo coo, coo coo coo coo ♬ ♪&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/duckinator&quot;&gt;Nik Markwell&lt;/a&gt; has a neat implementation of a saner, more &lt;a href=&quot;https://gist.github.com/duckinator/d08df4d312139a447738&quot;&gt;constrained&lt;/a&gt; version of this, which ends up looking like&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, being practical and sane isn’t the Canadian way. If it were, most Canadians wouldn’t live in a place where 11 months of the year the air hurts your face. We don’t stand for useful applications of bare functions, and nor should you.&lt;/p&gt;

&lt;h2 id=&quot;next-on-our-agenda&quot;&gt;Next on our agenda&lt;/h2&gt;
&lt;p&gt;Convincing the W3C that the California Style Sheets spelling of ‘colour’ and ‘grey’ is the only appropriate one. Do not lose faith, Canadians. Now that the rest of the world has accepted curling as a sport, they’re ready to accept anything.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Cat-DNS: a DNS server that resolves everything to cats</title>
   <link href="https://meowni.ca/posts/go-cat-dns-go/"/>
   <updated>2014-02-18T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/go-cat-dns-go</id>
   <content type="html">&lt;p&gt;The internet needs more cats. DNS servers are the authority on all things internet. Therefore, the best DNS server is the one that resolves everything to cats. Guess what kind of DNS server this is (Hint: it’s the cat kind).&lt;/p&gt;

&lt;h2 id=&quot;making-it-go&quot;&gt;Making it go&lt;/h2&gt;

&lt;p&gt;First, get the &lt;a href=&quot;https://github.com/notwaldorf/cat-dns&quot;&gt;code&lt;/a&gt;, and the npm packages you need (the instructions are with the code). To run, start the server as a privileged process. This is because to be a DNS server, you need to be a UDP server on port 53. This is a small numbered port, which means it needs superpowers. This is how your run it:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
sudo node cat-dns.js
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You also need to somehow set your DNS server to be localhost. On a Mac, I do this by creating a new (wi-fi) interface (called Cats), in my Network preferences, and setting its DNS server to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;. You could do this on your normal interface, but this makes switching back and forth easier.&lt;/p&gt;

&lt;h2 id=&quot;warnings&quot;&gt;Warnings&lt;/h2&gt;
&lt;p&gt;While you’re playing with this, pretty much nothing on your computer that requires the internet works. Except for your browser. And then that’s mostly cats. So being able to deactivate this easily is kind of key (I know. You might think “Why would I ever want to deactivate cats?”, but trust me on this one). I also recommend killing all the things that need to call the mothership (google hangouts, twitter feeds, dropbox, iMessage), because they will not like your sassy cat answers, and will slow everything down.&lt;/p&gt;

&lt;h2 id=&quot;you-are-ready&quot;&gt;You are ready&lt;/h2&gt;
&lt;p&gt;Go in your browser to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.google.com&lt;/code&gt; and wait a bit. You should see a cat. Go to a different website. Another cat. Congratulations. Your internet is now all cats.&lt;/p&gt;

&lt;h2 id=&quot;wait-what&quot;&gt;Wait, what?&lt;/h2&gt;
&lt;p&gt;Do not panic. While I recommend you don’t look at the source because it’s gross, if you do look at the source, you’ll notice all it does is resolve any hostname to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;54.197.244.191&lt;/code&gt;, which is a magical place on the internet that has cats. My friend &lt;a href=&quot;https://github.com/cpatulea/cats&quot;&gt;@eigma&lt;/a&gt; made it, and is hosting it, so please try not to kill all the cat bandwith at once. You could also resolve everything to localhost, and serve your own for now cats on an http server on port 80. But then you’d have to store your own cats locally, and that is animal cruelty. Thankfully, for now, while that magical static IP exists, you don’t have to.
That’s it, that’s all.&lt;/p&gt;

&lt;h2 id=&quot;i-need-to-know-more&quot;&gt;I NEED TO KNOW MORE&lt;/h2&gt;
&lt;p&gt;Here’s the little &lt;a href=&quot;http://notwaldorf.github.io/posts/oops-cat-dns/&quot;&gt;summary&lt;/a&gt; I wrote originally about how DNS servers work. Basically, cat-dns ends up doing this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gruesomely parse the query from the client. I used &lt;a href=&quot;http://www.zytrax.com/books/dns/ch15/&quot;&gt;this&lt;/a&gt; as a reference on what each of the fields in the message sections are, because the spec itself is very dry. This was the worst part, because the message sections are sequences of bits that don’t add up to bytes on any sane boundary, so you have to work with bit arrays, which is nobody’s idea of fun. Anyway, a spec is a spec.&lt;/li&gt;
  &lt;li&gt;assemble the DNS answer. The answer is mostly the same for each query – the only thing that changes is the content of the query (i.e. the hostname you requested). And you copy that from the query, so it’s not a big deal.&lt;/li&gt;
  &lt;li&gt;always returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;54.197.244.191&lt;/code&gt; as the resolved IP, unless you’re requesting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imgur.com&lt;/code&gt;. Then it gives you an actual IP for imgur that I got from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nslookup&lt;/code&gt;. Imgur stores our cats, so we need to be able to get to them. :)&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Dear sir or madam: the bookmarklet you didn't know you needed</title>
   <link href="https://meowni.ca/posts/dear-sir-or-madam/"/>
   <updated>2014-02-11T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/dear-sir-or-madam</id>
   <content type="html">&lt;p&gt;Do you sometimes feel the internet is holding you hostage? Don’t you wish the internet would &lt;em&gt;look&lt;/em&gt; like it’s holding you hostage? Worry no more! &lt;a href=&quot;https://github.com/notwaldorf/dear-sir-or-madam&quot;&gt;Dear-sir-or-madam&lt;/a&gt; is a bookmarklet that makes web pages look like they’re ransom notes. For example, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Hbcj9jE.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-use&quot;&gt;How to use&lt;/h2&gt;
&lt;p&gt;Bookmark this by dragging it to your bookmark bar: &lt;a href=&quot;javascript:var i,s,ss=[&apos;//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js&apos;,&apos;//rawgit.com/notwaldorf/dear-sir-or-madam/master/ransom-it.js&apos;];for(i=0;i!=ss.length;i++){s=document.createElement(&apos;script&apos;);s.src=ss[i];document.body.appendChild(s);}void(0);&quot;&gt;ransomify!&lt;/a&gt;.
Then go to a non-https webpage, and hit that bookmark. Then, wait a bit. Then, BAM. Ransomified.&lt;/p&gt;

&lt;h2 id=&quot;disclaimers-disclaimers&quot;&gt;Disclaimers? Disclaimers!&lt;/h2&gt;
&lt;p&gt;This doesn’t work with https websites at the moment (or possibly forever). Also, I wrote most of it in bed, at 7am, after insufficient levels of caffeine, so you can count on this being top drawer code. It’s not the fastest it can be, but it’s definitely not the n^2 abomination I wrote in the first iteration either.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Oops, I accidentally the whole DNS</title>
   <link href="https://meowni.ca/posts/oops-cat-dns/"/>
   <updated>2014-02-06T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/oops-cat-dns</id>
   <content type="html">&lt;p&gt;Here is my confession, internet: I am writing a cat DNS. That is, a DNS server that resolves everything to cats. You want your email? Cat! You want to check the weather? Cat! It’s always cat.&lt;/p&gt;

&lt;h2 id=&quot;wait-why&quot;&gt;Wait why?&lt;/h2&gt;
&lt;p&gt;We were talking at work about DNSes, and it turns out I only &lt;em&gt;hand wavingly&lt;/em&gt; know how they work. I also like things that troll you. The reason why this post is about what I’m doing and not about what I’ve done, is because my server isn’t done yet. 
Let me try to explain.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The DNS &lt;a href=&quot;http://tools.ietf.org/html/rfc1035&quot;&gt;spec&lt;/a&gt; is ridiculous. I genuinely don’t want to parse it; It’s got a billion fields, it’s written in Courier New, and it is really boring. Pros: I have found a nodejs project on github that I’m working from. Cons: it doesn’t work for me.&lt;/li&gt;
  &lt;li&gt;Testing the DNS server is ridiculous. You take your DNS server for granted, dear reader. I know this, because the moment I set my crappy, barely-running, returning-nothing service as my DNS, a hundred thousand requests started coming in. You see, every service in the universe (gmail, hangouts, apple notifications, twitter) polls their mothership every second to check for updates. All these polls come to your server. All you want is to try to go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.google.com&lt;/code&gt; in a tab and see what happens. It meeps, that’s what happens. MEEP.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dns-how-do-it-do-it&quot;&gt;DNS: How do it do it?&lt;/h2&gt;
&lt;p&gt;You know how DNS works. You give a server a human readable hostname, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.google.com&lt;/code&gt;, and it gives you back the IP address (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;74.125.226.113&lt;/code&gt;) where the thing you are looking for actually lives. Here’s pretty much how it goes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You type in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.google.com&lt;/code&gt;. We’re off to the races!&lt;/li&gt;
  &lt;li&gt;This goes to a &lt;em&gt;recursive caching name server&lt;/em&gt;, which, after doing some work, will give you the IP you need. This name server has a list of hints, such as addresses of &lt;em&gt;root&lt;/em&gt; name serves, and most likely a cache of popular requests. Let’s say it doesn’t have an answer cached, which means it will go ask a &lt;em&gt;root&lt;/em&gt; nameserver.&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;root&lt;/em&gt; nameserver might not know the IP of your service, but knows the IP of the top level domain you need to speak to (in this case, the .com one). It also responds with ‘I don’t know, but I bet you this other IP does’&lt;/li&gt;
  &lt;li&gt;The top level domain server (e.g. the .com one) knows you want something about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google.com&lt;/code&gt;, so it will tell you where the google &lt;em&gt;authoritative&lt;/em&gt; name server is.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;authoritative&lt;/em&gt; name server is the best. It knows things without having to ask anyone else. The google authoritative name server is going to report back with the IP you want. Bingo bango, sugar in the gas tank.&lt;/li&gt;
  &lt;li&gt;The caveat here is that you have to ask it only about things it knows about. If you end up asking a google authoritative server about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notwaldorf.github.com&lt;/code&gt;, it’s most likely going to apologize politely and tell you it doesn’t know.&lt;/li&gt;
  &lt;li&gt;Addendum: @pphaneuf says this is technically incorrect (which is the best kind of incorrect) because all non recursive servers are authoritative about &lt;em&gt;something&lt;/em&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.com&lt;/code&gt; one is authoritative about who you need to talk to when you want &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.com&lt;/code&gt;. @pphaneuf also writes DNSes for a living though, so his level of knowledge is over 9000.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, this is mostly a lie, as in real life all of these &lt;em&gt;recursive&lt;/em&gt; servers that you hit first do a lot of caching. Imagine doing this 4+ step dance every time someone typed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.google.com&lt;/code&gt; in their browser. IMAGINE.&lt;/p&gt;

&lt;p&gt;Cat DNS is technically a &lt;em&gt;recursive caching&lt;/em&gt; name server (because it’s the first one you hit), a &lt;em&gt;root&lt;/em&gt; one, and an &lt;em&gt;authoritative&lt;/em&gt; one, mostly authoritative about cats. Cat DNS knows everything: it’s cats. Cats, cats, cats. This also means it should be super simple to implement.&lt;/p&gt;

&lt;h2 id=&quot;some-code-deets&quot;&gt;Some code deets&lt;/h2&gt;
&lt;p&gt;Things communicate with DNS servers over UDP on port 53. A couple of things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;53 is a small number for a port, which means it’s privileged. Sudo that with care.&lt;/li&gt;
  &lt;li&gt;You talk to these servers over UDP. UDP is great because it doesn’t have a state, doesn’t do any handshakes, offers no guarantees, and is used for sending a small chunk of data. You know what’s small? The IP of a cat.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;so&quot;&gt;So&lt;/h2&gt;
&lt;p&gt;Tune in next week for results on how this actually worked in practice, once I actually get around to writing dem codes.&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Cocoa gems or: how this isn't about reimplementing Ruby in Objective-C</title>
   <link href="https://meowni.ca/posts/cocoa-gems/"/>
   <updated>2014-01-30T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/cocoa-gems</id>
   <content type="html">&lt;p&gt;Because that would be crazy. Crazy is in the next blog post.&lt;/p&gt;

&lt;p&gt;I’ve had to write a sizeable chunk of (fairly mediocre) Objective-C code recently, and I’ve formed the following opinions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s easier if you just get over the thing with the brackets&lt;/li&gt;
  &lt;li&gt;Event listeners are sooper cool&lt;/li&gt;
  &lt;li&gt;Standard Cocoa controls are great if you want them to look exactly like Apple wants them to look like&lt;/li&gt;
  &lt;li&gt;If you disagree with the above point, you’re going to have to play subclass bingo&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;subclass-bingo&quot;&gt;Subclass bingo&lt;/h2&gt;
&lt;p&gt;You’re a subclass bingo winner when you’ve made a custom class out of all of the NSControls. If this sounds ridiculous, it just means you haven’t tried hard enough.&lt;/p&gt;

&lt;p&gt;I started playing subclass bingo at the same time I started mumbling Cocoa, which was two months ago; I relied on the internet a lot for help. Sometimes the internet let me down, as it is wont to do, and then I had to ask actual humans things that in retrospect were fairly trivial. To save you from bringing a pox on both your houses, here are three (3) custom controls that you might one day look for.&lt;/p&gt;

&lt;p&gt;All of them live in the &lt;a href=&quot;http://www.chromium.org/Home&quot;&gt;Chromium&lt;/a&gt; code zoo now. Token feeding and photography sessions are held three times a day, weather permitting.&lt;/p&gt;

&lt;h2 id=&quot;nsbutton-with-custom-padding&quot;&gt;NSButton with custom padding&lt;/h2&gt;
&lt;p&gt;By default, if you have an NSButton that has an image and a title, these will be squished right next to each other. This doesn’t always look very pretty. By default, we get the thing on the left. We want the thing on the right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-01-30-button-padding.png&quot; alt=&quot;NSButton with padding&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The way we’re going to fix this is by creating a custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSButtonCell&lt;/code&gt;, and overriding its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-drawTitle&lt;/code&gt; method (I actually mean &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-drawTitle:withFrame:inView:&lt;/code&gt;, but I’m going to keep dropping the other parameters to make things look less scary. You can find everything in the &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/cocoa/reference/applicationkit/classes/NSButtonCell_Class/Reference/Reference.html&quot;&gt;docs&lt;/a&gt;, which are quite lovely).&lt;/p&gt;

&lt;p&gt;If you also want to give your button a left margin (I did. I wanted that), you can also override &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-drawImage&lt;/code&gt; and add some spacing in there. The only thing you need to keep in mind is that because you’re adding all this spacing to the cell, you’ll need to manually update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-cellSize&lt;/code&gt;, so that the correct value gets returned and your title isn’t cut off.&lt;/p&gt;

&lt;p&gt;The full implementation is &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/chrome/browser/ui/cocoa/browser/profile_chooser_controller.mm&amp;amp;l=345&quot;&gt;here&lt;/a&gt;, and its use is &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/chrome/browser/ui/cocoa/browser/profile_chooser_controller.mm&amp;amp;l=402&quot;&gt;here&lt;/a&gt;. The important bits are:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;- (NSRect)drawTitle:(NSAttributedString*)title
          withFrame:(NSRect)frame
             inView:(NSView*)controlView {
  // This is the text&apos;s origin, which is from the left margin of the button.
  // If you add a left margin in -drawImage, you have to add it here as well.
  frame.origin.x += spacing_;
  return [super drawTitle:title withFrame:frame inView:controlView];
}
- (NSSize)cellSize {
  NSSize buttonSize = [super cellSize];
  buttonSize.width += spacing_;
  return buttonSize;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;nsbutton-with-a-transparent-background-color&quot;&gt;NSButton with a transparent background color&lt;/h2&gt;
&lt;p&gt;Setting a normal, opaque background on a button is easy. You can do something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[[button cell] setBackgroundColor:[NSColor blueColor]]&lt;/code&gt;, however this only works for borderless buttons and opaque backgrounds. If we want to draw a transparent background, we have to take drawing into our own hands and override &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-drawRect&lt;/code&gt;. Custom painting? You’re well on your way to a subclass bingo! Keep in mind this isn’t the cheapest operation (it gets called literally all the time), so don’t get too ambitious in there.&lt;/p&gt;

&lt;p&gt;The full implementation is &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/chrome/browser/ui/cocoa/browser/profile_chooser_controller.mm&amp;amp;l=150&quot;&gt;here&lt;/a&gt;, but the main method is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;- (void)drawRect:(NSRect)dirtyRect {
  NSColor* backgroundColor = [NSColor colorWithCalibratedWhite:0 alpha:0.1f];
  [backgroundColor setFill];
  // P.S. NSRectFill(...) won&apos;t work, and will ignore the alpha. I tried.
  NSRectFillUsingOperation(dirtyRect, NSCompositeSourceAtop);
  [super drawRect:dirtyRect];
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Bonus points to Cocoa for using the word “atop”.&lt;/p&gt;

&lt;h2 id=&quot;otter-intermission&quot;&gt;Otter intermission&lt;/h2&gt;
&lt;p&gt;I bet you feel pretty pleased with how you’re doing in subclass bingo right now. Here’s a gif of an  otter who probably just subclassed a slider.
&lt;img src=&quot;http://i.imgur.com/nUIe0yQ.gif&quot; alt=&quot;otter&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;nsbutton-that-changes-its-background-on-hover&quot;&gt;NSButton that changes its background on hover&lt;/h2&gt;
&lt;p&gt;Disclaimer: in Chromium, using a raw &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSTrackingArea&lt;/code&gt; is a pretty big &lt;a href=&quot;http://www.chromium.org/developers/coding-style/cocoa-dos-and-donts&quot;&gt;don’t&lt;/a&gt;, because it’s leaky and leads to weird crashes. We also don’t tend to use raw pointers like the code below either, because ain’t nobody got time for segfaults. Instead, we use &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/base/mac/scoped_nsobject.h&quot;&gt;scoped_nsobjects&lt;/a&gt;, which are the badass Objective-C flavours of scoped_ptrs. Refcounting 4 lyfe &amp;lt;3.&lt;/p&gt;

&lt;p&gt;The code as used in Chromium is &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/chrome/browser/ui/cocoa/browser/profile_chooser_controller.mm&amp;amp;l=392&quot;&gt;here&lt;/a&gt;. I’m going to make the crazy assumption that you, dear reader, aren’t using this in Chromium, so below is a regular-world variant. I can tell you that it compiles and runs, but I am not ready at this point to make any guarantees about the irregularities in the space-time continuum it might cause. Worst case, you’ll have to release that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSTrackingArea&lt;/code&gt; when you’re done with it (e.g. in the button’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-dealloc&lt;/code&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;@interface HoverBackgroundButton : NSButton
@end
@implementation HoverBackgroundButton
- (id)initWithFrame:(NSRect)frameRect {
  if ((self = [super initWithFrame:frameRect])) {
    [self setBordered:NO];
    // Bonus code for you. NSMomentaryChangeButton means that the pressed
    // style of the button is the same as the active one.
    // Also, look: font change!
    [self setFont:[NSFont labelFontOfSize:14]];
    [self setButtonType:NSMomentaryChangeButton];
    [[self cell] setBackgroundColor:[NSColor whiteColor]];
    [self sizeToFit];  // &amp;lt;--- We need this so that [self bounds] is a thing.
    // Add a tracking area so that we can show/hide the button when hovering.
    NSTrackingArea* trackingArea = [[NSTrackingArea alloc]
      initWithRect:[self bounds]
           options:NSTrackingMouseEnteredAndExited | NSTrackingActiveAlways
             owner:self userInfo:nil];
    [self addTrackingArea:trackingArea];
  }
  return self;
}
- (void)mouseEntered:(NSEvent*)event {
  // Boom.
  [[self cell] setBackgroundColor:[NSColor blueColor]];
}
- (void)mouseExited:(NSEvent*)event {
  [[self cell] setBackgroundColor:[NSColor whiteColor]];
}
@end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;the-end&quot;&gt;The end&lt;/h2&gt;
&lt;p&gt;You’ve made it. Congratulations! Please let me know if/when you win at subclass bingo (though it’s unclear there are any winners), and I will send you another otter gif.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>(Potentially) neat C++ protipz</title>
   <link href="https://meowni.ca/posts/protipz/"/>
   <updated>2014-01-20T00:00:00+00:00</updated>
   <id>https://meowni.ca/posts/protipz</id>
   <content type="html">&lt;p&gt;Disclaimer: these aren’t new protipz. I didn’t make them up. They’re actually straight out of the Chromium code &lt;a href=&quot;http://www.chromium.org/developers/coding-style&quot;&gt;style&lt;/a&gt;, they’re pretty trivial, and you might already use them. But just in case you’re not a Chromium committer (the outrage), or are fairly new at C++ and want to make your code less suck, here they are. I think they’re neat.&lt;/p&gt;

&lt;h2 id=&quot;copy-constructors-and-their-brethren&quot;&gt;Copy constructors and their brethren&lt;/h2&gt;
&lt;p&gt;You know that scene from The Fly when Jeff Goldblum, having not screwed up teleporting a small baboon, decides he
should totally teleport himself? But then he screws that up (because software), manages to turn himself into a giant terrifying fly (because David Cronenberg), and continues to give me nightmares as an adult.&lt;/p&gt;

&lt;p&gt;That’s exactly how I feel about copy constructors. You can absolutely get them right, but they’re a &lt;a href=&quot;http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml?showone=Copy_Constructors#Copy_Constructors&quot;&gt;pain&lt;/a&gt;, and among other crimes they’re committing, they’re sometimes deceivingly slow. The point is, most of the time you don’t even need them. I mean, Jeff Goldblum teleported himself like three meters away. Couldn’t he have just walked?&lt;/p&gt;

&lt;p&gt;What we tend to do instead is convince the compiler to get annoyed with us if we try to use a copy constructor. This is easy because the compiler &amp;lt;3s being annoyed with us. So we can &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/base/macros.h&amp;amp;l=28&quot;&gt;define&lt;/a&gt; a nice macro (stay with me) that adds a private declaration, but doesn’t implement it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#define DISALLOW_COPY_AND_ASSIGN(TypeName) \
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   \
&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Which you would then use in your private section of your class, like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hooman&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Hooman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hooman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DISALLOW_COPY_AND_ASSIGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hooman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, when you try to be ambitious and clone Jeff Goldblum,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;Hooman&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jeffGoldblum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Hooman&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;teleportedJeffGoldblum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jeffGoldblum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Clang will tell you something like “error: calling a private constructor of class ‘Hooman’”. Other compilers might tell you other things, but they’ll generally have the same annoyed tone. Now would be a good time to apologize to your compiler for all the silly things you’ve done in the past.&lt;/p&gt;

&lt;h2 id=&quot;digression-on-macros&quot;&gt;Digression on macros&lt;/h2&gt;
&lt;p&gt;My C++ motto is “Yes, but just don’t”. Yes, macros are weird and evil and if you use them incorrectly you will open the hellmouth. So try not to. We will use macros in a civilized way in here, and if you’re writing something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#define TRUE FALSE&lt;/code&gt; we will all agree that it was an uncivilized thing to do and it’s your turn to tell Buffy about the hellmouth.&lt;/p&gt;

&lt;h2 id=&quot;debug-checks&quot;&gt;Debug checks&lt;/h2&gt;
&lt;p&gt;The Chromium code is peppered with these things we call &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/base/logging.h&amp;amp;l=734&quot;&gt;DCHECKs&lt;/a&gt;. They’re asserts that run only in debug builds, so that you will catch bad scenarios in development and testing but you won’t give the user a panic attack in production. Ideally, we all have 100% test coverage that we run in debug mode (because it’s obviously sooper fast), so we detect all of the herp derps and nothing ever goes wrong in production. Ideally.&lt;/p&gt;

&lt;p&gt;My favourite usage of dchecks is to make sure that I’m not accidentally breaking code by adding new values to an enum, and have them be unintentionally handled by catch-all blocks.&lt;/p&gt;

&lt;p&gt;Let’s pretend we have this enum:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THINGS_TO_WEAR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SOCKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HAT&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Which we would use for dressing up in the morning like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Put on feet.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DCHECK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- The important bit.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Put on head.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This way, if later on someone adds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PANTS&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;THINGS_TO_WEAR&lt;/code&gt; and ends up calling this code with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thing = PANTS&lt;/code&gt;, the runtime will meep and I won’t have accidentally put my pants on my head. See what I did there? (If you were bothered that the enum wasn’t sorted alphabetically, now you know why. Let’s move on.)&lt;/p&gt;

&lt;p&gt;You can also do this with a similar &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/base/logging.h&amp;amp;l=783&quot;&gt;NOTREACHED()&lt;/a&gt; assert, to make sure your new values are not caught by a default switch case.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Put on feet.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Put on head.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NOTREACHED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// MEEP.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;unnamed-namespaces&quot;&gt;Unnamed namespaces&lt;/h2&gt;
&lt;p&gt;This is an unnamed namespace, which I am declaring in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cc&lt;/code&gt; file, and it is the coolest:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyAmazingHelperFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Reasons why it’s the coolest are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This function is available only inside this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cc&lt;/code&gt; file so it doesn’t make your class obese.&lt;/li&gt;
  &lt;li&gt;You don’t have to remember which of the 3+ meanings of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt; you’re referring to when defining a file scoped static variable. This means you’re playing by the “Yes, but don’t” rules of having fun with C++, which don’t give you headaches.&lt;/li&gt;
  &lt;li&gt;If you care about this sort of thing, your function name gets a nicer mangled name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s basically just that second bullet though.&lt;/p&gt;

&lt;h2 id=&quot;forward-declarations--includes&quot;&gt;Forward declarations &amp;gt;&amp;gt; #includes&lt;/h2&gt;
&lt;p&gt;This is probaby the most boring of all the topics, but the most useful one. Having a header file include everything but the kitchen sink is a little unfortunate. Your compiler is unhappy because it needs to open all those files, which in turn will make you unhappy, because every time you touch a header file, it will trigger seventy billion other files to feel like they need to be recompiled. Ain’t nobody got time for that.&lt;/p&gt;

&lt;p&gt;Instead, what we can do is forward declare the class (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class Foo;&lt;/code&gt;) in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.h&lt;/code&gt; file, and include it (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include &quot;Foo.h&quot;;&lt;/code&gt;) in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cc&lt;/code&gt; file. That basically means you’re promising the compiler this type exists, and that you will tell it what the type looks like when it (the compiler) needs it. If the compiler needs to use the type and you haven’t included it, I promise you it will meep.&lt;/p&gt;

&lt;p&gt;But because this is C++, the rules of this game are a little tricky, and will sometimes get you into an argument with the compiler. The question I try to answer is “Does the compiler need to know the size or contents of the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foo&lt;/code&gt;?”&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the answer is yes, and the compiler cares (e.g. inheriting from/making a member of that incomplete type), then you won’t be able to forward declare it. You have to do the promising and the explaining in the same place, so might as well just include the file.&lt;/li&gt;
  &lt;li&gt;If the answer is no, and the compiler doesn’t care (e.g. you’re declaring but not defining functions that use the incomplete type), then forward declare it away!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means you have to be a little careful when including the type in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cc&lt;/code&gt; file. If there are two types that are called the exact same thing and you include the wrong header, you’ll have a bad time. So, you know, just don’t. :)&lt;/p&gt;

&lt;h2 id=&quot;thats-it-thats-all&quot;&gt;That’s it, that’s all.&lt;/h2&gt;
&lt;p&gt;Go forth and write nicer C++ code.&lt;/p&gt;
</content>
 </entry>
 
 

</feed>
